

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Nov 16 13:32:37 2022

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	mediumconst
    63  00FD00                     __pmediumconst:
    64                           	opt stack 0
    65  00FD00  00                 	db	0
    66  00FD01                     _code_Table:
    67                           	opt stack 0
    68  00FD01  00                 	db	0
    69  00FD02  07                 	db	7
    70  00FD03  0E                 	db	14
    71  00FD04  09                 	db	9
    72  00FD05  1C                 	db	28
    73  00FD06  1B                 	db	27
    74  00FD07  12                 	db	18
    75  00FD08  15                 	db	21
    76  00FD09  38                 	db	56
    77  00FD0A  3F                 	db	63
    78  00FD0B  36                 	db	54
    79  00FD0C  31                 	db	49
    80  00FD0D  24                 	db	36
    81  00FD0E  23                 	db	35
    82  00FD0F  2A                 	db	42
    83  00FD10  2D                 	db	45
    84  00FD11  70                 	db	112
    85  00FD12  77                 	db	119
    86  00FD13  7E                 	db	126
    87  00FD14  79                 	db	121
    88  00FD15  6C                 	db	108
    89  00FD16  6B                 	db	107
    90  00FD17  62                 	db	98
    91  00FD18  65                 	db	101
    92  00FD19  48                 	db	72
    93  00FD1A  4F                 	db	79
    94  00FD1B  46                 	db	70
    95  00FD1C  41                 	db	65
    96  00FD1D  54                 	db	84
    97  00FD1E  53                 	db	83
    98  00FD1F  5A                 	db	90
    99  00FD20  5D                 	db	93
   100  00FD21  E0                 	db	224
   101  00FD22  E7                 	db	231
   102  00FD23  EE                 	db	238
   103  00FD24  E9                 	db	233
   104  00FD25  FC                 	db	252
   105  00FD26  FB                 	db	251
   106  00FD27  F2                 	db	242
   107  00FD28  F5                 	db	245
   108  00FD29  D8                 	db	216
   109  00FD2A  DF                 	db	223
   110  00FD2B  D6                 	db	214
   111  00FD2C  D1                 	db	209
   112  00FD2D  C4                 	db	196
   113  00FD2E  C3                 	db	195
   114  00FD2F  CA                 	db	202
   115  00FD30  CD                 	db	205
   116  00FD31  90                 	db	144
   117  00FD32  97                 	db	151
   118  00FD33  9E                 	db	158
   119  00FD34  99                 	db	153
   120  00FD35  8C                 	db	140
   121  00FD36  8B                 	db	139
   122  00FD37  82                 	db	130
   123  00FD38  85                 	db	133
   124  00FD39  A8                 	db	168
   125  00FD3A  AF                 	db	175
   126  00FD3B  A6                 	db	166
   127  00FD3C  A1                 	db	161
   128  00FD3D  B4                 	db	180
   129  00FD3E  B3                 	db	179
   130  00FD3F  BA                 	db	186
   131  00FD40  BD                 	db	189
   132  00FD41  C7                 	db	199
   133  00FD42  C1                 	db	193
   134  00FD43  C9                 	db	201
   135  00FD44  CE                 	db	206
   136  00FD45  DB                 	db	219
   137  00FD46  DC                 	db	220
   138  00FD47  D5                 	db	213
   139  00FD48  D2                 	db	210
   140  00FD49  FF                 	db	255
   141  00FD4A  F8                 	db	248
   142  00FD4B  F1                 	db	241
   143  00FD4C  F6                 	db	246
   144  00FD4D  E3                 	db	227
   145  00FD4E  E4                 	db	228
   146  00FD4F  ED                 	db	237
   147  00FD50  EA                 	db	234
   148  00FD51  B7                 	db	183
   149  00FD52  B0                 	db	176
   150  00FD53  B9                 	db	185
   151  00FD54  BE                 	db	190
   152  00FD55  AB                 	db	171
   153  00FD56  AC                 	db	172
   154  00FD57  A5                 	db	165
   155  00FD58  A2                 	db	162
   156  00FD59  8F                 	db	143
   157  00FD5A  88                 	db	136
   158  00FD5B  81                 	db	129
   159  00FD5C  86                 	db	134
   160  00FD5D  93                 	db	147
   161  00FD5E  94                 	db	148
   162  00FD5F  9D                 	db	157
   163  00FD60  9A                 	db	154
   164  00FD61  27                 	db	39
   165  00FD62  20                 	db	32
   166  00FD63  29                 	db	41
   167  00FD64  2E                 	db	46
   168  00FD65  3B                 	db	59
   169  00FD66  3C                 	db	60
   170  00FD67  35                 	db	53
   171  00FD68  32                 	db	50
   172  00FD69  1F                 	db	31
   173  00FD6A  18                 	db	24
   174  00FD6B  11                 	db	17
   175  00FD6C  16                 	db	22
   176  00FD6D  03                 	db	3
   177  00FD6E  04                 	db	4
   178  00FD6F  0D                 	db	13
   179  00FD70  0A                 	db	10
   180  00FD71  57                 	db	87
   181  00FD72  50                 	db	80
   182  00FD73  59                 	db	89
   183  00FD74  5E                 	db	94
   184  00FD75  4B                 	db	75
   185  00FD76  4C                 	db	76
   186  00FD77  45                 	db	69
   187  00FD78  42                 	db	66
   188  00FD79  6F                 	db	111
   189  00FD7A  68                 	db	104
   190  00FD7B  61                 	db	97
   191  00FD7C  66                 	db	102
   192  00FD7D  73                 	db	115
   193  00FD7E  74                 	db	116
   194  00FD7F  7D                 	db	125
   195  00FD80  7A                 	db	122
   196  00FD81  89                 	db	137
   197  00FD82  8E                 	db	142
   198  00FD83  87                 	db	135
   199  00FD84  80                 	db	128
   200  00FD85  95                 	db	149
   201  00FD86  93                 	db	147
   202  00FD87  9B                 	db	155
   203  00FD88  9C                 	db	156
   204  00FD89  B1                 	db	177
   205  00FD8A  B6                 	db	182
   206  00FD8B  BF                 	db	191
   207  00FD8C  B8                 	db	184
   208  00FD8D  AD                 	db	173
   209  00FD8E  AA                 	db	170
   210  00FD8F  A3                 	db	163
   211  00FD90  A4                 	db	164
   212  00FD91  F9                 	db	249
   213  00FD92  FE                 	db	254
   214  00FD93  F7                 	db	247
   215  00FD94  F0                 	db	240
   216  00FD95  E5                 	db	229
   217  00FD96  E3                 	db	227
   218  00FD97  EB                 	db	235
   219  00FD98  EC                 	db	236
   220  00FD99  C1                 	db	193
   221  00FD9A  C6                 	db	198
   222  00FD9B  CF                 	db	207
   223  00FD9C  C8                 	db	200
   224  00FD9D  DD                 	db	221
   225  00FD9E  DA                 	db	218
   226  00FD9F  D3                 	db	211
   227  00FDA0  D4                 	db	212
   228  00FDA1  69                 	db	105
   229  00FDA2  6E                 	db	110
   230  00FDA3  67                 	db	103
   231  00FDA4  60                 	db	96
   232  00FDA5  75                 	db	117
   233  00FDA6  73                 	db	115
   234  00FDA7  7B                 	db	123
   235  00FDA8  7C                 	db	124
   236  00FDA9  51                 	db	81
   237  00FDAA  56                 	db	86
   238  00FDAB  5F                 	db	95
   239  00FDAC  58                 	db	88
   240  00FDAD  4D                 	db	77
   241  00FDAE  4A                 	db	74
   242  00FDAF  43                 	db	67
   243  00FDB0  44                 	db	68
   244  00FDB1  19                 	db	25
   245  00FDB2  1E                 	db	30
   246  00FDB3  17                 	db	23
   247  00FDB4  10                 	db	16
   248  00FDB5  05                 	db	5
   249  00FDB6  03                 	db	3
   250  00FDB7  0B                 	db	11
   251  00FDB8  0C                 	db	12
   252  00FDB9  21                 	db	33
   253  00FDBA  26                 	db	38
   254  00FDBB  2F                 	db	47
   255  00FDBC  28                 	db	40
   256  00FDBD  3D                 	db	61
   257  00FDBE  3A                 	db	58
   258  00FDBF  33                 	db	51
   259  00FDC0  34                 	db	52
   260  00FDC1  4E                 	db	78
   261  00FDC2  49                 	db	73
   262  00FDC3  40                 	db	64
   263  00FDC4  47                 	db	71
   264  00FDC5  52                 	db	82
   265  00FDC6  55                 	db	85
   266  00FDC7  5C                 	db	92
   267  00FDC8  5B                 	db	91
   268  00FDC9  76                 	db	118
   269  00FDCA  71                 	db	113
   270  00FDCB  78                 	db	120
   271  00FDCC  7F                 	db	127
   272  00FDCD  6A                 	db	106
   273  00FDCE  6D                 	db	109
   274  00FDCF  64                 	db	100
   275  00FDD0  62                 	db	98
   276  00FDD1  3E                 	db	62
   277  00FDD2  39                 	db	57
   278  00FDD3  30                 	db	48
   279  00FDD4  37                 	db	55
   280  00FDD5  22                 	db	34
   281  00FDD6  25                 	db	37
   282  00FDD7  2C                 	db	44
   283  00FDD8  2B                 	db	43
   284  00FDD9  06                 	db	6
   285  00FDDA  01                 	db	1
   286  00FDDB  08                 	db	8
   287  00FDDC  0F                 	db	15
   288  00FDDD  1A                 	db	26
   289  00FDDE  1D                 	db	29
   290  00FDDF  14                 	db	20
   291  00FDE0  12                 	db	18
   292  00FDE1  AE                 	db	174
   293  00FDE2  A9                 	db	169
   294  00FDE3  A0                 	db	160
   295  00FDE4  A7                 	db	167
   296  00FDE5  B2                 	db	178
   297  00FDE6  B5                 	db	181
   298  00FDE7  BC                 	db	188
   299  00FDE8  BB                 	db	187
   300  00FDE9  96                 	db	150
   301  00FDEA  91                 	db	145
   302  00FDEB  98                 	db	152
   303  00FDEC  9F                 	db	159
   304  00FDED  8A                 	db	138
   305  00FDEE  8D                 	db	141
   306  00FDEF  84                 	db	132
   307  00FDF0  82                 	db	130
   308  00FDF1  DE                 	db	222
   309  00FDF2  D9                 	db	217
   310  00FDF3  D0                 	db	208
   311  00FDF4  D7                 	db	215
   312  00FDF5  C2                 	db	194
   313  00FDF6  C5                 	db	197
   314  00FDF7  CC                 	db	204
   315  00FDF8  CB                 	db	203
   316  00FDF9  E6                 	db	230
   317  00FDFA  E1                 	db	225
   318  00FDFB  E8                 	db	232
   319  00FDFC  EF                 	db	239
   320  00FDFD  FA                 	db	250
   321  00FDFE  FD                 	db	253
   322  00FDFF  F4                 	db	244
   323  00FE00  F2                 	db	242
   324  00FE01                     __end_of_code_Table:
   325                           	opt stack 0
   326  00FE01                     _dpowers:
   327                           	opt stack 0
   328  00FE01  0001               	dw	1
   329  00FE03  0000               	dw	0
   330  00FE05  000A               	dw	10
   331  00FE07  0000               	dw	0
   332  00FE09  0064               	dw	100
   333  00FE0B  0000               	dw	0
   334  00FE0D  03E8               	dw	1000
   335  00FE0F  0000               	dw	0
   336  00FE11  2710               	dw	10000
   337  00FE13  0000               	dw	0
   338  00FE15  86A0               	dw	34464
   339  00FE17  0001               	dw	1
   340  00FE19  4240               	dw	16960
   341  00FE1B  000F               	dw	15
   342  00FE1D  9680               	dw	38528
   343  00FE1F  0098               	dw	152
   344  00FE21  E100               	dw	57600
   345  00FE23  05F5               	dw	1525
   346  00FE25  CA00               	dw	51712
   347  00FE27  3B9A               	dw	15258
   348  00FE29                     __end_of_dpowers:
   349                           	opt stack 0
   350  00FE29                     __npowers_:
   351                           	opt stack 0
   352  00FE29  00                 	db	0
   353  00FE2A  80                 	db	128
   354  00FE2B  3F                 	db	63
   355  00FE2C  CD                 	db	205
   356  00FE2D  CC                 	db	204
   357  00FE2E  3D                 	db	61
   358  00FE2F  D7                 	db	215
   359  00FE30  23                 	db	35
   360  00FE31  3C                 	db	60
   361  00FE32  12                 	db	18
   362  00FE33  83                 	db	131
   363  00FE34  3A                 	db	58
   364  00FE35  B7                 	db	183
   365  00FE36  D1                 	db	209
   366  00FE37  38                 	db	56
   367  00FE38  C6                 	db	198
   368  00FE39  27                 	db	39
   369  00FE3A  37                 	db	55
   370  00FE3B  38                 	db	56
   371  00FE3C  86                 	db	134
   372  00FE3D  35                 	db	53
   373  00FE3E  C0                 	db	192
   374  00FE3F  D6                 	db	214
   375  00FE40  33                 	db	51
   376  00FE41  CC                 	db	204
   377  00FE42  2B                 	db	43
   378  00FE43  32                 	db	50
   379  00FE44  70                 	db	112
   380  00FE45  89                 	db	137
   381  00FE46  30                 	db	48
   382  00FE47  E7                 	db	231
   383  00FE48  DB                 	db	219
   384  00FE49  2E                 	db	46
   385  00FE4A  E5                 	db	229
   386  00FE4B  3C                 	db	60
   387  00FE4C  1E                 	db	30
   388  00FE4D  42                 	db	66
   389  00FE4E  A2                 	db	162
   390  00FE4F  0D                 	db	13
   391  00FE50                     __end_of__npowers_:
   392                           	opt stack 0
   393  00FE50                     __powers_:
   394                           	opt stack 0
   395  00FE50  00                 	db	0
   396  00FE51  80                 	db	128
   397  00FE52  3F                 	db	63
   398  00FE53  00                 	db	0
   399  00FE54  20                 	db	32
   400  00FE55  41                 	db	65
   401  00FE56  00                 	db	0
   402  00FE57  C8                 	db	200
   403  00FE58  42                 	db	66
   404  00FE59  00                 	db	0
   405  00FE5A  7A                 	db	122
   406  00FE5B  44                 	db	68
   407  00FE5C  40                 	db	64
   408  00FE5D  1C                 	db	28
   409  00FE5E  46                 	db	70
   410  00FE5F  50                 	db	80
   411  00FE60  C3                 	db	195
   412  00FE61  47                 	db	71
   413  00FE62  24                 	db	36
   414  00FE63  74                 	db	116
   415  00FE64  49                 	db	73
   416  00FE65  97                 	db	151
   417  00FE66  18                 	db	24
   418  00FE67  4B                 	db	75
   419  00FE68  BC                 	db	188
   420  00FE69  BE                 	db	190
   421  00FE6A  4C                 	db	76
   422  00FE6B  6B                 	db	107
   423  00FE6C  6E                 	db	110
   424  00FE6D  4E                 	db	78
   425  00FE6E  03                 	db	3
   426  00FE6F  15                 	db	21
   427  00FE70  50                 	db	80
   428  00FE71  79                 	db	121
   429  00FE72  AD                 	db	173
   430  00FE73  60                 	db	96
   431  00FE74  F3                 	db	243
   432  00FE75  49                 	db	73
   433  00FE76  71                 	db	113
   434  00FE77                     __end_of__powers_:
   435                           	opt stack 0
   436  0000                     _ADCON0	set	4034
   437  0000                     _ADCON0bits	set	4034
   438  0000                     _ADCON1	set	4033
   439  0000                     _ADCON2	set	4032
   440  0000                     _ADRESH	set	4036
   441  0000                     _ADRESL	set	4035
   442  0000                     _INTCON2bits	set	4081
   443  0000                     _INTCONbits	set	4082
   444  0000                     _OSCCONbits	set	4051
   445  0000                     _PIE1bits	set	3997
   446  0000                     _PIR1bits	set	3998
   447  0000                     _PORTA	set	3968
   448  0000                     _PORTCbits	set	3970
   449  0000                     _RCONbits	set	4048
   450  0000                     _RCSTA	set	4011
   451  0000                     _RCSTAbits	set	4011
   452  0000                     _SPBRG	set	4015
   453  0000                     _SPBRGH	set	4016
   454  0000                     _SSPBUF	set	4041
   455  0000                     _SSPCON1	set	4038
   456  0000                     _SSPCON1bits	set	4038
   457  0000                     _SSPSTAT	set	4039
   458  0000                     _SSPSTATbits	set	4039
   459  0000                     _T0CON	set	4053
   460  0000                     _T0CONbits	set	4053
   461  0000                     _TMR0H	set	4055
   462  0000                     _TMR0L	set	4054
   463  0000                     _TRISA	set	3986
   464  0000                     _TRISAbits	set	3986
   465  0000                     _TRISB	set	3987
   466  0000                     _TRISCbits	set	3988
   467  0000                     _TXREG	set	4013
   468  0000                     _TXSTA	set	4012
   469  0000                     _TXSTAbits	set	4012
   470  00FE77                     STR_2:
   471  00FE77  47                 	db	71	;'G'
   472  00FE78  72                 	db	114	;'r'
   473  00FE79  6F                 	db	111	;'o'
   474  00FE7A  75                 	db	117	;'u'
   475  00FE7B  70                 	db	112	;'p'
   476  00FE7C  20                 	db	32
   477  00FE7D  49                 	db	73	;'I'
   478  00FE7E  44                 	db	68	;'D'
   479  00FE7F  3D                 	db	61	;'='
   480  00FE80  25                 	db	37
   481  00FE81  75                 	db	117	;'u'
   482  00FE82  20                 	db	32
   483  00FE83  4E                 	db	78	;'N'
   484  00FE84  6F                 	db	111	;'o'
   485  00FE85  64                 	db	100	;'d'
   486  00FE86  65                 	db	101	;'e'
   487  00FE87  20                 	db	32
   488  00FE88  49                 	db	73	;'I'
   489  00FE89  44                 	db	68	;'D'
   490  00FE8A  3D                 	db	61	;'='
   491  00FE8B  25                 	db	37
   492  00FE8C  75                 	db	117	;'u'
   493  00FE8D  20                 	db	32
   494  00FE8E  56                 	db	86	;'V'
   495  00FE8F  6F                 	db	111	;'o'
   496  00FE90  6C                 	db	108	;'l'
   497  00FE91  74                 	db	116	;'t'
   498  00FE92  61                 	db	97	;'a'
   499  00FE93  67                 	db	103	;'g'
   500  00FE94  65                 	db	101	;'e'
   501  00FE95  5F                 	db	95	;'_'
   502  00FE96  6C                 	db	108	;'l'
   503  00FE97  69                 	db	105	;'i'
   504  00FE98  67                 	db	103	;'g'
   505  00FE99  68                 	db	104	;'h'
   506  00FE9A  74                 	db	116	;'t'
   507  00FE9B  3D                 	db	61	;'='
   508  00FE9C  25                 	db	37
   509  00FE9D  2E                 	db	46
   510  00FE9E  32                 	db	50	;'2'
   511  00FE9F  66                 	db	102	;'f'
   512  00FEA0  20                 	db	32
   513  00FEA1  56                 	db	86	;'V'
   514  00FEA2  20                 	db	32
   515  00FEA3  54                 	db	84	;'T'
   516  00FEA4  65                 	db	101	;'e'
   517  00FEA5  6D                 	db	109	;'m'
   518  00FEA6  70                 	db	112	;'p'
   519  00FEA7  65                 	db	101	;'e'
   520  00FEA8  72                 	db	114	;'r'
   521  00FEA9  61                 	db	97	;'a'
   522  00FEAA  74                 	db	116	;'t'
   523  00FEAB  75                 	db	117	;'u'
   524  00FEAC  72                 	db	114	;'r'
   525  00FEAD  65                 	db	101	;'e'
   526  00FEAE  3D                 	db	61	;'='
   527  00FEAF  25                 	db	37
   528  00FEB0  2E                 	db	46
   529  00FEB1  32                 	db	50	;'2'
   530  00FEB2  66                 	db	102	;'f'
   531  00FEB3  20                 	db	32
   532  00FEB4  43                 	db	67	;'C'
   533  00FEB5  20                 	db	32
   534  00FEB6  4D                 	db	77	;'M'
   535  00FEB7  6F                 	db	111	;'o'
   536  00FEB8  74                 	db	116	;'t'
   537  00FEB9  69                 	db	105	;'i'
   538  00FEBA  6F                 	db	111	;'o'
   539  00FEBB  6E                 	db	110	;'n'
   540  00FEBC  20                 	db	32
   541  00FEBD  64                 	db	100	;'d'
   542  00FEBE  65                 	db	101	;'e'
   543  00FEBF  74                 	db	116	;'t'
   544  00FEC0  65                 	db	101	;'e'
   545  00FEC1  63                 	db	99	;'c'
   546  00FEC2  74                 	db	116	;'t'
   547  00FEC3  65                 	db	101	;'e'
   548  00FEC4  64                 	db	100	;'d'
   549  00FEC5  21                 	db	33
   550  00FEC6  25                 	db	37
   551  00FEC7  2E                 	db	46
   552  00FEC8  32                 	db	50	;'2'
   553  00FEC9  66                 	db	102	;'f'
   554  00FECA  20                 	db	32
   555  00FECB  52                 	db	82	;'R'
   556  00FECC  53                 	db	83	;'S'
   557  00FECD  53                 	db	83	;'S'
   558  00FECE  49                 	db	73	;'I'
   559  00FECF  20                 	db	32
   560  00FED0  3D                 	db	61	;'='
   561  00FED1  25                 	db	37
   562  00FED2  75                 	db	117	;'u'
   563  00FED3  20                 	db	32
   564  00FED4  43                 	db	67	;'C'
   565  00FED5  52                 	db	82	;'R'
   566  00FED6  43                 	db	67	;'C'
   567  00FED7  52                 	db	82	;'R'
   568  00FED8  69                 	db	105	;'i'
   569  00FED9  67                 	db	103	;'g'
   570  00FEDA  68                 	db	104	;'h'
   571  00FEDB  74                 	db	116	;'t'
   572  00FEDC  3D                 	db	61	;'='
   573  00FEDD  25                 	db	37
   574  00FEDE  75                 	db	117	;'u'
   575  00FEDF  20                 	db	32
   576  00FEE0  0D                 	db	13
   577  00FEE1  0A                 	db	10
   578  00FEE2  00                 	db	0
   579  00FEE3                     STR_1:
   580  00FEE3  47                 	db	71	;'G'
   581  00FEE4  72                 	db	114	;'r'
   582  00FEE5  6F                 	db	111	;'o'
   583  00FEE6  75                 	db	117	;'u'
   584  00FEE7  70                 	db	112	;'p'
   585  00FEE8  20                 	db	32
   586  00FEE9  49                 	db	73	;'I'
   587  00FEEA  44                 	db	68	;'D'
   588  00FEEB  3D                 	db	61	;'='
   589  00FEEC  25                 	db	37
   590  00FEED  75                 	db	117	;'u'
   591  00FEEE  20                 	db	32
   592  00FEEF  4E                 	db	78	;'N'
   593  00FEF0  6F                 	db	111	;'o'
   594  00FEF1  64                 	db	100	;'d'
   595  00FEF2  65                 	db	101	;'e'
   596  00FEF3  20                 	db	32
   597  00FEF4  49                 	db	73	;'I'
   598  00FEF5  44                 	db	68	;'D'
   599  00FEF6  3D                 	db	61	;'='
   600  00FEF7  25                 	db	37
   601  00FEF8  75                 	db	117	;'u'
   602  00FEF9  20                 	db	32
   603  00FEFA  56                 	db	86	;'V'
   604  00FEFB  6F                 	db	111	;'o'
   605  00FEFC  6C                 	db	108	;'l'
   606  00FEFD  74                 	db	116	;'t'
   607  00FEFE  61                 	db	97	;'a'
   608  00FEFF  67                 	db	103	;'g'
   609  00FF00  65                 	db	101	;'e'
   610  00FF01  5F                 	db	95	;'_'
   611  00FF02  6C                 	db	108	;'l'
   612  00FF03  69                 	db	105	;'i'
   613  00FF04  67                 	db	103	;'g'
   614  00FF05  68                 	db	104	;'h'
   615  00FF06  74                 	db	116	;'t'
   616  00FF07  3D                 	db	61	;'='
   617  00FF08  25                 	db	37
   618  00FF09  2E                 	db	46
   619  00FF0A  32                 	db	50	;'2'
   620  00FF0B  66                 	db	102	;'f'
   621  00FF0C  20                 	db	32
   622  00FF0D  56                 	db	86	;'V'
   623  00FF0E  20                 	db	32
   624  00FF0F  54                 	db	84	;'T'
   625  00FF10  65                 	db	101	;'e'
   626  00FF11  6D                 	db	109	;'m'
   627  00FF12  70                 	db	112	;'p'
   628  00FF13  65                 	db	101	;'e'
   629  00FF14  72                 	db	114	;'r'
   630  00FF15  61                 	db	97	;'a'
   631  00FF16  74                 	db	116	;'t'
   632  00FF17  75                 	db	117	;'u'
   633  00FF18  72                 	db	114	;'r'
   634  00FF19  65                 	db	101	;'e'
   635  00FF1A  3D                 	db	61	;'='
   636  00FF1B  25                 	db	37
   637  00FF1C  2E                 	db	46
   638  00FF1D  32                 	db	50	;'2'
   639  00FF1E  66                 	db	102	;'f'
   640  00FF1F  20                 	db	32
   641  00FF20  43                 	db	67	;'C'
   642  00FF21  20                 	db	32
   643  00FF22  57                 	db	87	;'W'
   644  00FF23  61                 	db	97	;'a'
   645  00FF24  74                 	db	116	;'t'
   646  00FF25  63                 	db	99	;'c'
   647  00FF26  68                 	db	104	;'h'
   648  00FF27  69                 	db	105	;'i'
   649  00FF28  6E                 	db	110	;'n'
   650  00FF29  67                 	db	103	;'g'
   651  00FF2A  7E                 	db	126
   652  00FF2B  7E                 	db	126
   653  00FF2C  25                 	db	37
   654  00FF2D  2E                 	db	46
   655  00FF2E  32                 	db	50	;'2'
   656  00FF2F  66                 	db	102	;'f'
   657  00FF30  20                 	db	32
   658  00FF31  52                 	db	82	;'R'
   659  00FF32  53                 	db	83	;'S'
   660  00FF33  53                 	db	83	;'S'
   661  00FF34  49                 	db	73	;'I'
   662  00FF35  20                 	db	32
   663  00FF36  3D                 	db	61	;'='
   664  00FF37  25                 	db	37
   665  00FF38  75                 	db	117	;'u'
   666  00FF39  20                 	db	32
   667  00FF3A  43                 	db	67	;'C'
   668  00FF3B  52                 	db	82	;'R'
   669  00FF3C  43                 	db	67	;'C'
   670  00FF3D  52                 	db	82	;'R'
   671  00FF3E  69                 	db	105	;'i'
   672  00FF3F  67                 	db	103	;'g'
   673  00FF40  68                 	db	104	;'h'
   674  00FF41  74                 	db	116	;'t'
   675  00FF42  3D                 	db	61	;'='
   676  00FF43  25                 	db	37
   677  00FF44  75                 	db	117	;'u'
   678  00FF45  20                 	db	32
   679  00FF46  0D                 	db	13
   680  00FF47  0A                 	db	10
   681  00FF48  00                 	db	0
   682  00FF49                     STR_4:
   683  00FF49  47                 	db	71	;'G'
   684  00FF4A  72                 	db	114	;'r'
   685  00FF4B  6F                 	db	111	;'o'
   686  00FF4C  75                 	db	117	;'u'
   687  00FF4D  70                 	db	112	;'p'
   688  00FF4E  20                 	db	32
   689  00FF4F  49                 	db	73	;'I'
   690  00FF50  44                 	db	68	;'D'
   691  00FF51  3D                 	db	61	;'='
   692  00FF52  25                 	db	37
   693  00FF53  75                 	db	117	;'u'
   694  00FF54  20                 	db	32
   695  00FF55  4E                 	db	78	;'N'
   696  00FF56  6F                 	db	111	;'o'
   697  00FF57  64                 	db	100	;'d'
   698  00FF58  65                 	db	101	;'e'
   699  00FF59  20                 	db	32
   700  00FF5A  49                 	db	73	;'I'
   701  00FF5B  44                 	db	68	;'D'
   702  00FF5C  3D                 	db	61	;'='
   703  00FF5D  25                 	db	37
   704  00FF5E  75                 	db	117	;'u'
   705  00FF5F  20                 	db	32
   706  00FF60  4D                 	db	77	;'M'
   707  00FF61  6F                 	db	111	;'o'
   708  00FF62  69                 	db	105	;'i'
   709  00FF63  73                 	db	115	;'s'
   710  00FF64  74                 	db	116	;'t'
   711  00FF65  75                 	db	117	;'u'
   712  00FF66  72                 	db	114	;'r'
   713  00FF67  65                 	db	101	;'e'
   714  00FF68  3D                 	db	61	;'='
   715  00FF69  25                 	db	37
   716  00FF6A  2E                 	db	46
   717  00FF6B  32                 	db	50	;'2'
   718  00FF6C  66                 	db	102	;'f'
   719  00FF6D  20                 	db	32
   720  00FF6E  54                 	db	84	;'T'
   721  00FF6F  65                 	db	101	;'e'
   722  00FF70  6D                 	db	109	;'m'
   723  00FF71  70                 	db	112	;'p'
   724  00FF72  65                 	db	101	;'e'
   725  00FF73  72                 	db	114	;'r'
   726  00FF74  61                 	db	97	;'a'
   727  00FF75  74                 	db	116	;'t'
   728  00FF76  75                 	db	117	;'u'
   729  00FF77  72                 	db	114	;'r'
   730  00FF78  65                 	db	101	;'e'
   731  00FF79  3D                 	db	61	;'='
   732  00FF7A  25                 	db	37
   733  00FF7B  2E                 	db	46
   734  00FF7C  32                 	db	50	;'2'
   735  00FF7D  66                 	db	102	;'f'
   736  00FF7E  20                 	db	32
   737  00FF7F  43                 	db	67	;'C'
   738  00FF80  20                 	db	32
   739  00FF81  4C                 	db	76	;'L'
   740  00FF82  69                 	db	105	;'i'
   741  00FF83  67                 	db	103	;'g'
   742  00FF84  68                 	db	104	;'h'
   743  00FF85  74                 	db	116	;'t'
   744  00FF86  3D                 	db	61	;'='
   745  00FF87  25                 	db	37
   746  00FF88  2E                 	db	46
   747  00FF89  32                 	db	50	;'2'
   748  00FF8A  66                 	db	102	;'f'
   749  00FF8B  20                 	db	32
   750  00FF8C  56                 	db	86	;'V'
   751  00FF8D  20                 	db	32
   752  00FF8E  52                 	db	82	;'R'
   753  00FF8F  53                 	db	83	;'S'
   754  00FF90  53                 	db	83	;'S'
   755  00FF91  49                 	db	73	;'I'
   756  00FF92  20                 	db	32
   757  00FF93  3D                 	db	61	;'='
   758  00FF94  25                 	db	37
   759  00FF95  75                 	db	117	;'u'
   760  00FF96  20                 	db	32
   761  00FF97  43                 	db	67	;'C'
   762  00FF98  52                 	db	82	;'R'
   763  00FF99  43                 	db	67	;'C'
   764  00FF9A  52                 	db	82	;'R'
   765  00FF9B  69                 	db	105	;'i'
   766  00FF9C  67                 	db	103	;'g'
   767  00FF9D  68                 	db	104	;'h'
   768  00FF9E  74                 	db	116	;'t'
   769  00FF9F  3D                 	db	61	;'='
   770  00FFA0  25                 	db	37
   771  00FFA1  75                 	db	117	;'u'
   772  00FFA2  20                 	db	32
   773  00FFA3  0D                 	db	13
   774  00FFA4  0A                 	db	10
   775  00FFA5  00                 	db	0
   776  00FFA6                     STR_3:
   777  00FFA6  47                 	db	71	;'G'
   778  00FFA7  72                 	db	114	;'r'
   779  00FFA8  6F                 	db	111	;'o'
   780  00FFA9  75                 	db	117	;'u'
   781  00FFAA  70                 	db	112	;'p'
   782  00FFAB  20                 	db	32
   783  00FFAC  49                 	db	73	;'I'
   784  00FFAD  44                 	db	68	;'D'
   785  00FFAE  3D                 	db	61	;'='
   786  00FFAF  25                 	db	37
   787  00FFB0  75                 	db	117	;'u'
   788  00FFB1  20                 	db	32
   789  00FFB2  4E                 	db	78	;'N'
   790  00FFB3  6F                 	db	111	;'o'
   791  00FFB4  64                 	db	100	;'d'
   792  00FFB5  65                 	db	101	;'e'
   793  00FFB6  20                 	db	32
   794  00FFB7  49                 	db	73	;'I'
   795  00FFB8  44                 	db	68	;'D'
   796  00FFB9  3D                 	db	61	;'='
   797  00FFBA  25                 	db	37
   798  00FFBB  75                 	db	117	;'u'
   799  00FFBC  20                 	db	32
   800  00FFBD  56                 	db	86	;'V'
   801  00FFBE  6F                 	db	111	;'o'
   802  00FFBF  6C                 	db	108	;'l'
   803  00FFC0  74                 	db	116	;'t'
   804  00FFC1  61                 	db	97	;'a'
   805  00FFC2  67                 	db	103	;'g'
   806  00FFC3  65                 	db	101	;'e'
   807  00FFC4  5F                 	db	95	;'_'
   808  00FFC5  6C                 	db	108	;'l'
   809  00FFC6  69                 	db	105	;'i'
   810  00FFC7  67                 	db	103	;'g'
   811  00FFC8  68                 	db	104	;'h'
   812  00FFC9  74                 	db	116	;'t'
   813  00FFCA  3D                 	db	61	;'='
   814  00FFCB  25                 	db	37
   815  00FFCC  2E                 	db	46
   816  00FFCD  32                 	db	50	;'2'
   817  00FFCE  66                 	db	102	;'f'
   818  00FFCF  20                 	db	32
   819  00FFD0  56                 	db	86	;'V'
   820  00FFD1  20                 	db	32
   821  00FFD2  56                 	db	86	;'V'
   822  00FFD3  6F                 	db	111	;'o'
   823  00FFD4  6C                 	db	108	;'l'
   824  00FFD5  74                 	db	116	;'t'
   825  00FFD6  61                 	db	97	;'a'
   826  00FFD7  67                 	db	103	;'g'
   827  00FFD8  65                 	db	101	;'e'
   828  00FFD9  5F                 	db	95	;'_'
   829  00FFDA  74                 	db	116	;'t'
   830  00FFDB  65                 	db	101	;'e'
   831  00FFDC  6D                 	db	109	;'m'
   832  00FFDD  70                 	db	112	;'p'
   833  00FFDE  3D                 	db	61	;'='
   834  00FFDF  25                 	db	37
   835  00FFE0  2E                 	db	46
   836  00FFE1  32                 	db	50	;'2'
   837  00FFE2  66                 	db	102	;'f'
   838  00FFE3  20                 	db	32
   839  00FFE4  56                 	db	86	;'V'
   840  00FFE5  20                 	db	32
   841  00FFE6  52                 	db	82	;'R'
   842  00FFE7  53                 	db	83	;'S'
   843  00FFE8  53                 	db	83	;'S'
   844  00FFE9  49                 	db	73	;'I'
   845  00FFEA  20                 	db	32
   846  00FFEB  3D                 	db	61	;'='
   847  00FFEC  25                 	db	37
   848  00FFED  75                 	db	117	;'u'
   849  00FFEE  20                 	db	32
   850  00FFEF  43                 	db	67	;'C'
   851  00FFF0  52                 	db	82	;'R'
   852  00FFF1  43                 	db	67	;'C'
   853  00FFF2  52                 	db	82	;'R'
   854  00FFF3  69                 	db	105	;'i'
   855  00FFF4  67                 	db	103	;'g'
   856  00FFF5  68                 	db	104	;'h'
   857  00FFF6  74                 	db	116	;'t'
   858  00FFF7  3D                 	db	61	;'='
   859  00FFF8  25                 	db	37
   860  00FFF9  75                 	db	117	;'u'
   861  00FFFA  20                 	db	32
   862  00FFFB  0D                 	db	13
   863  00FFFC  0A                 	db	10
   864  00FFFD  00                 	db	0
   865                           
   866                           ; #config settings
   867  00FFFE  00                 	db	0	; dummy byte at the end
   868  0000                     
   869                           	psect	cinit
   870  00DAD6                     __pcinit:
   871                           	opt stack 0
   872  00DAD6                     start_initialization:
   873                           	opt stack 0
   874  00DAD6                     __initialization:
   875                           	opt stack 0
   876                           
   877                           ; Clear objects allocated to BANK1 (128 bytes)
   878  00DAD6  EE01  F000         	lfsr	0,__pbssBANK1
   879  00DADA  0E80               	movlw	128
   880  00DADC                     clear_0:
   881  00DADC  6AEE               	clrf	postinc0,c
   882  00DADE  06E8               	decf	wreg,f,c
   883  00DAE0  E1FD               	bnz	clear_0
   884                           
   885                           ; Clear objects allocated to BANK0 (38 bytes)
   886  00DAE2  EE00  F080         	lfsr	0,__pbssBANK0
   887  00DAE6  0E26               	movlw	38
   888  00DAE8                     clear_1:
   889  00DAE8  6AEE               	clrf	postinc0,c
   890  00DAEA  06E8               	decf	wreg,f,c
   891  00DAEC  E1FD               	bnz	clear_1
   892                           
   893                           ; Clear objects allocated to COMRAM (8 bytes)
   894  00DAEE  EE00  F078         	lfsr	0,__pbssCOMRAM
   895  00DAF2  0E08               	movlw	8
   896  00DAF4                     clear_2:
   897  00DAF4  6AEE               	clrf	postinc0,c
   898  00DAF6  06E8               	decf	wreg,f,c
   899  00DAF8  E1FD               	bnz	clear_2
   900  00DAFA                     end_of_initialization:
   901                           	opt stack 0
   902  00DAFA                     __end_of__initialization:
   903                           	opt stack 0
   904  00DAFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   905  00DAFC  6EF8               	movwf	tblptru,c
   906  00DAFE  0100               	movlb	0
   907  00DB00  EFD9  F076         	goto	_main	;jump to C main() function
   908                           tblptru	equ	0xFF8
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           
   912                           	psect	bssCOMRAM
   913  000078                     __pbssCOMRAM:
   914                           	opt stack 0
   915  000078                     _Motion:
   916                           	opt stack 0
   917  000078                     	ds	3
   918  00007B                     _CRCRight:
   919                           	opt stack 0
   920  00007B                     	ds	2
   921  00007D                     _USART_Status:
   922                           	opt stack 0
   923  00007D                     	ds	1
   924  00007E                     _Strength:
   925                           	opt stack 0
   926  00007E                     	ds	2
   927                           tblptru	equ	0xFF8
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           
   931                           	psect	bssBANK0
   932  000080                     __pbssBANK0:
   933                           	opt stack 0
   934  000080                     _Light:
   935                           	opt stack 0
   936  000080                     	ds	3
   937  000083                     _Temperature:
   938                           	opt stack 0
   939  000083                     	ds	3
   940  000086                     _ADCresult1:
   941                           	opt stack 0
   942  000086                     	ds	2
   943  000088                     _ADCresult3:
   944                           	opt stack 0
   945  000088                     	ds	2
   946  00008A                     _RxPacket:
   947                           	opt stack 0
   948  00008A                     	ds	13
   949  000097                     _TxPacket:
   950                           	opt stack 0
   951  000097                     	ds	13
   952  0000A4                     _ADCresult2:
   953                           	opt stack 0
   954  0000A4                     	ds	2
   955                           tblptru	equ	0xFF8
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           
   959                           	psect	bssBANK1
   960  000100                     __pbssBANK1:
   961                           	opt stack 0
   962  000100                     _Text:
   963                           	opt stack 0
   964  000100                     	ds	128
   965                           tblptru	equ	0xFF8
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           
   969                           	psect	cstackCOMRAM
   970  000001                     __pcstackCOMRAM:
   971                           	opt stack 0
   972  000001                     ??_SetChanADC:
   973  000001                     ??_isdigit:
   974  000001                     ?_ReadADC:
   975                           	opt stack 0
   976  000001                     ?_strlen:
   977                           	opt stack 0
   978  000001                     ?___awmod:
   979                           	opt stack 0
   980  000001                     ?___ftpack:
   981                           	opt stack 0
   982  000001                     ?___ftneg:
   983                           	opt stack 0
   984  000001                     ?__tdiv_to_l_:
   985                           	opt stack 0
   986  000001                     ?__div_to_l_:
   987                           	opt stack 0
   988  000001                     ?___lldiv:
   989                           	opt stack 0
   990  000001                     OpenADC@config2:
   991                           	opt stack 0
   992  000001                     OpenSPI@bus_mode:
   993                           	opt stack 0
   994  000001                     ReadSPI@TempVar:
   995                           	opt stack 0
   996  000001                     WriteSPI@TempVar:
   997                           	opt stack 0
   998  000001                     OpenTimer0@config:
   999                           	opt stack 0
  1000  000001                     WriteUSART@data:
  1001                           	opt stack 0
  1002  000001                     Delay10TCYx@unit:
  1003                           	opt stack 0
  1004  000001                     CalculateCRC@message:
  1005                           	opt stack 0
  1006  000001                     WriteTimer0@timer0:
  1007                           	opt stack 0
  1008  000001                     OpenUSART@spbrg:
  1009                           	opt stack 0
  1010  000001                     ___awmod@dividend:
  1011                           	opt stack 0
  1012  000001                     strlen@s:
  1013                           	opt stack 0
  1014  000001                     __div_to_l_@f1:
  1015                           	opt stack 0
  1016  000001                     ___ftpack@arg:
  1017                           	opt stack 0
  1018  000001                     __tdiv_to_l_@f1:
  1019                           	opt stack 0
  1020  000001                     ___ftge@ff1:
  1021                           	opt stack 0
  1022  000001                     ___ftneg@f1:
  1023                           	opt stack 0
  1024  000001                     ___lldiv@dividend:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x0
  1028  000001                     	ds	1
  1029  000002                     OpenADC@portconfig:
  1030                           	opt stack 0
  1031  000002                     SetChanADC@channel:
  1032                           	opt stack 0
  1033  000002                     OpenSPI@smp_phase:
  1034                           	opt stack 0
  1035  000002                     WriteSPI@data_out:
  1036                           	opt stack 0
  1037  000002                     _isdigit$1980:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x1
  1041  000002                     	ds	1
  1042  000003                     ??_OpenADC:
  1043  000003                     ??_ReadADC:
  1044  000003                     ??_strlen:
  1045  000003                     SetShortRAMAddr@value:
  1046                           	opt stack 0
  1047  000003                     GetShortRAMAddr@address:
  1048                           	opt stack 0
  1049  000003                     CalculateCRC@length:
  1050                           	opt stack 0
  1051  000003                     OpenSPI@sync_mode:
  1052                           	opt stack 0
  1053  000003                     OpenUSART@config:
  1054                           	opt stack 0
  1055  000003                     isdigit@c:
  1056                           	opt stack 0
  1057  000003                     SetLongRAMAddr@address:
  1058                           	opt stack 0
  1059  000003                     GetLongRAMAddr@address:
  1060                           	opt stack 0
  1061  000003                     WriteTimer0@timer:
  1062                           	opt stack 0
  1063  000003                     ___awmod@divisor:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x2
  1067  000003                     	ds	1
  1068  000004                     ??_CalculateCRC:
  1069  000004                     SetShortRAMAddr@address:
  1070                           	opt stack 0
  1071  000004                     GetShortRAMAddr@toReturn:
  1072                           	opt stack 0
  1073  000004                     ___ftpack@exp:
  1074                           	opt stack 0
  1075  000004                     __div_to_l_@f2:
  1076                           	opt stack 0
  1077  000004                     __tdiv_to_l_@f2:
  1078                           	opt stack 0
  1079  000004                     ___ftge@ff2:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x3
  1083  000004                     	ds	1
  1084  000005                     ??_GetLongRAMAddr:
  1085  000005                     SetLongRAMAddr@value:
  1086                           	opt stack 0
  1087  000005                     SetShortRAMAddr@tmpINT0IE:
  1088                           	opt stack 0
  1089  000005                     GetShortRAMAddr@tmpINT0IE:
  1090                           	opt stack 0
  1091  000005                     OpenADC@config:
  1092                           	opt stack 0
  1093  000005                     ___awmod@counter:
  1094                           	opt stack 0
  1095  000005                     ___ftpack@sign:
  1096                           	opt stack 0
  1097  000005                     strlen@cp:
  1098                           	opt stack 0
  1099  000005                     ___lldiv@divisor:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x4
  1103  000005                     	ds	1
  1104  000006                     ??___ftpack:
  1105  000006                     ??_SetLongRAMAddr:
  1106  000006                     CalculateCRC@i:
  1107                           	opt stack 0
  1108  000006                     ___awmod@sign:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x5
  1112  000006                     	ds	1
  1113  000007                     ??__tdiv_to_l_:
  1114  000007                     ??___ftge:
  1115  000007                     ?___awdiv:
  1116                           	opt stack 0
  1117  000007                     GetLongRAMAddr@toReturn:
  1118                           	opt stack 0
  1119  000007                     CalculateCRC@crc:
  1120                           	opt stack 0
  1121  000007                     USARTOut@data:
  1122                           	opt stack 0
  1123  000007                     ___awdiv@dividend:
  1124                           	opt stack 0
  1125  000007                     __div_to_l_@quot:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x6
  1129  000007                     	ds	1
  1130  000008                     SetLongRAMAddr@tmpINT0IE:
  1131                           	opt stack 0
  1132  000008                     GetLongRAMAddr@tmpINT0IE:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x7
  1136  000008                     	ds	1
  1137  000009                     ?___lltoft:
  1138                           	opt stack 0
  1139  000009                     ?___lwtoft:
  1140                           	opt stack 0
  1141  000009                     SetChannel@channel:
  1142                           	opt stack 0
  1143  000009                     USARTOut@bytes:
  1144                           	opt stack 0
  1145  000009                     MRF24J40Init@j:
  1146                           	opt stack 0
  1147  000009                     PHYTransmit@Data:
  1148                           	opt stack 0
  1149  000009                     PHYReceive@Data:
  1150                           	opt stack 0
  1151  000009                     ___awdiv@divisor:
  1152                           	opt stack 0
  1153  000009                     ___lwtoft@c:
  1154                           	opt stack 0
  1155  000009                     ___lldiv@quotient:
  1156                           	opt stack 0
  1157  000009                     ___lltoft@c:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x8
  1161  000009                     	ds	1
  1162  00000A                     ??_USARTOut:
  1163  00000A                     __tdiv_to_l_@quot:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x9
  1167  00000A                     	ds	1
  1168  00000B                     PHYTransmit@NoBytes:
  1169                           	opt stack 0
  1170  00000B                     ___awdiv@counter:
  1171                           	opt stack 0
  1172  00000B                     __div_to_l_@cntr:
  1173                           	opt stack 0
  1174  00000B                     PHYReceive@Strength:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0xA
  1178  00000B                     	ds	1
  1179  00000C                     PHYTransmit@i:
  1180                           	opt stack 0
  1181  00000C                     ___awdiv@sign:
  1182                           	opt stack 0
  1183  00000C                     __div_to_l_@exp1:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0xB
  1187  00000C                     	ds	1
  1188  00000D                     ??_PHYReceive:
  1189  00000D                     ??___lltoft:
  1190  00000D                     ___lldiv@counter:
  1191                           	opt stack 0
  1192  00000D                     USARTOut@i:
  1193                           	opt stack 0
  1194  00000D                     ___awdiv@quotient:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0xC
  1198  00000D                     	ds	1
  1199  00000E                     ?___llmod:
  1200                           	opt stack 0
  1201  00000E                     PHYReceive@NoBytes:
  1202                           	opt stack 0
  1203  00000E                     __tdiv_to_l_@cntr:
  1204                           	opt stack 0
  1205  00000E                     ___llmod@dividend:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0xD
  1209  00000E                     	ds	1
  1210  00000F                     ?___wmul:
  1211                           	opt stack 0
  1212  00000F                     PHYReceive@i:
  1213                           	opt stack 0
  1214  00000F                     __tdiv_to_l_@exp1:
  1215                           	opt stack 0
  1216  00000F                     ___wmul@multiplier:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0xE
  1220  00000F                     	ds	2
  1221  000011                     ___lltoft@exp:
  1222                           	opt stack 0
  1223  000011                     ___wmul@multiplicand:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x10
  1227  000011                     	ds	1
  1228  000012                     ___llmod@divisor:
  1229                           	opt stack 0
  1230                           
  1231                           ; 4 bytes @ 0x11
  1232  000012                     	ds	1
  1233  000013                     ___wmul@product:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x12
  1237  000013                     	ds	2
  1238  000015                     ?___ftmul:
  1239                           	opt stack 0
  1240  000015                     ___ftmul@f1:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x14
  1244  000015                     	ds	1
  1245  000016                     ___llmod@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x15
  1249  000016                     	ds	2
  1250  000018                     ___ftmul@f2:
  1251                           	opt stack 0
  1252                           
  1253                           ; 3 bytes @ 0x17
  1254  000018                     	ds	3
  1255  00001B                     ??___ftmul:
  1256                           
  1257                           ; 0 bytes @ 0x1A
  1258  00001B                     	ds	3
  1259  00001E                     ___ftmul@exp:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x1D
  1263  00001E                     	ds	1
  1264  00001F                     ___ftmul@f3_as_product:
  1265                           	opt stack 0
  1266                           
  1267                           ; 3 bytes @ 0x1E
  1268  00001F                     	ds	3
  1269  000022                     ___ftmul@cntr:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x21
  1273  000022                     	ds	1
  1274  000023                     ___ftmul@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x22
  1278  000023                     	ds	1
  1279  000024                     ?___ftdiv:
  1280                           	opt stack 0
  1281  000024                     ?_fround:
  1282                           	opt stack 0
  1283  000024                     ?_scale:
  1284                           	opt stack 0
  1285  000024                     ___ftdiv@f1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x23
  1289  000024                     	ds	3
  1290  000027                     ___ftdiv@f2:
  1291                           	opt stack 0
  1292  000027                     _fround$2338:
  1293                           	opt stack 0
  1294  000027                     _scale$2339:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x26
  1298  000027                     	ds	3
  1299  00002A                     ??___ftdiv:
  1300  00002A                     scale@scl:
  1301                           	opt stack 0
  1302  00002A                     _fround$2337:
  1303                           	opt stack 0
  1304                           
  1305                           ; 3 bytes @ 0x29
  1306  00002A                     	ds	1
  1307  00002B                     ?___fttol:
  1308                           	opt stack 0
  1309  00002B                     ___fttol@f1:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x2A
  1313  00002B                     	ds	2
  1314  00002D                     fround@prec:
  1315                           	opt stack 0
  1316  00002D                     ___ftdiv@cntr:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x2C
  1320  00002D                     	ds	1
  1321  00002E                     ___ftdiv@f3:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x2D
  1325  00002E                     	ds	1
  1326  00002F                     ??___fttol:
  1327                           
  1328                           ; 0 bytes @ 0x2E
  1329  00002F                     	ds	2
  1330  000031                     ___ftdiv@exp:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x30
  1334  000031                     	ds	1
  1335  000032                     ___ftdiv@sign:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x31
  1339  000032                     	ds	1
  1340  000033                     ?___ftadd:
  1341                           	opt stack 0
  1342  000033                     ___ftadd@f1:
  1343                           	opt stack 0
  1344                           
  1345                           ; 3 bytes @ 0x32
  1346  000033                     	ds	1
  1347  000034                     ___fttol@sign1:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x33
  1351  000034                     	ds	1
  1352  000035                     ___fttol@lval:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x34
  1356  000035                     	ds	1
  1357  000036                     ___ftadd@f2:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x35
  1361  000036                     	ds	3
  1362  000039                     ??___ftadd:
  1363  000039                     ___fttol@exp1:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x38
  1367  000039                     	ds	3
  1368  00003C                     ___ftadd@sign:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x3B
  1372  00003C                     	ds	1
  1373  00003D                     ___ftadd@exp2:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x3C
  1377  00003D                     	ds	1
  1378  00003E                     ___ftadd@exp1:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x3D
  1382  00003E                     	ds	1
  1383  00003F                     ?___ftsub:
  1384                           	opt stack 0
  1385  00003F                     ___ftsub@f1:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x3E
  1389  00003F                     	ds	3
  1390  000042                     ___ftsub@f2:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x41
  1394  000042                     	ds	3
  1395  000045                     ?_sprintf:
  1396                           	opt stack 0
  1397  000045                     sprintf@sp:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x44
  1401  000045                     	ds	2
  1402  000047                     sprintf@f:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x46
  1406  000047                     	ds	19
  1407  00005A                     ??_sprintf:
  1408                           
  1409                           ; 0 bytes @ 0x59
  1410  00005A                     	ds	6
  1411  000060                     _sprintf$2340:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x5F
  1415  000060                     	ds	3
  1416  000063                     sprintf@ap:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x62
  1420  000063                     	ds	2
  1421  000065                     sprintf@flag:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x64
  1425  000065                     	ds	2
  1426  000067                     sprintf@val:
  1427                           	opt stack 0
  1428                           
  1429                           ; 4 bytes @ 0x66
  1430  000067                     	ds	4
  1431  00006B                     sprintf@exp:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x6A
  1435  00006B                     	ds	2
  1436  00006D                     sprintf@tmpval:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x6C
  1440  00006D                     	ds	4
  1441  000071                     sprintf@prec:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x70
  1445  000071                     	ds	2
  1446  000073                     sprintf@fval:
  1447                           	opt stack 0
  1448                           
  1449                           ; 3 bytes @ 0x72
  1450  000073                     	ds	3
  1451  000076                     sprintf@c:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x75
  1455  000076                     	ds	1
  1456  000077                     ??_main:
  1457                           
  1458                           ; 0 bytes @ 0x76
  1459  000077                     	ds	1
  1460                           tblptru	equ	0xFF8
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           
  1464 ;;
  1465 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1466 ;;
  1467 ;; *************** function _main *****************
  1468 ;; Defined at:
  1469 ;;		line 178 in file "motion.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;		None               void
  1476 ;; Registers used:
  1477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels required when called:    4
  1489 ;; This function calls:
  1490 ;;		_ADC
  1491 ;;		_CalculateCRC
  1492 ;;		_Init_IO
  1493 ;;		_MRF24J40Init
  1494 ;;		_OpenTimer0
  1495 ;;		_PHYReceive
  1496 ;;		_PHYTransmit
  1497 ;;		_SetChannel
  1498 ;;		_USARTOut
  1499 ;;		_WriteTimer0
  1500 ;;		___ftadd
  1501 ;;		___ftdiv
  1502 ;;		___ftmul
  1503 ;;		___lwtoft
  1504 ;;		_sprintf
  1505 ;;		_strlen
  1506 ;; This function is called by:
  1507 ;;		Startup code after reset
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text0
  1512  00EDB2                     __ptext0:
  1513                           	opt stack 0
  1514  00EDB2                     _main:
  1515                           	opt stack 27
  1516                           
  1517                           ;motion.c: 180: Init_IO();
  1518                           
  1519                           ;incstack = 0
  1520  00EDB2  EC00  F06E         	call	_Init_IO	;wreg free
  1521                           
  1522                           ;motion.c: 181: MRF24J40Init();
  1523  00EDB6  EC28  F073         	call	_MRF24J40Init	;wreg free
  1524                           
  1525                           ;motion.c: 183: SetChannel(0x60);
  1526  00EDBA  0E60               	movlw	96
  1527  00EDBC  EC56  F06D         	call	_SetChannel
  1528                           
  1529                           ;motion.c: 185: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110011);
  1530  00EDC0  0E93               	movlw	147
  1531  00EDC2  ECE6  F06C         	call	_OpenTimer0
  1532                           
  1533                           ;motion.c: 187: WriteTimer0(3036);
  1534  00EDC6  0E0B               	movlw	11
  1535  00EDC8  6E02               	movwf	WriteTimer0@timer0+1,c
  1536  00EDCA  0EDC               	movlw	220
  1537  00EDCC  6E01               	movwf	WriteTimer0@timer0,c
  1538  00EDCE  ECB7  F06C         	call	_WriteTimer0	;wreg free
  1539  00EDD2                     l3622:
  1540                           
  1541                           ;motion.c: 189: {
  1542                           ;motion.c: 190: ADC();
  1543  00EDD2  ECA1  F070         	call	_ADC	;wreg free
  1544                           
  1545                           ;motion.c: 191: Light=(float)ADCresult1*3.2/1023;
  1546  00EDD6  0ECD               	movlw	205
  1547  00EDD8  6E18               	movwf	___ftmul@f2,c
  1548  00EDDA  0E4C               	movlw	76
  1549  00EDDC  6E19               	movwf	___ftmul@f2+1,c
  1550  00EDDE  0E40               	movlw	64
  1551  00EDE0  6E1A               	movwf	___ftmul@f2+2,c
  1552  00EDE2  C086  F009         	movff	_ADCresult1,___lwtoft@c
  1553  00EDE6  C087  F00A         	movff	_ADCresult1+1,___lwtoft@c+1
  1554  00EDEA  ECF6  F06C         	call	___lwtoft	;wreg free
  1555  00EDEE  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1556  00EDF2  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1557  00EDF6  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1558  00EDFA  ECAE  F072         	call	___ftmul	;wreg free
  1559  00EDFE  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1560  00EE02  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1561  00EE06  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1562  00EE0A  0EC0               	movlw	192
  1563  00EE0C  6E27               	movwf	___ftdiv@f2,c
  1564  00EE0E  0E7F               	movlw	127
  1565  00EE10  6E28               	movwf	___ftdiv@f2+1,c
  1566  00EE12  0E44               	movlw	68
  1567  00EE14  6E29               	movwf	___ftdiv@f2+2,c
  1568  00EE16  EC47  F071         	call	___ftdiv	;wreg free
  1569  00EE1A  C024  F080         	movff	?___ftdiv,_Light
  1570  00EE1E  C025  F081         	movff	?___ftdiv+1,_Light+1
  1571  00EE22  C026  F082         	movff	?___ftdiv+2,_Light+2
  1572                           
  1573                           ;motion.c: 192: Temperature=-25.445*(float)ADCresult2*3.2/1023+73.169;
  1574  00EE26  0EC0               	movlw	192
  1575  00EE28  6E27               	movwf	___ftdiv@f2,c
  1576  00EE2A  0E7F               	movlw	127
  1577  00EE2C  6E28               	movwf	___ftdiv@f2+1,c
  1578  00EE2E  0E44               	movlw	68
  1579  00EE30  6E29               	movwf	___ftdiv@f2+2,c
  1580  00EE32  0ED9               	movlw	217
  1581  00EE34  6E18               	movwf	___ftmul@f2,c
  1582  00EE36  0EA2               	movlw	162
  1583  00EE38  6E19               	movwf	___ftmul@f2+1,c
  1584  00EE3A  0EC2               	movlw	194
  1585  00EE3C  6E1A               	movwf	___ftmul@f2+2,c
  1586  00EE3E  C0A4  F009         	movff	_ADCresult2,___lwtoft@c
  1587  00EE42  C0A5  F00A         	movff	_ADCresult2+1,___lwtoft@c+1
  1588  00EE46  ECF6  F06C         	call	___lwtoft	;wreg free
  1589  00EE4A  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1590  00EE4E  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1591  00EE52  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1592  00EE56  ECAE  F072         	call	___ftmul	;wreg free
  1593  00EE5A  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1594  00EE5E  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1595  00EE62  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1596  00EE66  EC47  F071         	call	___ftdiv	;wreg free
  1597  00EE6A  C024  F033         	movff	?___ftdiv,___ftadd@f1
  1598  00EE6E  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
  1599  00EE72  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
  1600  00EE76  0E57               	movlw	87
  1601  00EE78  6E36               	movwf	___ftadd@f2,c
  1602  00EE7A  0E92               	movlw	146
  1603  00EE7C  6E37               	movwf	___ftadd@f2+1,c
  1604  00EE7E  0E42               	movlw	66
  1605  00EE80  6E38               	movwf	___ftadd@f2+2,c
  1606  00EE82  ECE0  F074         	call	___ftadd	;wreg free
  1607  00EE86  C033  F083         	movff	?___ftadd,_Temperature
  1608  00EE8A  C034  F084         	movff	?___ftadd+1,_Temperature+1
  1609  00EE8E  C035  F085         	movff	?___ftadd+2,_Temperature+2
  1610                           
  1611                           ;motion.c: 193: Motion=(float)ADCresult3;
  1612  00EE92  C088  F009         	movff	_ADCresult3,___lwtoft@c
  1613  00EE96  C089  F00A         	movff	_ADCresult3+1,___lwtoft@c+1
  1614  00EE9A  ECF6  F06C         	call	___lwtoft	;wreg free
  1615  00EE9E  C009  F078         	movff	?___lwtoft,_Motion
  1616  00EEA2  C00A  F079         	movff	?___lwtoft+1,_Motion+1
  1617  00EEA6  C00B  F07A         	movff	?___lwtoft+2,_Motion+2
  1618                           
  1619                           ;motion.c: 194: TxPacket.GID = 23;
  1620  00EEAA  0E17               	movlw	23
  1621  00EEAC  0100               	movlb	0	; () banked
  1622  00EEAE  6F97               	movwf	_TxPacket& (0+255),b
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;motion.c: 195: TxPacket.NID = 1;
  1626  00EEB0  0E01               	movlw	1
  1627  00EEB2  0100               	movlb	0	; () banked
  1628  00EEB4  6F98               	movwf	(_TxPacket+1)& (0+255),b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;motion.c: 196: TxPacket.Data1 = Light;
  1632  00EEB6  C080  F099         	movff	_Light,_TxPacket+2
  1633  00EEBA  C081  F09A         	movff	_Light+1,_TxPacket+3
  1634  00EEBE  C082  F09B         	movff	_Light+2,_TxPacket+4
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;motion.c: 197: TxPacket.Data2 = Temperature;
  1638  00EEC2  C083  F09C         	movff	_Temperature,_TxPacket+5
  1639  00EEC6  C084  F09D         	movff	_Temperature+1,_TxPacket+6
  1640  00EECA  C085  F09E         	movff	_Temperature+2,_TxPacket+7
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;motion.c: 198: TxPacket.Data3= Motion;
  1644  00EECE  C078  F09F         	movff	_Motion,_TxPacket+8
  1645  00EED2  C079  F0A0         	movff	_Motion+1,_TxPacket+9
  1646  00EED6  C07A  F0A1         	movff	_Motion+2,_TxPacket+10
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;motion.c: 200: TxPacket.crc = CalculateCRC(&TxPacket,sizeof(TxPacket)-sizeof(TxPacket.c
      +                          rc));
  1650  00EEDA  0E97               	movlw	low _TxPacket
  1651  00EEDC  6E01               	movwf	CalculateCRC@message,c
  1652  00EEDE  0E00               	movlw	high _TxPacket
  1653  00EEE0  6E02               	movwf	CalculateCRC@message+1,c
  1654  00EEE2  0E0B               	movlw	11
  1655  00EEE4  6E03               	movwf	CalculateCRC@length,c
  1656  00EEE6  ECDF  F06D         	call	_CalculateCRC	;wreg free
  1657  00EEEA  6E77               	movwf	??_main& (0+255),c
  1658  00EEEC  5077               	movf	??_main,w,c
  1659  00EEEE  0100               	movlb	0	; () banked
  1660  00EEF0  6FA2               	movwf	(_TxPacket+11)& (0+255),b
  1661  00EEF2  6BA3               	clrf	(_TxPacket+12)& (0+255),b
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;motion.c: 202: if(INTCONbits.TMR0IF)
  1665  00EEF4  A4F2               	btfss	intcon,2,c	;volatile
  1666  00EEF6  D07E               	goto	l3662
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;motion.c: 203: {
  1670                           ;motion.c: 204: INTCONbits.TMR0IF = 0;
  1671  00EEF8  94F2               	bcf	intcon,2,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;motion.c: 205: PORTA = 0x05;
  1675  00EEFA  0E05               	movlw	5
  1676  00EEFC  6E80               	movwf	3968,c	;volatile
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;motion.c: 206: PHYTransmit((char *)&TxPacket,sizeof(PacketType));
  1680  00EEFE  0E97               	movlw	low _TxPacket
  1681  00EF00  6E09               	movwf	PHYTransmit@Data,c
  1682  00EF02  0E00               	movlw	high _TxPacket
  1683  00EF04  6E0A               	movwf	PHYTransmit@Data+1,c
  1684  00EF06  0E0D               	movlw	13
  1685  00EF08  6E0B               	movwf	PHYTransmit@NoBytes,c
  1686  00EF0A  ECBA  F071         	call	_PHYTransmit	;wreg free
  1687                           
  1688                           ;motion.c: 207: if (Motion==0)
  1689  00EF0E  5078               	movf	_Motion,w,c
  1690  00EF10  1079               	iorwf	_Motion+1,w,c
  1691  00EF12  107A               	iorwf	_Motion+2,w,c
  1692  00EF14  A4D8               	btfss	status,2,c
  1693  00EF16  D02B               	goto	l3654
  1694                           
  1695                           ;motion.c: 208: sprintf(Text,"Group ID=%u Node ID=%u Voltage_light=%.2f V Temperature=%.
      +                          2f C Watching~~%.2f RSSI =%u CRCRight=%u \r\n",
  1696                           ;motion.c: 209: TxPacket.GID, TxPacket.NID, TxPacket.Data1,TxPacket.Data2, TxPacket.Data
      +                          3,Strength,CRCRight);
  1697  00EF18  0E00               	movlw	low _Text
  1698  00EF1A  6E45               	movwf	sprintf@sp,c
  1699  00EF1C  0E01               	movlw	high _Text
  1700  00EF1E  6E46               	movwf	sprintf@sp+1,c
  1701  00EF20  0EE3               	movlw	low STR_1
  1702  00EF22  6E47               	movwf	sprintf@f,c
  1703  00EF24  0EFE               	movlw	high STR_1
  1704  00EF26  6E48               	movwf	sprintf@f+1,c
  1705  00EF28  C097  F049         	movff	_TxPacket,?_sprintf+4
  1706  00EF2C  6A4A               	clrf	?_sprintf+5,c
  1707  00EF2E  C098  F04B         	movff	_TxPacket+1,?_sprintf+6
  1708  00EF32  6A4C               	clrf	?_sprintf+7,c
  1709  00EF34  C099  F04D         	movff	_TxPacket+2,?_sprintf+8
  1710  00EF38  C09A  F04E         	movff	_TxPacket+3,?_sprintf+9
  1711  00EF3C  C09B  F04F         	movff	_TxPacket+4,?_sprintf+10
  1712  00EF40  C09C  F050         	movff	_TxPacket+5,?_sprintf+11
  1713  00EF44  C09D  F051         	movff	_TxPacket+6,?_sprintf+12
  1714  00EF48  C09E  F052         	movff	_TxPacket+7,?_sprintf+13
  1715  00EF4C  C09F  F053         	movff	_TxPacket+8,?_sprintf+14
  1716  00EF50  C0A0  F054         	movff	_TxPacket+9,?_sprintf+15
  1717  00EF54  C0A1  F055         	movff	_TxPacket+10,?_sprintf+16
  1718  00EF58  C07E  F056         	movff	_Strength,?_sprintf+17
  1719  00EF5C  C07F  F057         	movff	_Strength+1,?_sprintf+18
  1720  00EF60  C07B  F058         	movff	_CRCRight,?_sprintf+19
  1721  00EF64  C07C  F059         	movff	_CRCRight+1,?_sprintf+20
  1722  00EF68  EC8C  F07A         	call	_sprintf	;wreg free
  1723  00EF6C  D033               	goto	l3658
  1724  00EF6E                     l3654:
  1725                           
  1726                           ;motion.c: 210: else
  1727                           ;motion.c: 211: {
  1728                           ;motion.c: 212: TxPacket.Data3=1;
  1729  00EF6E  0E00               	movlw	0
  1730  00EF70  0100               	movlb	0	; () banked
  1731  00EF72  6F9F               	movwf	(_TxPacket+8)& (0+255),b
  1732  00EF74  0E80               	movlw	128
  1733  00EF76  0100               	movlb	0	; () banked
  1734  00EF78  6FA0               	movwf	(_TxPacket+9)& (0+255),b
  1735  00EF7A  0E3F               	movlw	63
  1736  00EF7C  0100               	movlb	0	; () banked
  1737  00EF7E  6FA1               	movwf	(_TxPacket+10)& (0+255),b
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;motion.c: 213: sprintf(Text,"Group ID=%u Node ID=%u Voltage_light=%.2f V Temperature=%.
      +                          2f C Motion detected!%.2f RSSI =%u CRCRight=%u \r\n",
  1741                           ;motion.c: 214: TxPacket.GID, TxPacket.NID, TxPacket.Data1,TxPacket.Data2, TxPacket.Data
      +                          3,Strength,CRCRight);
  1742  00EF80  0E00               	movlw	low _Text
  1743  00EF82  6E45               	movwf	sprintf@sp,c
  1744  00EF84  0E01               	movlw	high _Text
  1745  00EF86  6E46               	movwf	sprintf@sp+1,c
  1746  00EF88  0E77               	movlw	low STR_2
  1747  00EF8A  6E47               	movwf	sprintf@f,c
  1748  00EF8C  0EFE               	movlw	high STR_2
  1749  00EF8E  6E48               	movwf	sprintf@f+1,c
  1750  00EF90  C097  F049         	movff	_TxPacket,?_sprintf+4
  1751  00EF94  6A4A               	clrf	?_sprintf+5,c
  1752  00EF96  C098  F04B         	movff	_TxPacket+1,?_sprintf+6
  1753  00EF9A  6A4C               	clrf	?_sprintf+7,c
  1754  00EF9C  C099  F04D         	movff	_TxPacket+2,?_sprintf+8
  1755  00EFA0  C09A  F04E         	movff	_TxPacket+3,?_sprintf+9
  1756  00EFA4  C09B  F04F         	movff	_TxPacket+4,?_sprintf+10
  1757  00EFA8  C09C  F050         	movff	_TxPacket+5,?_sprintf+11
  1758  00EFAC  C09D  F051         	movff	_TxPacket+6,?_sprintf+12
  1759  00EFB0  C09E  F052         	movff	_TxPacket+7,?_sprintf+13
  1760  00EFB4  C09F  F053         	movff	_TxPacket+8,?_sprintf+14
  1761  00EFB8  C0A0  F054         	movff	_TxPacket+9,?_sprintf+15
  1762  00EFBC  C0A1  F055         	movff	_TxPacket+10,?_sprintf+16
  1763  00EFC0  C07E  F056         	movff	_Strength,?_sprintf+17
  1764  00EFC4  C07F  F057         	movff	_Strength+1,?_sprintf+18
  1765  00EFC8  C07B  F058         	movff	_CRCRight,?_sprintf+19
  1766  00EFCC  C07C  F059         	movff	_CRCRight+1,?_sprintf+20
  1767  00EFD0  EC8C  F07A         	call	_sprintf	;wreg free
  1768  00EFD4                     l3658:
  1769                           
  1770                           ;motion.c: 215: }
  1771                           ;motion.c: 216: USARTOut(Text,strlen(Text));
  1772  00EFD4  0E00               	movlw	low _Text
  1773  00EFD6  6E07               	movwf	USARTOut@data,c
  1774  00EFD8  0E01               	movlw	high _Text
  1775  00EFDA  6E08               	movwf	USARTOut@data+1,c
  1776  00EFDC  0E00               	movlw	low _Text
  1777  00EFDE  6E01               	movwf	strlen@s,c
  1778  00EFE0  0E01               	movlw	high _Text
  1779  00EFE2  6E02               	movwf	strlen@s+1,c
  1780  00EFE4  EC82  F06D         	call	_strlen	;wreg free
  1781  00EFE8  5001               	movf	?_strlen,w,c
  1782  00EFEA  6E09               	movwf	USARTOut@bytes,c
  1783  00EFEC  EC9F  F06D         	call	_USARTOut	;wreg free
  1784                           
  1785                           ;motion.c: 217: PORTA = 0x04;
  1786  00EFF0  0E04               	movlw	4
  1787  00EFF2  6E80               	movwf	3968,c	;volatile
  1788  00EFF4                     l3662:
  1789                           
  1790                           ;motion.c: 218: }
  1791                           ;motion.c: 220: if( PHYReceive((char *)&RxPacket,&Strength) == sizeof(PacketType))
  1792  00EFF4  0E8A               	movlw	low _RxPacket
  1793  00EFF6  6E09               	movwf	PHYReceive@Data,c
  1794  00EFF8  0E00               	movlw	high _RxPacket
  1795  00EFFA  6E0A               	movwf	PHYReceive@Data+1,c
  1796  00EFFC  0E7E               	movlw	low _Strength
  1797  00EFFE  6E0B               	movwf	PHYReceive@Strength,c
  1798  00F000  0E00               	movlw	high _Strength
  1799  00F002  6E0C               	movwf	PHYReceive@Strength+1,c
  1800  00F004  EC99  F06F         	call	_PHYReceive	;wreg free
  1801  00F008  0A0D               	xorlw	13
  1802  00F00A  A4D8               	btfss	status,2,c
  1803  00F00C  D6E2               	goto	l3622
  1804                           
  1805                           ;motion.c: 222: {
  1806                           ;motion.c: 223: PORTA = 0x06;
  1807  00F00E  0E06               	movlw	6
  1808  00F010  6E80               	movwf	3968,c	;volatile
  1809                           
  1810                           ;motion.c: 224: if (0 == CalculateCRC(&RxPacket,sizeof(PacketType)))
  1811  00F012  0E8A               	movlw	low _RxPacket
  1812  00F014  6E01               	movwf	CalculateCRC@message,c
  1813  00F016  0E00               	movlw	high _RxPacket
  1814  00F018  6E02               	movwf	CalculateCRC@message+1,c
  1815  00F01A  0E0D               	movlw	13
  1816  00F01C  6E03               	movwf	CalculateCRC@length,c
  1817  00F01E  ECDF  F06D         	call	_CalculateCRC	;wreg free
  1818  00F022  0900               	iorlw	0
  1819  00F024  A4D8               	btfss	status,2,c
  1820  00F026  D004               	goto	l3670
  1821                           
  1822                           ;motion.c: 225: CRCRight = 1;
  1823  00F028  0E00               	movlw	0
  1824  00F02A  6E7C               	movwf	_CRCRight+1,c
  1825  00F02C  0E01               	movlw	1
  1826  00F02E  D003               	goto	L1
  1827  00F030                     l3670:
  1828                           
  1829                           ;motion.c: 226: else
  1830                           ;motion.c: 227: CRCRight = 0;
  1831  00F030  0E00               	movlw	0
  1832  00F032  6E7C               	movwf	_CRCRight+1,c
  1833  00F034  0E00               	movlw	0
  1834  00F036                     L1:
  1835  00F036  6E7B               	movwf	_CRCRight,c
  1836                           
  1837                           ;motion.c: 228: switch(RxPacket.NID)
  1838  00F038  D06C               	goto	l3682
  1839  00F03A                     l3672:
  1840                           
  1841                           ;motion.c: 231: sprintf(Text,"Group ID=%u Node ID=%u Voltage_light=%.2f V Voltage_temp=%
      +                          .2f V RSSI =%u CRCRight=%u \r\n",
  1842                           ;motion.c: 232: RxPacket.GID, RxPacket.NID,RxPacket.Data1, RxPacket.Data2, Strength, CRC
      +                          Right);
  1843  00F03A  0E00               	movlw	low _Text
  1844  00F03C  6E45               	movwf	sprintf@sp,c
  1845  00F03E  0E01               	movlw	high _Text
  1846  00F040  6E46               	movwf	sprintf@sp+1,c
  1847  00F042  0EA6               	movlw	low STR_3
  1848  00F044  6E47               	movwf	sprintf@f,c
  1849  00F046  0EFF               	movlw	high STR_3
  1850  00F048  6E48               	movwf	sprintf@f+1,c
  1851  00F04A  C08A  F049         	movff	_RxPacket,?_sprintf+4
  1852  00F04E  6A4A               	clrf	?_sprintf+5,c
  1853  00F050  C08B  F04B         	movff	_RxPacket+1,?_sprintf+6
  1854  00F054  6A4C               	clrf	?_sprintf+7,c
  1855  00F056  C08C  F04D         	movff	_RxPacket+2,?_sprintf+8
  1856  00F05A  C08D  F04E         	movff	_RxPacket+3,?_sprintf+9
  1857  00F05E  C08E  F04F         	movff	_RxPacket+4,?_sprintf+10
  1858  00F062  C08F  F050         	movff	_RxPacket+5,?_sprintf+11
  1859  00F066  C090  F051         	movff	_RxPacket+6,?_sprintf+12
  1860  00F06A  C091  F052         	movff	_RxPacket+7,?_sprintf+13
  1861  00F06E  C07E  F053         	movff	_Strength,?_sprintf+14
  1862  00F072  C07F  F054         	movff	_Strength+1,?_sprintf+15
  1863  00F076  C07B  F055         	movff	_CRCRight,?_sprintf+16
  1864  00F07A  C07C  F056         	movff	_CRCRight+1,?_sprintf+17
  1865  00F07E  EC8C  F07A         	call	_sprintf	;wreg free
  1866                           
  1867                           ;motion.c: 233: USARTOut(Text,strlen(Text));
  1868  00F082  0E00               	movlw	low _Text
  1869  00F084  6E07               	movwf	USARTOut@data,c
  1870  00F086  0E01               	movlw	high _Text
  1871  00F088  6E08               	movwf	USARTOut@data+1,c
  1872  00F08A  0E00               	movlw	low _Text
  1873  00F08C  6E01               	movwf	strlen@s,c
  1874  00F08E  0E01               	movlw	high _Text
  1875  00F090  6E02               	movwf	strlen@s+1,c
  1876  00F092  EC82  F06D         	call	_strlen	;wreg free
  1877  00F096  5001               	movf	?_strlen,w,c
  1878  00F098  6E09               	movwf	USARTOut@bytes,c
  1879  00F09A  EC9F  F06D         	call	_USARTOut	;wreg free
  1880                           
  1881                           ;motion.c: 234: break;
  1882  00F09E  D041               	goto	l3684
  1883  00F0A0                     l3676:
  1884                           
  1885                           ;motion.c: 236: sprintf(Text,"Group ID=%u Node ID=%u Moisture=%.2f Temperature=%.2f C Li
      +                          ght=%.2f V RSSI =%u CRCRight=%u \r\n",
  1886                           ;motion.c: 237: RxPacket.GID, RxPacket.NID,RxPacket.Data1,RxPacket.Data2,RxPacket.Data3,
      +                          Strength, CRCRight);
  1887  00F0A0  0E00               	movlw	low _Text
  1888  00F0A2  6E45               	movwf	sprintf@sp,c
  1889  00F0A4  0E01               	movlw	high _Text
  1890  00F0A6  6E46               	movwf	sprintf@sp+1,c
  1891  00F0A8  0E49               	movlw	low STR_4
  1892  00F0AA  6E47               	movwf	sprintf@f,c
  1893  00F0AC  0EFF               	movlw	high STR_4
  1894  00F0AE  6E48               	movwf	sprintf@f+1,c
  1895  00F0B0  C08A  F049         	movff	_RxPacket,?_sprintf+4
  1896  00F0B4  6A4A               	clrf	?_sprintf+5,c
  1897  00F0B6  C08B  F04B         	movff	_RxPacket+1,?_sprintf+6
  1898  00F0BA  6A4C               	clrf	?_sprintf+7,c
  1899  00F0BC  C08C  F04D         	movff	_RxPacket+2,?_sprintf+8
  1900  00F0C0  C08D  F04E         	movff	_RxPacket+3,?_sprintf+9
  1901  00F0C4  C08E  F04F         	movff	_RxPacket+4,?_sprintf+10
  1902  00F0C8  C08F  F050         	movff	_RxPacket+5,?_sprintf+11
  1903  00F0CC  C090  F051         	movff	_RxPacket+6,?_sprintf+12
  1904  00F0D0  C091  F052         	movff	_RxPacket+7,?_sprintf+13
  1905  00F0D4  C092  F053         	movff	_RxPacket+8,?_sprintf+14
  1906  00F0D8  C093  F054         	movff	_RxPacket+9,?_sprintf+15
  1907  00F0DC  C094  F055         	movff	_RxPacket+10,?_sprintf+16
  1908  00F0E0  C07E  F056         	movff	_Strength,?_sprintf+17
  1909  00F0E4  C07F  F057         	movff	_Strength+1,?_sprintf+18
  1910  00F0E8  C07B  F058         	movff	_CRCRight,?_sprintf+19
  1911  00F0EC  C07C  F059         	movff	_CRCRight+1,?_sprintf+20
  1912  00F0F0  EC8C  F07A         	call	_sprintf	;wreg free
  1913                           
  1914                           ;motion.c: 238: USARTOut(Text,strlen(Text));
  1915  00F0F4  0E00               	movlw	low _Text
  1916  00F0F6  6E07               	movwf	USARTOut@data,c
  1917  00F0F8  0E01               	movlw	high _Text
  1918  00F0FA  6E08               	movwf	USARTOut@data+1,c
  1919  00F0FC  0E00               	movlw	low _Text
  1920  00F0FE  6E01               	movwf	strlen@s,c
  1921  00F100  0E01               	movlw	high _Text
  1922  00F102  6E02               	movwf	strlen@s+1,c
  1923  00F104  EC82  F06D         	call	_strlen	;wreg free
  1924  00F108  5001               	movf	?_strlen,w,c
  1925  00F10A  6E09               	movwf	USARTOut@bytes,c
  1926  00F10C  EC9F  F06D         	call	_USARTOut	;wreg free
  1927                           
  1928                           ;motion.c: 240: }
  1929                           
  1930                           ;motion.c: 239: break;
  1931  00F110  D008               	goto	l3684
  1932  00F112                     l3682:
  1933  00F112  0100               	movlb	0	; () banked
  1934  00F114  518B               	movf	(_RxPacket+1)& (0+255),w,b
  1935                           
  1936                           ; Switch size 1, requested type "space"
  1937                           ; Number of cases is 2, Range of values is 2 to 3
  1938                           ; switch strategies available:
  1939                           ; Name         Instructions Cycles
  1940                           ; simple_byte            7     4 (average)
  1941                           ;	Chosen strategy is simple_byte
  1942  00F116  0A02               	xorlw	2	; case 2
  1943  00F118  B4D8               	btfsc	status,2,c
  1944  00F11A  D78F               	goto	l3672
  1945  00F11C  0A01               	xorlw	1	; case 3
  1946  00F11E  B4D8               	btfsc	status,2,c
  1947  00F120  D7BF               	goto	l3676
  1948  00F122                     l3684:
  1949                           
  1950                           ;motion.c: 241: PORTA = 0x04;
  1951  00F122  0E04               	movlw	4
  1952  00F124  6E80               	movwf	3968,c	;volatile
  1953  00F126  D655               	goto	l3622
  1954  00F128                     __end_of_main:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           intcon	equ	0xFF2
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _strlen *****************
  1963 ;; Defined at:
  1964 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strlen.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1967 ;;		 -> Text(128), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  1970 ;;		 -> Text(128), 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  2    0[COMRAM] unsigned int 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        6 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text1
  1994  00DB04                     __ptext1:
  1995                           	opt stack 0
  1996  00DB04                     _strlen:
  1997                           	opt stack 30
  1998                           
  1999                           ;incstack = 0
  2000  00DB04  C001  F005         	movff	strlen@s,strlen@cp
  2001  00DB08  C002  F006         	movff	strlen@s+1,strlen@cp+1
  2002  00DB0C  D002               	goto	l3550
  2003  00DB0E                     l3548:
  2004  00DB0E  4A05               	infsnz	strlen@cp,f,c
  2005  00DB10  2A06               	incf	strlen@cp+1,f,c
  2006  00DB12                     l3550:
  2007  00DB12  C005  FFD9         	movff	strlen@cp,fsr2l
  2008  00DB16  C006  FFDA         	movff	strlen@cp+1,fsr2h
  2009  00DB1A  50DF               	movf	indf2,w,c
  2010  00DB1C  A4D8               	btfss	status,2,c
  2011  00DB1E  D7F7               	goto	l3548
  2012  00DB20  C001  F003         	movff	strlen@s,??_strlen
  2013  00DB24  C002  F004         	movff	strlen@s+1,??_strlen+1
  2014  00DB28  1E03               	comf	??_strlen,f,c
  2015  00DB2A  1E04               	comf	??_strlen+1,f,c
  2016  00DB2C  4A03               	infsnz	??_strlen,f,c
  2017  00DB2E  2A04               	incf	??_strlen+1,f,c
  2018  00DB30  5005               	movf	strlen@cp,w,c
  2019  00DB32  2403               	addwf	??_strlen,w,c
  2020  00DB34  6E01               	movwf	?_strlen,c
  2021  00DB36  5006               	movf	strlen@cp+1,w,c
  2022  00DB38  2004               	addwfc	??_strlen+1,w,c
  2023  00DB3A  6E02               	movwf	?_strlen+1,c
  2024  00DB3C  0012               	return	
  2025  00DB3E                     __end_of_strlen:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           indf2	equ	0xFDF
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _sprintf *****************
  2037 ;; Defined at:
  2038 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  sp              2   68[COMRAM] PTR unsigned char 
  2041 ;;		 -> Text(128), 
  2042 ;;  f               2   70[COMRAM] PTR const unsigned char 
  2043 ;;		 -> STR_4(93), STR_3(88), STR_2(108), STR_1(102), 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  tmpval          4  108[COMRAM] struct .
  2046 ;;  val             4  102[COMRAM] unsigned long 
  2047 ;;  fval            3  114[COMRAM] unsigned long 
  2048 ;;  cp              3    0        PTR const unsigned char 
  2049 ;;  prec            2  112[COMRAM] int 
  2050 ;;  exp             2  106[COMRAM] int 
  2051 ;;  flag            2  100[COMRAM] unsigned short 
  2052 ;;  ap              2   98[COMRAM] PTR void [1]
  2053 ;;		 -> ?_sprintf(2), 
  2054 ;;  len             2    0        unsigned int 
  2055 ;;  width           2    0        int 
  2056 ;;  c               1  117[COMRAM] char 
  2057 ;;  d               1    0        unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  2   68[COMRAM] int 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:       50 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    3
  2074 ;; This function calls:
  2075 ;;		___awdiv
  2076 ;;		___ftadd
  2077 ;;		___ftge
  2078 ;;		___ftmul
  2079 ;;		___ftneg
  2080 ;;		___ftsub
  2081 ;;		___fttol
  2082 ;;		___lldiv
  2083 ;;		___llmod
  2084 ;;		___lltoft
  2085 ;;		___wmul
  2086 ;;		__div_to_l_
  2087 ;;		__tdiv_to_l_
  2088 ;;		_fround
  2089 ;;		_isdigit
  2090 ;;		_scale
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text2
  2097  00F518                     __ptext2:
  2098                           	opt stack 0
  2099  00F518                     _sprintf:
  2100                           	opt stack 27
  2101                           
  2102                           ;doprnt.c: 494: va_list ap;
  2103                           ;doprnt.c: 499: signed char c;
  2104                           ;doprnt.c: 501: int width;
  2105                           ;doprnt.c: 504: int prec;
  2106                           ;doprnt.c: 508: unsigned short flag;
  2107                           ;doprnt.c: 515: char d;
  2108                           ;doprnt.c: 516: double fval;
  2109                           ;doprnt.c: 517: int exp;
  2110                           ;doprnt.c: 523: union {
  2111                           ;doprnt.c: 524: unsigned long vd;
  2112                           ;doprnt.c: 525: double integ;
  2113                           ;doprnt.c: 526: } tmpval;
  2114                           ;doprnt.c: 528: unsigned long val;
  2115                           ;doprnt.c: 529: unsigned len;
  2116                           ;doprnt.c: 530: const char * cp;
  2117                           ;doprnt.c: 533: *ap = __va_start();
  2118                           
  2119                           ;incstack = 0
  2120  00F518  0E49               	movlw	low (?_sprintf+4)
  2121  00F51A  6E63               	movwf	sprintf@ap,c
  2122  00F51C  0E00               	movlw	high (?_sprintf+4)
  2123  00F51E  6E64               	movwf	sprintf@ap+1,c
  2124                           
  2125                           ;doprnt.c: 536: while(c = *f++) {
  2126  00F520  D3DC               	goto	l3540
  2127  00F522                     l3314:
  2128                           
  2129                           ;doprnt.c: 538: if(c != '%')
  2130  00F522  0E25               	movlw	37
  2131  00F524  1876               	xorwf	sprintf@c,w,c
  2132  00F526  B4D8               	btfsc	status,2,c
  2133  00F528  D009               	goto	l3320
  2134                           
  2135                           ;doprnt.c: 540: {
  2136                           ;doprnt.c: 541: ((*sp++ = (c)));
  2137  00F52A  C045  FFD9         	movff	sprintf@sp,fsr2l
  2138  00F52E  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2139  00F532  C076  FFDF         	movff	sprintf@c,indf2
  2140  00F536  4A45               	infsnz	sprintf@sp,f,c
  2141  00F538  2A46               	incf	sprintf@sp+1,f,c
  2142                           
  2143                           ;doprnt.c: 542: continue;
  2144  00F53A  D3CF               	goto	l3540
  2145  00F53C                     l3320:
  2146                           
  2147                           ;doprnt.c: 543: }
  2148                           ;doprnt.c: 548: flag = 0;
  2149  00F53C  0E00               	movlw	0
  2150  00F53E  6E66               	movwf	sprintf@flag+1,c
  2151  00F540  0E00               	movlw	0
  2152  00F542  6E65               	movwf	sprintf@flag,c
  2153                           
  2154                           ;doprnt.c: 611: if(*f == '.') {
  2155  00F544  C047  FFF6         	movff	sprintf@f,tblptrl
  2156  00F548  C048  FFF7         	movff	sprintf@f+1,tblptrh
  2157  00F54C                     	if	0	;tblptru may be non-zero
  2158  00F54C                     	endif
  2159  00F54C                     	if	0	;tblptru may be non-zero
  2160  00F54C                     	endif
  2161  00F54C  0008               	tblrd		*
  2162  00F54E  50F5               	movf	tablat,w,c
  2163  00F550  0A2E               	xorlw	46
  2164  00F552  A4D8               	btfss	status,2,c
  2165  00F554  D02E               	goto	l3334
  2166                           
  2167                           ;doprnt.c: 612: flag |= 0x4000;
  2168  00F556  8C66               	bsf	sprintf@flag+1,6,c
  2169                           
  2170                           ;doprnt.c: 613: f++;
  2171  00F558  4A47               	infsnz	sprintf@f,f,c
  2172  00F55A  2A48               	incf	sprintf@f+1,f,c
  2173                           
  2174                           ;doprnt.c: 620: {
  2175                           ;doprnt.c: 621: prec = 0;
  2176  00F55C  0E00               	movlw	0
  2177  00F55E  6E72               	movwf	sprintf@prec+1,c
  2178  00F560  0E00               	movlw	0
  2179  00F562  6E71               	movwf	sprintf@prec,c
  2180                           
  2181                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2182  00F564  D01B               	goto	l3332
  2183  00F566                     l3328:
  2184                           
  2185                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2186  00F566  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  2187  00F56A  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  2188  00F56E  0E00               	movlw	0
  2189  00F570  6E12               	movwf	___wmul@multiplicand+1,c
  2190  00F572  0E0A               	movlw	10
  2191  00F574  6E11               	movwf	___wmul@multiplicand,c
  2192  00F576  EC1A  F06D         	call	___wmul	;wreg free
  2193  00F57A  C047  FFF6         	movff	sprintf@f,tblptrl
  2194  00F57E  C048  FFF7         	movff	sprintf@f+1,tblptrh
  2195  00F582                     	if	0	;tblptru may be non-zero
  2196  00F582                     	endif
  2197  00F582                     	if	0	;tblptru may be non-zero
  2198  00F582                     	endif
  2199  00F582  0008               	tblrd		*
  2200  00F584  50F5               	movf	tablat,w,c
  2201  00F586  260F               	addwf	?___wmul,f,c
  2202  00F588  0E00               	movlw	0
  2203  00F58A  2210               	addwfc	?___wmul+1,f,c
  2204  00F58C  0ED0               	movlw	208
  2205  00F58E  240F               	addwf	?___wmul,w,c
  2206  00F590  6E71               	movwf	sprintf@prec,c
  2207  00F592  0EFF               	movlw	255
  2208  00F594  2010               	addwfc	?___wmul+1,w,c
  2209  00F596  6E72               	movwf	sprintf@prec+1,c
  2210  00F598  4A47               	infsnz	sprintf@f,f,c
  2211  00F59A  2A48               	incf	sprintf@f+1,f,c
  2212  00F59C                     l3332:
  2213  00F59C  C047  FFF6         	movff	sprintf@f,tblptrl
  2214  00F5A0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  2215  00F5A4                     	if	0	;tblptru may be non-zero
  2216  00F5A4                     	endif
  2217  00F5A4                     	if	0	;tblptru may be non-zero
  2218  00F5A4                     	endif
  2219  00F5A4  0008               	tblrd		*
  2220  00F5A6  50F5               	movf	tablat,w,c
  2221  00F5A8  ECD7  F06C         	call	_isdigit
  2222  00F5AC  A0D8               	btfss	status,0,c
  2223  00F5AE  D00C               	goto	l3344
  2224  00F5B0  D7DA               	goto	l3328
  2225  00F5B2                     l3334:
  2226                           
  2227                           ;doprnt.c: 626: prec = 0;
  2228  00F5B2  0E00               	movlw	0
  2229  00F5B4  6E72               	movwf	sprintf@prec+1,c
  2230  00F5B6  0E00               	movlw	0
  2231  00F5B8  6E71               	movwf	sprintf@prec,c
  2232                           
  2233                           ;doprnt.c: 628: flag |= 0x1000;
  2234  00F5BA  8866               	bsf	sprintf@flag+1,4,c
  2235                           
  2236                           ;doprnt.c: 630: }
  2237                           ;doprnt.c: 635: switch(c = *f++) {
  2238  00F5BC  D005               	goto	l3344
  2239  00F5BE                     l3338:
  2240                           
  2241                           ;doprnt.c: 663: flag |= 0x400;
  2242  00F5BE  8466               	bsf	sprintf@flag+1,2,c
  2243                           
  2244                           ;doprnt.c: 664: break;
  2245  00F5C0  D017               	goto	l3346
  2246  00F5C2                     l3340:
  2247                           
  2248                           ;doprnt.c: 818: flag |= 0xC0;
  2249  00F5C2  0EC0               	movlw	192
  2250  00F5C4  1265               	iorwf	sprintf@flag,f,c
  2251                           
  2252                           ;doprnt.c: 822: }
  2253                           
  2254                           ;doprnt.c: 819: break;
  2255  00F5C6  D014               	goto	l3346
  2256  00F5C8                     l3344:
  2257  00F5C8  C047  FFF6         	movff	sprintf@f,tblptrl
  2258  00F5CC  C048  FFF7         	movff	sprintf@f+1,tblptrh
  2259  00F5D0  4A47               	infsnz	sprintf@f,f,c
  2260  00F5D2  2A48               	incf	sprintf@f+1,f,c
  2261  00F5D4                     	if	0	;tblptru may be non-zero
  2262  00F5D4                     	endif
  2263  00F5D4                     	if	0	;tblptru may be non-zero
  2264  00F5D4                     	endif
  2265  00F5D4  0008               	tblrd		*
  2266  00F5D6  CFF5 F076          	movff	tablat,sprintf@c
  2267  00F5DA  5076               	movf	sprintf@c,w,c
  2268                           
  2269                           ; Switch size 1, requested type "space"
  2270                           ; Number of cases is 3, Range of values is 0 to 117
  2271                           ; switch strategies available:
  2272                           ; Name         Instructions Cycles
  2273                           ; simple_byte           10     6 (average)
  2274                           ;	Chosen strategy is simple_byte
  2275  00F5DC  0A00               	xorlw	0	; case 0
  2276  00F5DE  B4D8               	btfsc	status,2,c
  2277  00F5E0  D388               	goto	l3542
  2278  00F5E2  0A66               	xorlw	102	; case 102
  2279  00F5E4  B4D8               	btfsc	status,2,c
  2280  00F5E6  D7EB               	goto	l3338
  2281  00F5E8  0A13               	xorlw	19	; case 117
  2282  00F5EA  B4D8               	btfsc	status,2,c
  2283  00F5EC  D7EA               	goto	l3340
  2284  00F5EE  D375               	goto	l3540
  2285  00F5F0                     l3346:
  2286                           
  2287                           ;doprnt.c: 825: if(flag & (0x700)) {
  2288  00F5F0  0E07               	movlw	7
  2289  00F5F2  1466               	andwf	sprintf@flag+1,w,c
  2290  00F5F4  B4D8               	btfsc	status,2,c
  2291  00F5F6  D2BB               	goto	l3494
  2292                           
  2293                           ;doprnt.c: 827: if(flag & 0x1000)
  2294  00F5F8  A866               	btfss	sprintf@flag+1,4,c
  2295  00F5FA  D004               	goto	l3352
  2296                           
  2297                           ;doprnt.c: 829: prec = 6;
  2298  00F5FC  0E00               	movlw	0
  2299  00F5FE  6E72               	movwf	sprintf@prec+1,c
  2300  00F600  0E06               	movlw	6
  2301  00F602  6E71               	movwf	sprintf@prec,c
  2302  00F604                     l3352:
  2303                           
  2304                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2305  00F604  C063  FFD9         	movff	sprintf@ap,fsr2l
  2306  00F608  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  2307  00F60C  CFDE F073          	movff	postinc2,sprintf@fval
  2308  00F610  CFDE F074          	movff	postinc2,sprintf@fval+1
  2309  00F614  CFDD F075          	movff	postdec2,sprintf@fval+2
  2310  00F618  0E03               	movlw	3
  2311  00F61A  2663               	addwf	sprintf@ap,f,c
  2312  00F61C  0E00               	movlw	0
  2313  00F61E  2264               	addwfc	sprintf@ap+1,f,c
  2314                           
  2315                           ;doprnt.c: 831: if(fval < 0.0) {
  2316  00F620  AE75               	btfss	sprintf@fval+2,7,c
  2317  00F622  D010               	goto	l3362
  2318                           
  2319                           ;doprnt.c: 832: fval = -fval;
  2320  00F624  C073  F001         	movff	sprintf@fval,___ftneg@f1
  2321  00F628  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  2322  00F62C  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  2323  00F630  EC08  F06D         	call	___ftneg	;wreg free
  2324  00F634  C001  F073         	movff	?___ftneg,sprintf@fval
  2325  00F638  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  2326  00F63C  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  2327                           
  2328                           ;doprnt.c: 833: flag |= 0x03;
  2329  00F640  0E03               	movlw	3
  2330  00F642  1265               	iorwf	sprintf@flag,f,c
  2331  00F644                     l3362:
  2332                           
  2333                           ;doprnt.c: 834: }
  2334                           ;doprnt.c: 835: exp = 0;
  2335  00F644  0E00               	movlw	0
  2336  00F646  6E6C               	movwf	sprintf@exp+1,c
  2337  00F648  0E00               	movlw	0
  2338  00F64A  6E6B               	movwf	sprintf@exp,c
  2339                           
  2340                           ;doprnt.c: 836: if( fval!=0) {
  2341  00F64C  5073               	movf	sprintf@fval,w,c
  2342  00F64E  1074               	iorwf	sprintf@fval+1,w,c
  2343  00F650  1075               	iorwf	sprintf@fval+2,w,c
  2344  00F652  B4D8               	btfsc	status,2,c
  2345  00F654  D083               	goto	l3390
  2346                           
  2347                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2348  00F656  0E82               	movlw	130
  2349  00F658  6E5A               	movwf	??_sprintf& (0+255),c
  2350  00F65A  0EFF               	movlw	255
  2351  00F65C  6E5B               	movwf	(??_sprintf+1)& (0+255),c
  2352  00F65E  C073  F05C         	movff	sprintf@fval,??_sprintf+2
  2353  00F662  C074  F05D         	movff	sprintf@fval+1,??_sprintf+3
  2354  00F666  C075  F05E         	movff	sprintf@fval+2,??_sprintf+4
  2355  00F66A  C076  F05F         	movff	sprintf@fval+3,??_sprintf+5
  2356  00F66E  0E10               	movlw	16
  2357  00F670  D005               	goto	u3110
  2358  00F672                     u3115:
  2359  00F672  90D8               	bcf	status,0,c
  2360  00F674  325F               	rrcf	??_sprintf+5,f,c
  2361  00F676  325E               	rrcf	??_sprintf+4,f,c
  2362  00F678  325D               	rrcf	??_sprintf+3,f,c
  2363  00F67A  325C               	rrcf	??_sprintf+2,f,c
  2364  00F67C                     u3110:
  2365  00F67C  2EE8               	decfsz	wreg,f,c
  2366  00F67E  D7F9               	goto	u3115
  2367  00F680  505C               	movf	??_sprintf+2,w,c
  2368  00F682  245A               	addwf	??_sprintf,w,c
  2369  00F684  6E6B               	movwf	sprintf@exp,c
  2370  00F686  0E00               	movlw	0
  2371  00F688  205B               	addwfc	??_sprintf+1,w,c
  2372  00F68A  6E6C               	movwf	sprintf@exp+1,c
  2373                           
  2374                           ;doprnt.c: 838: exp--;
  2375  00F68C  066B               	decf	sprintf@exp,f,c
  2376  00F68E  A0D8               	btfss	status,0,c
  2377  00F690  066C               	decf	sprintf@exp+1,f,c
  2378                           
  2379                           ;doprnt.c: 839: exp *= 3;
  2380  00F692  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  2381  00F696  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2382  00F69A  0E00               	movlw	0
  2383  00F69C  6E12               	movwf	___wmul@multiplicand+1,c
  2384  00F69E  0E03               	movlw	3
  2385  00F6A0  6E11               	movwf	___wmul@multiplicand,c
  2386  00F6A2  EC1A  F06D         	call	___wmul	;wreg free
  2387  00F6A6  C00F  F06B         	movff	?___wmul,sprintf@exp
  2388  00F6AA  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  2389                           
  2390                           ;doprnt.c: 840: exp /= 10;
  2391  00F6AE  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  2392  00F6B2  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2393  00F6B6  0E00               	movlw	0
  2394  00F6B8  6E0A               	movwf	___awdiv@divisor+1,c
  2395  00F6BA  0E0A               	movlw	10
  2396  00F6BC  6E09               	movwf	___awdiv@divisor,c
  2397  00F6BE  EC17  F070         	call	___awdiv	;wreg free
  2398  00F6C2  C007  F06B         	movff	?___awdiv,sprintf@exp
  2399  00F6C6  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  2400                           
  2401                           ;doprnt.c: 841: if(exp < 0)
  2402  00F6CA  AE6C               	btfss	sprintf@exp+1,7,c
  2403  00F6CC  D003               	goto	l3378
  2404                           
  2405                           ;doprnt.c: 842: exp--;
  2406  00F6CE  066B               	decf	sprintf@exp,f,c
  2407  00F6D0  A0D8               	btfss	status,0,c
  2408  00F6D2  066C               	decf	sprintf@exp+1,f,c
  2409  00F6D4                     l3378:
  2410                           
  2411                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2412  00F6D4  506B               	movf	sprintf@exp,w,c
  2413  00F6D6  0800               	sublw	0
  2414  00F6D8  EC94  F078         	call	_scale
  2415  00F6DC  C024  F06D         	movff	?_scale,sprintf@tmpval
  2416  00F6E0  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2417  00F6E4  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2418                           
  2419                           ;doprnt.c: 847: tmpval.integ *= fval;
  2420  00F6E8  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  2421  00F6EC  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2422  00F6F0  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2423  00F6F4  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2424  00F6F8  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2425  00F6FC  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2426  00F700  ECAE  F072         	call	___ftmul	;wreg free
  2427  00F704  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  2428  00F708  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  2429  00F70C  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  2430                           
  2431                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2432  00F710  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2433  00F714  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2434  00F718  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2435  00F71C  0E00               	movlw	0
  2436  00F71E  6E04               	movwf	___ftge@ff2,c
  2437  00F720  0E80               	movlw	128
  2438  00F722  6E05               	movwf	___ftge@ff2+1,c
  2439  00F724  0E3F               	movlw	63
  2440  00F726  6E06               	movwf	___ftge@ff2+2,c
  2441  00F728  EC59  F070         	call	___ftge	;wreg free
  2442  00F72C  B0D8               	btfsc	status,0,c
  2443  00F72E  D004               	goto	l3386
  2444                           
  2445                           ;doprnt.c: 849: exp--;
  2446  00F730  066B               	decf	sprintf@exp,f,c
  2447  00F732  A0D8               	btfss	status,0,c
  2448  00F734  066C               	decf	sprintf@exp+1,f,c
  2449  00F736  D012               	goto	l3390
  2450  00F738                     l3386:
  2451                           
  2452                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2453  00F738  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2454  00F73C  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2455  00F740  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2456  00F744  0E00               	movlw	0
  2457  00F746  6E04               	movwf	___ftge@ff2,c
  2458  00F748  0E20               	movlw	32
  2459  00F74A  6E05               	movwf	___ftge@ff2+1,c
  2460  00F74C  0E41               	movlw	65
  2461  00F74E  6E06               	movwf	___ftge@ff2+2,c
  2462  00F750  EC59  F070         	call	___ftge	;wreg free
  2463  00F754  A0D8               	btfss	status,0,c
  2464  00F756  D002               	goto	l3390
  2465                           
  2466                           ;doprnt.c: 851: exp++;
  2467  00F758  4A6B               	infsnz	sprintf@exp,f,c
  2468  00F75A  2A6C               	incf	sprintf@exp+1,f,c
  2469  00F75C                     l3390:
  2470                           
  2471                           ;doprnt.c: 852: }
  2472                           ;doprnt.c: 1112: if(prec <= 12)
  2473  00F75C  BE72               	btfsc	sprintf@prec+1,7,c
  2474  00F75E  D006               	goto	l3392
  2475  00F760  5072               	movf	sprintf@prec+1,w,c
  2476  00F762  E11B               	bnz	l3394
  2477  00F764  0E0D               	movlw	13
  2478  00F766  5C71               	subwf	sprintf@prec,w,c
  2479  00F768  B0D8               	btfsc	status,0,c
  2480  00F76A  D017               	goto	l3394
  2481  00F76C                     l3392:
  2482                           
  2483                           ;doprnt.c: 1113: fval += fround(prec);
  2484  00F76C  C073  F033         	movff	sprintf@fval,___ftadd@f1
  2485  00F770  C074  F034         	movff	sprintf@fval+1,___ftadd@f1+1
  2486  00F774  C075  F035         	movff	sprintf@fval+2,___ftadd@f1+2
  2487  00F778  5071               	movf	sprintf@prec,w,c
  2488  00F77A  ECB6  F075         	call	_fround
  2489  00F77E  C024  F036         	movff	?_fround,___ftadd@f2
  2490  00F782  C025  F037         	movff	?_fround+1,___ftadd@f2+1
  2491  00F786  C026  F038         	movff	?_fround+2,___ftadd@f2+2
  2492  00F78A  ECE0  F074         	call	___ftadd	;wreg free
  2493  00F78E  C033  F073         	movff	?___ftadd,sprintf@fval
  2494  00F792  C034  F074         	movff	?___ftadd+1,sprintf@fval+1
  2495  00F796  C035  F075         	movff	?___ftadd+2,sprintf@fval+2
  2496  00F79A                     l3394:
  2497                           
  2498                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2499  00F79A  BE6C               	btfsc	sprintf@exp+1,7,c
  2500  00F79C  D006               	goto	l3396
  2501  00F79E  506C               	movf	sprintf@exp+1,w,c
  2502  00F7A0  E11E               	bnz	l3402
  2503  00F7A2  0E0A               	movlw	10
  2504  00F7A4  5C6B               	subwf	sprintf@exp,w,c
  2505  00F7A6  B0D8               	btfsc	status,0,c
  2506  00F7A8  D01A               	goto	l3402
  2507  00F7AA                     l3396:
  2508  00F7AA  5073               	movf	sprintf@fval,w,c
  2509  00F7AC  1074               	iorwf	sprintf@fval+1,w,c
  2510  00F7AE  1075               	iorwf	sprintf@fval+2,w,c
  2511  00F7B0  B4D8               	btfsc	status,2,c
  2512  00F7B2  D051               	goto	l3416
  2513  00F7B4  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2514  00F7B8  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2515  00F7BC  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2516  00F7C0  EC34  F072         	call	___fttol	;wreg free
  2517  00F7C4  502B               	movf	?___fttol,w,c
  2518  00F7C6  102C               	iorwf	?___fttol+1,w,c
  2519  00F7C8  102D               	iorwf	?___fttol+2,w,c
  2520  00F7CA  102E               	iorwf	?___fttol+3,w,c
  2521  00F7CC  B4D8               	btfsc	status,2,c
  2522  00F7CE  BE6C               	btfsc	sprintf@exp+1,7,c
  2523  00F7D0  D042               	goto	l3416
  2524  00F7D2  506C               	movf	sprintf@exp+1,w,c
  2525  00F7D4  E104               	bnz	l3402
  2526  00F7D6  0E02               	movlw	2
  2527  00F7D8  5C6B               	subwf	sprintf@exp,w,c
  2528  00F7DA  A0D8               	btfss	status,0,c
  2529  00F7DC  D03C               	goto	l3416
  2530  00F7DE                     l3402:
  2531                           
  2532                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2533  00F7DE  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2534  00F7E2  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2535  00F7E6  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2536  00F7EA  0E70               	movlw	112
  2537  00F7EC  6E04               	movwf	___ftge@ff2,c
  2538  00F7EE  0E89               	movlw	137
  2539  00F7F0  6E05               	movwf	___ftge@ff2+1,c
  2540  00F7F2  0E40               	movlw	64
  2541  00F7F4  6E06               	movwf	___ftge@ff2+2,c
  2542  00F7F6  EC59  F070         	call	___ftge	;wreg free
  2543  00F7FA  B0D8               	btfsc	status,0,c
  2544  00F7FC  D002               	goto	l3406
  2545                           
  2546                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2547  00F7FE  0EF7               	movlw	247
  2548  00F800  D001               	goto	L2
  2549  00F802                     l3406:
  2550                           
  2551                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2552  00F802  0EF8               	movlw	248
  2553  00F804                     L2:
  2554  00F804  266B               	addwf	sprintf@exp,f,c
  2555  00F806  0EFF               	movlw	255
  2556  00F808  226C               	addwfc	sprintf@exp+1,f,c
  2557                           
  2558                           ;doprnt.c: 1124: }
  2559                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2560  00F80A  506B               	movf	sprintf@exp,w,c
  2561  00F80C  EC94  F078         	call	_scale
  2562  00F810  C024  F06D         	movff	?_scale,sprintf@tmpval
  2563  00F814  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2564  00F818  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2565                           
  2566                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2567  00F81C  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2568  00F820  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2569  00F824  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2570  00F828  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2571  00F82C  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2572  00F830  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2573  00F834  EC47  F074         	call	__tdiv_to_l_	;wreg free
  2574  00F838  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  2575  00F83C  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2576  00F840  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2577  00F844  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2578                           
  2579                           ;doprnt.c: 1129: fval = 0.0;
  2580  00F848  0E00               	movlw	0
  2581  00F84A  6E73               	movwf	sprintf@fval,c
  2582  00F84C  0E00               	movlw	0
  2583  00F84E  6E74               	movwf	sprintf@fval+1,c
  2584  00F850  0E00               	movlw	0
  2585  00F852  6E75               	movwf	sprintf@fval+2,c
  2586                           
  2587                           ;doprnt.c: 1130: } else {
  2588  00F854  D032               	goto	l3420
  2589  00F856                     l3416:
  2590                           
  2591                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2592  00F856  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2593  00F85A  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2594  00F85E  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2595  00F862  EC34  F072         	call	___fttol	;wreg free
  2596  00F866  C02B  F067         	movff	?___fttol,sprintf@val
  2597  00F86A  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2598  00F86E  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2599  00F872  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2600                           
  2601                           ;doprnt.c: 1132: fval -= (double)val;
  2602  00F876  C073  F03F         	movff	sprintf@fval,___ftsub@f1
  2603  00F87A  C074  F040         	movff	sprintf@fval+1,___ftsub@f1+1
  2604  00F87E  C075  F041         	movff	sprintf@fval+2,___ftsub@f1+2
  2605  00F882  C067  F009         	movff	sprintf@val,___lltoft@c
  2606  00F886  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2607  00F88A  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2608  00F88E  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2609  00F892  ECA1  F06E         	call	___lltoft	;wreg free
  2610  00F896  C009  F042         	movff	?___lltoft,___ftsub@f2
  2611  00F89A  C00A  F043         	movff	?___lltoft+1,___ftsub@f2+1
  2612  00F89E  C00B  F044         	movff	?___lltoft+2,___ftsub@f2+2
  2613  00F8A2  ECBF  F06D         	call	___ftsub	;wreg free
  2614  00F8A6  C03F  F073         	movff	?___ftsub,sprintf@fval
  2615  00F8AA  C040  F074         	movff	?___ftsub+1,sprintf@fval+1
  2616  00F8AE  C041  F075         	movff	?___ftsub+2,sprintf@fval+2
  2617                           
  2618                           ;doprnt.c: 1133: exp = 0;
  2619  00F8B2  0E00               	movlw	0
  2620  00F8B4  6E6C               	movwf	sprintf@exp+1,c
  2621  00F8B6  0E00               	movlw	0
  2622  00F8B8  6E6B               	movwf	sprintf@exp,c
  2623  00F8BA                     l3420:
  2624                           
  2625                           ;doprnt.c: 1134: }
  2626                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2627  00F8BA  0E01               	movlw	1
  2628  00F8BC  6E76               	movwf	sprintf@c,c
  2629  00F8BE                     l3422:
  2630  00F8BE  0E0A               	movlw	10
  2631  00F8C0  1876               	xorwf	sprintf@c,w,c
  2632  00F8C2  B4D8               	btfsc	status,2,c
  2633  00F8C4  D018               	goto	l3434
  2634                           
  2635                           ;doprnt.c: 1137: if(val < dpowers[c])
  2636  00F8C6  5076               	movf	sprintf@c,w,c
  2637  00F8C8  0D04               	mullw	4
  2638  00F8CA  0E01               	movlw	low _dpowers
  2639  00F8CC  24F3               	addwf	prodl,w,c
  2640  00F8CE  6EF6               	movwf	tblptrl,c
  2641  00F8D0  0EFE               	movlw	high _dpowers
  2642  00F8D2  20F4               	addwfc	prodh,w,c
  2643  00F8D4  6EF7               	movwf	tblptrh,c
  2644  00F8D6                     	if	0	;There are less than 3 active tblptr bytes
  2645  00F8D6                     	endif
  2646  00F8D6  0009               	tblrd		*+
  2647  00F8D8  50F5               	movf	tablat,w,c
  2648  00F8DA  5C67               	subwf	sprintf@val,w,c
  2649  00F8DC  0009               	tblrd		*+
  2650  00F8DE  50F5               	movf	tablat,w,c
  2651  00F8E0  5868               	subwfb	sprintf@val+1,w,c
  2652  00F8E2  0009               	tblrd		*+
  2653  00F8E4  50F5               	movf	tablat,w,c
  2654  00F8E6  5869               	subwfb	sprintf@val+2,w,c
  2655  00F8E8  0009               	tblrd		*+
  2656  00F8EA  50F5               	movf	tablat,w,c
  2657  00F8EC  586A               	subwfb	sprintf@val+3,w,c
  2658  00F8EE  A0D8               	btfss	status,0,c
  2659  00F8F0  D002               	goto	l3434
  2660                           
  2661                           ;doprnt.c: 1138: break;
  2662  00F8F2  2A76               	incf	sprintf@c,f,c
  2663  00F8F4  D7E4               	goto	l3422
  2664  00F8F6                     l3434:
  2665                           
  2666                           ;doprnt.c: 1175: {
  2667                           ;doprnt.c: 1188: if(flag & 0x03)
  2668  00F8F6  0E03               	movlw	3
  2669  00F8F8  1465               	andwf	sprintf@flag,w,c
  2670  00F8FA  6E5A               	movwf	??_sprintf& (0+255),c
  2671  00F8FC  0E00               	movlw	0
  2672  00F8FE  1466               	andwf	sprintf@flag+1,w,c
  2673  00F900  6E5B               	movwf	(??_sprintf+1)& (0+255),c
  2674  00F902  505A               	movf	??_sprintf,w,c
  2675  00F904  105B               	iorwf	??_sprintf+1,w,c
  2676  00F906  B4D8               	btfsc	status,2,c
  2677  00F908  D051               	goto	l3448
  2678                           
  2679                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2680  00F90A  C045  FFD9         	movff	sprintf@sp,fsr2l
  2681  00F90E  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2682  00F912  0E2D               	movlw	45
  2683  00F914  D049               	goto	L3
  2684  00F916                     l3438:
  2685  00F916  4A45               	infsnz	sprintf@sp,f,c
  2686  00F918  2A46               	incf	sprintf@sp+1,f,c
  2687                           
  2688                           ;doprnt.c: 1195: }
  2689                           ;doprnt.c: 1196: while(c--) {
  2690  00F91A  D048               	goto	l3448
  2691  00F91C                     l3440:
  2692                           
  2693                           ;doprnt.c: 1200: {
  2694                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2695  00F91C  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2696  00F920  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2697  00F924  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2698  00F928  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2699  00F92C  5076               	movf	sprintf@c,w,c
  2700  00F92E  0D04               	mullw	4
  2701  00F930  0E01               	movlw	low _dpowers
  2702  00F932  24F3               	addwf	prodl,w,c
  2703  00F934  6EF6               	movwf	tblptrl,c
  2704  00F936  0EFE               	movlw	high _dpowers
  2705  00F938  20F4               	addwfc	prodh,w,c
  2706  00F93A  6EF7               	movwf	tblptrh,c
  2707  00F93C                     	if	0	;There are less than 3 active tblptr bytes
  2708  00F93C                     	endif
  2709  00F93C  0009               	tblrd		*+
  2710  00F93E  CFF5 F005          	movff	tablat,___lldiv@divisor
  2711  00F942  0009               	tblrd		*+
  2712  00F944  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2713  00F948  0009               	tblrd		*+
  2714  00F94A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2715  00F94E  000A               	tblrd		*-
  2716  00F950  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2717  00F954  ECD6  F06F         	call	___lldiv	;wreg free
  2718  00F958  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2719  00F95C  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2720  00F960  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2721  00F964  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2722                           
  2723                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2724  00F968  C06D  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2725  00F96C  C06E  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2726  00F970  C06F  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2727  00F974  C070  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2728  00F978  0E0A               	movlw	10
  2729  00F97A  6E12               	movwf	___llmod@divisor,c
  2730  00F97C  0E00               	movlw	0
  2731  00F97E  6E13               	movwf	___llmod@divisor+1,c
  2732  00F980  0E00               	movlw	0
  2733  00F982  6E14               	movwf	___llmod@divisor+2,c
  2734  00F984  0E00               	movlw	0
  2735  00F986  6E15               	movwf	___llmod@divisor+3,c
  2736  00F988  EC2E  F06F         	call	___llmod	;wreg free
  2737  00F98C  C00E  F06D         	movff	?___llmod,sprintf@tmpval
  2738  00F990  C00F  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2739  00F994  C010  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2740  00F998  C011  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2741                           
  2742                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2743  00F99C  506D               	movf	sprintf@tmpval,w,c
  2744  00F99E  0F30               	addlw	48
  2745  00F9A0  C045  FFD9         	movff	sprintf@sp,fsr2l
  2746  00F9A4  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2747  00F9A8                     L3:
  2748  00F9A8  6EDF               	movwf	indf2,c
  2749  00F9AA  D7B5               	goto	l3438
  2750  00F9AC                     l3448:
  2751  00F9AC  0676               	decf	sprintf@c,f,c
  2752  00F9AE  2876               	incf	sprintf@c,w,c
  2753  00F9B0  B4D8               	btfsc	status,2,c
  2754  00F9B2  D00C               	goto	l3456
  2755  00F9B4  D7B3               	goto	l3440
  2756  00F9B6                     l3450:
  2757                           
  2758                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2759  00F9B6  C045  FFD9         	movff	sprintf@sp,fsr2l
  2760  00F9BA  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2761  00F9BE  0E30               	movlw	48
  2762  00F9C0  6EDF               	movwf	indf2,c
  2763  00F9C2  4A45               	infsnz	sprintf@sp,f,c
  2764  00F9C4  2A46               	incf	sprintf@sp+1,f,c
  2765                           
  2766                           ;doprnt.c: 1209: exp--;
  2767  00F9C6  066B               	decf	sprintf@exp,f,c
  2768  00F9C8  A0D8               	btfss	status,0,c
  2769  00F9CA  066C               	decf	sprintf@exp+1,f,c
  2770  00F9CC                     l3456:
  2771  00F9CC  BE6C               	btfsc	sprintf@exp+1,7,c
  2772  00F9CE  D005               	goto	l3458
  2773  00F9D0  506C               	movf	sprintf@exp+1,w,c
  2774  00F9D2  E1F1               	bnz	l3450
  2775  00F9D4  046B               	decf	sprintf@exp,w,c
  2776  00F9D6  B0D8               	btfsc	status,0,c
  2777  00F9D8  D7EE               	goto	l3450
  2778  00F9DA                     l3458:
  2779                           
  2780                           ;doprnt.c: 1210: }
  2781                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2782  00F9DA  BE72               	btfsc	sprintf@prec+1,7,c
  2783  00F9DC  D009               	goto	l243
  2784  00F9DE  5072               	movf	sprintf@prec+1,w,c
  2785  00F9E0  E104               	bnz	u3270
  2786  00F9E2  0E09               	movlw	9
  2787  00F9E4  5C71               	subwf	sprintf@prec,w,c
  2788  00F9E6  A0D8               	btfss	status,0,c
  2789  00F9E8  D003               	goto	l243
  2790  00F9EA                     u3270:
  2791                           
  2792                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2793  00F9EA  0E08               	movlw	8
  2794  00F9EC  6E76               	movwf	sprintf@c,c
  2795  00F9EE  D002               	goto	l3462
  2796  00F9F0                     l243:
  2797                           
  2798                           ;doprnt.c: 1213: else
  2799                           ;doprnt.c: 1214: c = prec;
  2800  00F9F0  C071  F076         	movff	sprintf@prec,sprintf@c
  2801  00F9F4                     l3462:
  2802                           
  2803                           ;doprnt.c: 1215: prec -= c;
  2804  00F9F4  5076               	movf	sprintf@c,w,c
  2805  00F9F6  5E71               	subwf	sprintf@prec,f,c
  2806  00F9F8  0E00               	movlw	0
  2807  00F9FA  BE76               	btfsc	sprintf@c,7,c
  2808  00F9FC  0EFF               	movlw	255
  2809  00F9FE  5A72               	subwfb	sprintf@prec+1,f,c
  2810                           
  2811                           ;doprnt.c: 1219: if(c)
  2812  00FA00  5076               	movf	sprintf@c,w,c
  2813  00FA02  B4D8               	btfsc	status,2,c
  2814  00FA04  D008               	goto	l3470
  2815                           
  2816                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2817  00FA06  C045  FFD9         	movff	sprintf@sp,fsr2l
  2818  00FA0A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2819  00FA0E  0E2E               	movlw	46
  2820  00FA10  6EDF               	movwf	indf2,c
  2821  00FA12  4A45               	infsnz	sprintf@sp,f,c
  2822  00FA14  2A46               	incf	sprintf@sp+1,f,c
  2823  00FA16                     l3470:
  2824                           
  2825                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2826  00FA16  5076               	movf	sprintf@c,w,c
  2827  00FA18  EC94  F078         	call	_scale
  2828  00FA1C  C024  F060         	movff	?_scale,_sprintf$2340
  2829  00FA20  C025  F061         	movff	?_scale+1,_sprintf$2340+1
  2830  00FA24  C026  F062         	movff	?_scale+2,_sprintf$2340+2
  2831                           
  2832                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2833  00FA28  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2834  00FA2C  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2835  00FA30  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2836  00FA34  C060  F015         	movff	_sprintf$2340,___ftmul@f1
  2837  00FA38  C061  F016         	movff	_sprintf$2340+1,___ftmul@f1+1
  2838  00FA3C  C062  F017         	movff	_sprintf$2340+2,___ftmul@f1+2
  2839  00FA40  ECAE  F072         	call	___ftmul	;wreg free
  2840  00FA44  C015  F02B         	movff	?___ftmul,___fttol@f1
  2841  00FA48  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2842  00FA4C  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2843  00FA50  EC34  F072         	call	___fttol	;wreg free
  2844  00FA54  C02B  F067         	movff	?___fttol,sprintf@val
  2845  00FA58  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2846  00FA5C  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2847  00FA60  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2848                           
  2849                           ;doprnt.c: 1228: while(c--) {
  2850  00FA64  D06F               	goto	l3484
  2851  00FA66                     l3474:
  2852                           
  2853                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2854  00FA66  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2855  00FA6A  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2856  00FA6E  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2857  00FA72  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2858  00FA76  5076               	movf	sprintf@c,w,c
  2859  00FA78  0D04               	mullw	4
  2860  00FA7A  0E01               	movlw	low _dpowers
  2861  00FA7C  24F3               	addwf	prodl,w,c
  2862  00FA7E  6EF6               	movwf	tblptrl,c
  2863  00FA80  0EFE               	movlw	high _dpowers
  2864  00FA82  20F4               	addwfc	prodh,w,c
  2865  00FA84  6EF7               	movwf	tblptrh,c
  2866  00FA86                     	if	0	;There are less than 3 active tblptr bytes
  2867  00FA86                     	endif
  2868  00FA86  0009               	tblrd		*+
  2869  00FA88  CFF5 F005          	movff	tablat,___lldiv@divisor
  2870  00FA8C  0009               	tblrd		*+
  2871  00FA8E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2872  00FA92  0009               	tblrd		*+
  2873  00FA94  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2874  00FA98  000A               	tblrd		*-
  2875  00FA9A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2876  00FA9E  ECD6  F06F         	call	___lldiv	;wreg free
  2877  00FAA2  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2878  00FAA6  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2879  00FAAA  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2880  00FAAE  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2881                           
  2882                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2883  00FAB2  C06D  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2884  00FAB6  C06E  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2885  00FABA  C06F  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2886  00FABE  C070  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2887  00FAC2  0E0A               	movlw	10
  2888  00FAC4  6E12               	movwf	___llmod@divisor,c
  2889  00FAC6  0E00               	movlw	0
  2890  00FAC8  6E13               	movwf	___llmod@divisor+1,c
  2891  00FACA  0E00               	movlw	0
  2892  00FACC  6E14               	movwf	___llmod@divisor+2,c
  2893  00FACE  0E00               	movlw	0
  2894  00FAD0  6E15               	movwf	___llmod@divisor+3,c
  2895  00FAD2  EC2E  F06F         	call	___llmod	;wreg free
  2896  00FAD6  C00E  F06D         	movff	?___llmod,sprintf@tmpval
  2897  00FADA  C00F  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2898  00FADE  C010  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2899  00FAE2  C011  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2900                           
  2901                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2902  00FAE6  506D               	movf	sprintf@tmpval,w,c
  2903  00FAE8  0F30               	addlw	48
  2904  00FAEA  C045  FFD9         	movff	sprintf@sp,fsr2l
  2905  00FAEE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2906  00FAF2  6EDF               	movwf	indf2,c
  2907  00FAF4  4A45               	infsnz	sprintf@sp,f,c
  2908  00FAF6  2A46               	incf	sprintf@sp+1,f,c
  2909                           
  2910                           ;doprnt.c: 1232: val %= dpowers[c];
  2911  00FAF8  C067  F00E         	movff	sprintf@val,___llmod@dividend
  2912  00FAFC  C068  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  2913  00FB00  C069  F010         	movff	sprintf@val+2,___llmod@dividend+2
  2914  00FB04  C06A  F011         	movff	sprintf@val+3,___llmod@dividend+3
  2915  00FB08  5076               	movf	sprintf@c,w,c
  2916  00FB0A  0D04               	mullw	4
  2917  00FB0C  0E01               	movlw	low _dpowers
  2918  00FB0E  24F3               	addwf	prodl,w,c
  2919  00FB10  6EF6               	movwf	tblptrl,c
  2920  00FB12  0EFE               	movlw	high _dpowers
  2921  00FB14  20F4               	addwfc	prodh,w,c
  2922  00FB16  6EF7               	movwf	tblptrh,c
  2923  00FB18                     	if	0	;There are less than 3 active tblptr bytes
  2924  00FB18                     	endif
  2925  00FB18  0009               	tblrd		*+
  2926  00FB1A  CFF5 F012          	movff	tablat,___llmod@divisor
  2927  00FB1E  0009               	tblrd		*+
  2928  00FB20  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2929  00FB24  0009               	tblrd		*+
  2930  00FB26  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2931  00FB2A  000A               	tblrd		*-
  2932  00FB2C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2933  00FB30  EC2E  F06F         	call	___llmod	;wreg free
  2934  00FB34  C00E  F067         	movff	?___llmod,sprintf@val
  2935  00FB38  C00F  F068         	movff	?___llmod+1,sprintf@val+1
  2936  00FB3C  C010  F069         	movff	?___llmod+2,sprintf@val+2
  2937  00FB40  C011  F06A         	movff	?___llmod+3,sprintf@val+3
  2938  00FB44                     l3484:
  2939  00FB44  0676               	decf	sprintf@c,f,c
  2940  00FB46  2876               	incf	sprintf@c,w,c
  2941  00FB48  B4D8               	btfsc	status,2,c
  2942  00FB4A  D00C               	goto	l3492
  2943  00FB4C  D78C               	goto	l3474
  2944  00FB4E                     l3486:
  2945                           
  2946                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2947  00FB4E  C045  FFD9         	movff	sprintf@sp,fsr2l
  2948  00FB52  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  2949  00FB56  0E30               	movlw	48
  2950  00FB58  6EDF               	movwf	indf2,c
  2951  00FB5A  4A45               	infsnz	sprintf@sp,f,c
  2952  00FB5C  2A46               	incf	sprintf@sp+1,f,c
  2953                           
  2954                           ;doprnt.c: 1237: prec--;
  2955  00FB5E  0671               	decf	sprintf@prec,f,c
  2956  00FB60  A0D8               	btfss	status,0,c
  2957  00FB62  0672               	decf	sprintf@prec+1,f,c
  2958  00FB64                     l3492:
  2959  00FB64  5071               	movf	sprintf@prec,w,c
  2960  00FB66  1072               	iorwf	sprintf@prec+1,w,c
  2961  00FB68  B4D8               	btfsc	status,2,c
  2962  00FB6A  D0B7               	goto	l3540
  2963  00FB6C  D7F0               	goto	l3486
  2964  00FB6E                     l3494:
  2965                           
  2966                           ;doprnt.c: 1246: }
  2967                           ;doprnt.c: 1273: {
  2968                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2969  00FB6E  C063  FFD9         	movff	sprintf@ap,fsr2l
  2970  00FB72  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  2971  00FB76  CFDE F05A          	movff	postinc2,??_sprintf
  2972  00FB7A  CFDD F05B          	movff	postdec2,??_sprintf+1
  2973  00FB7E  C05A  F067         	movff	??_sprintf,sprintf@val
  2974  00FB82  C05B  F068         	movff	??_sprintf+1,sprintf@val+1
  2975  00FB86  6A69               	clrf	sprintf@val+2,c
  2976  00FB88  6A6A               	clrf	sprintf@val+3,c
  2977  00FB8A  0E02               	movlw	2
  2978  00FB8C  2663               	addwf	sprintf@ap,f,c
  2979  00FB8E  0E00               	movlw	0
  2980  00FB90  2264               	addwfc	sprintf@ap+1,f,c
  2981                           
  2982                           ;doprnt.c: 1287: }
  2983                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2984  00FB92  5071               	movf	sprintf@prec,w,c
  2985  00FB94  1072               	iorwf	sprintf@prec+1,w,c
  2986  00FB96  A4D8               	btfss	status,2,c
  2987  00FB98  D008               	goto	l3504
  2988  00FB9A  5067               	movf	sprintf@val,w,c
  2989  00FB9C  1068               	iorwf	sprintf@val+1,w,c
  2990  00FB9E  1069               	iorwf	sprintf@val+2,w,c
  2991  00FBA0  106A               	iorwf	sprintf@val+3,w,c
  2992  00FBA2  A4D8               	btfss	status,2,c
  2993  00FBA4  D002               	goto	l3504
  2994                           
  2995                           ;doprnt.c: 1291: prec++;
  2996  00FBA6  4A71               	infsnz	sprintf@prec,f,c
  2997  00FBA8  2A72               	incf	sprintf@prec+1,f,c
  2998  00FBAA                     l3504:
  2999                           
  3000                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3001  00FBAA  0E01               	movlw	1
  3002  00FBAC  6E76               	movwf	sprintf@c,c
  3003  00FBAE                     l3506:
  3004  00FBAE  0E0A               	movlw	10
  3005  00FBB0  1876               	xorwf	sprintf@c,w,c
  3006  00FBB2  B4D8               	btfsc	status,2,c
  3007  00FBB4  D018               	goto	l3518
  3008                           
  3009                           ;doprnt.c: 1306: if(val < dpowers[c])
  3010  00FBB6  5076               	movf	sprintf@c,w,c
  3011  00FBB8  0D04               	mullw	4
  3012  00FBBA  0E01               	movlw	low _dpowers
  3013  00FBBC  24F3               	addwf	prodl,w,c
  3014  00FBBE  6EF6               	movwf	tblptrl,c
  3015  00FBC0  0EFE               	movlw	high _dpowers
  3016  00FBC2  20F4               	addwfc	prodh,w,c
  3017  00FBC4  6EF7               	movwf	tblptrh,c
  3018  00FBC6                     	if	0	;There are less than 3 active tblptr bytes
  3019  00FBC6                     	endif
  3020  00FBC6  0009               	tblrd		*+
  3021  00FBC8  50F5               	movf	tablat,w,c
  3022  00FBCA  5C67               	subwf	sprintf@val,w,c
  3023  00FBCC  0009               	tblrd		*+
  3024  00FBCE  50F5               	movf	tablat,w,c
  3025  00FBD0  5868               	subwfb	sprintf@val+1,w,c
  3026  00FBD2  0009               	tblrd		*+
  3027  00FBD4  50F5               	movf	tablat,w,c
  3028  00FBD6  5869               	subwfb	sprintf@val+2,w,c
  3029  00FBD8  0009               	tblrd		*+
  3030  00FBDA  50F5               	movf	tablat,w,c
  3031  00FBDC  586A               	subwfb	sprintf@val+3,w,c
  3032  00FBDE  A0D8               	btfss	status,0,c
  3033  00FBE0  D002               	goto	l3518
  3034                           
  3035                           ;doprnt.c: 1307: break;
  3036  00FBE2  2A76               	incf	sprintf@c,f,c
  3037  00FBE4  D7E4               	goto	l3506
  3038  00FBE6                     l3518:
  3039                           
  3040                           ;doprnt.c: 1339: if(c < prec)
  3041  00FBE6  0E80               	movlw	128
  3042  00FBE8  BE76               	btfsc	sprintf@c,7,c
  3043  00FBEA  0E7F               	movlw	127
  3044  00FBEC  6E5A               	movwf	??_sprintf& (0+255),c
  3045  00FBEE  5071               	movf	sprintf@prec,w,c
  3046  00FBF0  5C76               	subwf	sprintf@c,w,c
  3047  00FBF2  5072               	movf	sprintf@prec+1,w,c
  3048  00FBF4  0A80               	xorlw	128
  3049  00FBF6  585A               	subwfb	??_sprintf& (0+255),w,c
  3050  00FBF8  B0D8               	btfsc	status,0,c
  3051  00FBFA  D003               	goto	l3522
  3052                           
  3053                           ;doprnt.c: 1340: c = prec;
  3054  00FBFC  C071  F076         	movff	sprintf@prec,sprintf@c
  3055  00FC00  D010               	goto	l3526
  3056  00FC02                     l3522:
  3057                           
  3058                           ;doprnt.c: 1341: else if(prec < c)
  3059  00FC02  5072               	movf	sprintf@prec+1,w,c
  3060  00FC04  0A80               	xorlw	128
  3061  00FC06  6E5A               	movwf	??_sprintf& (0+255),c
  3062  00FC08  5076               	movf	sprintf@c,w,c
  3063  00FC0A  5C71               	subwf	sprintf@prec,w,c
  3064  00FC0C  0E80               	movlw	128
  3065  00FC0E  BE76               	btfsc	sprintf@c,7,c
  3066  00FC10  0E7F               	movlw	127
  3067  00FC12  585A               	subwfb	??_sprintf& (0+255),w,c
  3068  00FC14  B0D8               	btfsc	status,0,c
  3069  00FC16  D005               	goto	l3526
  3070                           
  3071                           ;doprnt.c: 1342: prec = c;
  3072  00FC18  5076               	movf	sprintf@c,w,c
  3073  00FC1A  6E71               	movwf	sprintf@prec,c
  3074  00FC1C  6A72               	clrf	sprintf@prec+1,c
  3075  00FC1E  BE71               	btfsc	sprintf@prec,7,c
  3076  00FC20  0672               	decf	sprintf@prec+1,f,c
  3077  00FC22                     l3526:
  3078                           
  3079                           ;doprnt.c: 1422: {
  3080                           ;doprnt.c: 1438: if(flag & 0x03)
  3081  00FC22  0E03               	movlw	3
  3082  00FC24  1465               	andwf	sprintf@flag,w,c
  3083  00FC26  6E5A               	movwf	??_sprintf& (0+255),c
  3084  00FC28  0E00               	movlw	0
  3085  00FC2A  1466               	andwf	sprintf@flag+1,w,c
  3086  00FC2C  6E5B               	movwf	(??_sprintf+1)& (0+255),c
  3087  00FC2E  505A               	movf	??_sprintf,w,c
  3088  00FC30  105B               	iorwf	??_sprintf+1,w,c
  3089  00FC32  B4D8               	btfsc	status,2,c
  3090  00FC34  D04A               	goto	l3538
  3091                           
  3092                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3093  00FC36  C045  FFD9         	movff	sprintf@sp,fsr2l
  3094  00FC3A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3095  00FC3E  0E2D               	movlw	45
  3096  00FC40  6EDF               	movwf	indf2,c
  3097  00FC42  D041               	goto	l3536
  3098  00FC44                     l3532:
  3099                           
  3100                           ;doprnt.c: 1478: {
  3101                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3102  00FC44  C071  F05A         	movff	sprintf@prec,??_sprintf
  3103  00FC48  C072  F05B         	movff	sprintf@prec+1,??_sprintf+1
  3104  00FC4C  90D8               	bcf	status,0,c
  3105  00FC4E  365A               	rlcf	??_sprintf,f,c
  3106  00FC50  365B               	rlcf	??_sprintf+1,f,c
  3107  00FC52  90D8               	bcf	status,0,c
  3108  00FC54  365A               	rlcf	??_sprintf,f,c
  3109  00FC56  365B               	rlcf	??_sprintf+1,f,c
  3110  00FC58  0E01               	movlw	low _dpowers
  3111  00FC5A  245A               	addwf	??_sprintf,w,c
  3112  00FC5C  6EF6               	movwf	tblptrl,c
  3113  00FC5E  0EFE               	movlw	high _dpowers
  3114  00FC60  205B               	addwfc	??_sprintf+1,w,c
  3115  00FC62  6EF7               	movwf	tblptrh,c
  3116  00FC64                     	if	0	;There are less than 3 active tblptr bytes
  3117  00FC64                     	endif
  3118  00FC64  0009               	tblrd		*+
  3119  00FC66  CFF5 F005          	movff	tablat,___lldiv@divisor
  3120  00FC6A  0009               	tblrd		*+
  3121  00FC6C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3122  00FC70  0009               	tblrd		*+
  3123  00FC72  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3124  00FC76  000A               	tblrd		*-
  3125  00FC78  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3126  00FC7C  C067  F001         	movff	sprintf@val,___lldiv@dividend
  3127  00FC80  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3128  00FC84  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3129  00FC88  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3130  00FC8C  ECD6  F06F         	call	___lldiv	;wreg free
  3131  00FC90  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3132  00FC94  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3133  00FC98  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3134  00FC9C  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3135  00FCA0  0E0A               	movlw	10
  3136  00FCA2  6E12               	movwf	___llmod@divisor,c
  3137  00FCA4  0E00               	movlw	0
  3138  00FCA6  6E13               	movwf	___llmod@divisor+1,c
  3139  00FCA8  0E00               	movlw	0
  3140  00FCAA  6E14               	movwf	___llmod@divisor+2,c
  3141  00FCAC  0E00               	movlw	0
  3142  00FCAE  6E15               	movwf	___llmod@divisor+3,c
  3143  00FCB0  EC2E  F06F         	call	___llmod	;wreg free
  3144  00FCB4  500E               	movf	?___llmod,w,c
  3145  00FCB6  0F30               	addlw	48
  3146  00FCB8  6E76               	movwf	sprintf@c,c
  3147                           
  3148                           ;doprnt.c: 1523: }
  3149                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3150  00FCBA  C045  FFD9         	movff	sprintf@sp,fsr2l
  3151  00FCBE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3152  00FCC2  C076  FFDF         	movff	sprintf@c,indf2
  3153  00FCC6                     l3536:
  3154  00FCC6  4A45               	infsnz	sprintf@sp,f,c
  3155  00FCC8  2A46               	incf	sprintf@sp+1,f,c
  3156  00FCCA                     l3538:
  3157  00FCCA  0671               	decf	sprintf@prec,f,c
  3158  00FCCC  A0D8               	btfss	status,0,c
  3159  00FCCE  0672               	decf	sprintf@prec+1,f,c
  3160  00FCD0  2871               	incf	sprintf@prec,w,c
  3161  00FCD2  E1B8               	bnz	l3532
  3162  00FCD4  2872               	incf	sprintf@prec+1,w,c
  3163  00FCD6  A4D8               	btfss	status,2,c
  3164  00FCD8  D7B5               	goto	l3532
  3165  00FCDA                     l3540:
  3166  00FCDA  C047  FFF6         	movff	sprintf@f,tblptrl
  3167  00FCDE  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3168  00FCE2  4A47               	infsnz	sprintf@f,f,c
  3169  00FCE4  2A48               	incf	sprintf@f+1,f,c
  3170  00FCE6                     	if	0	;tblptru may be non-zero
  3171  00FCE6                     	endif
  3172  00FCE6                     	if	0	;tblptru may be non-zero
  3173  00FCE6                     	endif
  3174  00FCE6  0008               	tblrd		*
  3175  00FCE8  CFF5 F076          	movff	tablat,sprintf@c
  3176  00FCEC  5076               	movf	sprintf@c,w,c
  3177  00FCEE  A4D8               	btfss	status,2,c
  3178  00FCF0  D418               	goto	l3314
  3179  00FCF2                     l3542:
  3180                           
  3181                           ;doprnt.c: 1538: *sp = 0;
  3182  00FCF2  C045  FFD9         	movff	sprintf@sp,fsr2l
  3183  00FCF6  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3184  00FCFA  0E00               	movlw	0
  3185  00FCFC  6EDF               	movwf	indf2,c
  3186  00FCFE  0012               	return	
  3187  00FD00                     __end_of_sprintf:
  3188                           	opt stack 0
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           postinc0	equ	0xFEE
  3197                           wreg	equ	0xFE8
  3198                           indf2	equ	0xFDF
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _scale *****************
  3206 ;; Defined at:
  3207 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  scl             1    wreg     char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  scl             1   41[COMRAM] char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  3   35[COMRAM] char 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3221 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;Total ram usage:        7 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    2
  3228 ;; This function calls:
  3229 ;;		___awdiv
  3230 ;;		___awmod
  3231 ;;		___ftmul
  3232 ;;		___wmul
  3233 ;; This function is called by:
  3234 ;;		_sprintf
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text3
  3239  00F128                     __ptext3:
  3240                           	opt stack 0
  3241  00F128                     _scale:
  3242                           	opt stack 27
  3243                           
  3244                           ;incstack = 0
  3245                           ;scale@scl stored from wreg
  3246  00F128  6E2A               	movwf	scale@scl,c
  3247                           
  3248                           ;doprnt.c: 428: if(scl < 0) {
  3249  00F12A  AE2A               	btfss	scale@scl,7,c
  3250  00F12C  D0FB               	goto	l2858
  3251                           
  3252                           ;doprnt.c: 429: scl = -scl;
  3253  00F12E  6C2A               	negf	scale@scl,c
  3254                           
  3255                           ;doprnt.c: 430: if(scl>=110)
  3256  00F130  502A               	movf	scale@scl,w,c
  3257  00F132  0A80               	xorlw	128
  3258  00F134  0F12               	addlw	-238
  3259  00F136  A0D8               	btfss	status,0,c
  3260  00F138  D091               	goto	l2848
  3261                           
  3262                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3263  00F13A  0E00               	movlw	0
  3264  00F13C  6E12               	movwf	___wmul@multiplicand+1,c
  3265  00F13E  0E03               	movlw	3
  3266  00F140  6E11               	movwf	___wmul@multiplicand,c
  3267  00F142  0E00               	movlw	0
  3268  00F144  6E0A               	movwf	___awdiv@divisor+1,c
  3269  00F146  0E0A               	movlw	10
  3270  00F148  6E09               	movwf	___awdiv@divisor,c
  3271  00F14A  0E00               	movlw	0
  3272  00F14C  6E04               	movwf	___awmod@divisor+1,c
  3273  00F14E  0E64               	movlw	100
  3274  00F150  6E03               	movwf	___awmod@divisor,c
  3275  00F152  502A               	movf	scale@scl,w,c
  3276  00F154  6E01               	movwf	___awmod@dividend,c
  3277  00F156  6A02               	clrf	___awmod@dividend+1,c
  3278  00F158  BE01               	btfsc	___awmod@dividend,7,c
  3279  00F15A  0602               	decf	___awmod@dividend+1,f,c
  3280  00F15C  EC61  F06F         	call	___awmod	;wreg free
  3281  00F160  C001  F007         	movff	?___awmod,___awdiv@dividend
  3282  00F164  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3283  00F168  EC17  F070         	call	___awdiv	;wreg free
  3284  00F16C  0E09               	movlw	9
  3285  00F16E  2407               	addwf	?___awdiv,w,c
  3286  00F170  6E0F               	movwf	___wmul@multiplier,c
  3287  00F172  0E00               	movlw	0
  3288  00F174  2008               	addwfc	?___awdiv+1,w,c
  3289  00F176  6E10               	movwf	___wmul@multiplier+1,c
  3290  00F178  EC1A  F06D         	call	___wmul	;wreg free
  3291  00F17C  0E29               	movlw	low __npowers_
  3292  00F17E  240F               	addwf	?___wmul,w,c
  3293  00F180  6EF6               	movwf	tblptrl,c
  3294  00F182  0EFE               	movlw	high __npowers_
  3295  00F184  2010               	addwfc	?___wmul+1,w,c
  3296  00F186  6EF7               	movwf	tblptrh,c
  3297  00F188                     	if	0	;There are less than 3 active tblptr bytes
  3298  00F188                     	endif
  3299  00F188  0009               	tblrd		*+
  3300  00F18A  CFF5 F018          	movff	tablat,___ftmul@f2
  3301  00F18E  0009               	tblrd		*+
  3302  00F190  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3303  00F194  000A               	tblrd		*-
  3304  00F196  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3305  00F19A  0E00               	movlw	0
  3306  00F19C  6E0A               	movwf	___awdiv@divisor+1,c
  3307  00F19E  0E64               	movlw	100
  3308  00F1A0  6E09               	movwf	___awdiv@divisor,c
  3309  00F1A2  502A               	movf	scale@scl,w,c
  3310  00F1A4  6E07               	movwf	___awdiv@dividend,c
  3311  00F1A6  6A08               	clrf	___awdiv@dividend+1,c
  3312  00F1A8  BE07               	btfsc	___awdiv@dividend,7,c
  3313  00F1AA  0608               	decf	___awdiv@dividend+1,f,c
  3314  00F1AC  EC17  F070         	call	___awdiv	;wreg free
  3315  00F1B0  0E12               	movlw	18
  3316  00F1B2  2407               	addwf	?___awdiv,w,c
  3317  00F1B4  6E0F               	movwf	___wmul@multiplier,c
  3318  00F1B6  0E00               	movlw	0
  3319  00F1B8  2008               	addwfc	?___awdiv+1,w,c
  3320  00F1BA  6E10               	movwf	___wmul@multiplier+1,c
  3321  00F1BC  0E00               	movlw	0
  3322  00F1BE  6E12               	movwf	___wmul@multiplicand+1,c
  3323  00F1C0  0E03               	movlw	3
  3324  00F1C2  6E11               	movwf	___wmul@multiplicand,c
  3325  00F1C4  EC1A  F06D         	call	___wmul	;wreg free
  3326  00F1C8  0E29               	movlw	low __npowers_
  3327  00F1CA  240F               	addwf	?___wmul,w,c
  3328  00F1CC  6EF6               	movwf	tblptrl,c
  3329  00F1CE  0EFE               	movlw	high __npowers_
  3330  00F1D0  2010               	addwfc	?___wmul+1,w,c
  3331  00F1D2  6EF7               	movwf	tblptrh,c
  3332  00F1D4                     	if	0	;There are less than 3 active tblptr bytes
  3333  00F1D4                     	endif
  3334  00F1D4  0009               	tblrd		*+
  3335  00F1D6  CFF5 F015          	movff	tablat,___ftmul@f1
  3336  00F1DA  0009               	tblrd		*+
  3337  00F1DC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3338  00F1E0  000A               	tblrd		*-
  3339  00F1E2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3340  00F1E6  ECAE  F072         	call	___ftmul	;wreg free
  3341  00F1EA  C015  F027         	movff	?___ftmul,_scale$2339
  3342  00F1EE  C016  F028         	movff	?___ftmul+1,_scale$2339+1
  3343  00F1F2  C017  F029         	movff	?___ftmul+2,_scale$2339+2
  3344                           
  3345                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3346  00F1F6  C027  F015         	movff	_scale$2339,___ftmul@f1
  3347  00F1FA  C028  F016         	movff	_scale$2339+1,___ftmul@f1+1
  3348  00F1FE  C029  F017         	movff	_scale$2339+2,___ftmul@f1+2
  3349  00F202  0E00               	movlw	0
  3350  00F204  6E12               	movwf	___wmul@multiplicand+1,c
  3351  00F206  0E03               	movlw	3
  3352  00F208  6E11               	movwf	___wmul@multiplicand,c
  3353  00F20A  0E00               	movlw	0
  3354  00F20C  6E04               	movwf	___awmod@divisor+1,c
  3355  00F20E  0E0A               	movlw	10
  3356  00F210  6E03               	movwf	___awmod@divisor,c
  3357  00F212  502A               	movf	scale@scl,w,c
  3358  00F214  6E01               	movwf	___awmod@dividend,c
  3359  00F216  6A02               	clrf	___awmod@dividend+1,c
  3360  00F218  BE01               	btfsc	___awmod@dividend,7,c
  3361  00F21A  0602               	decf	___awmod@dividend+1,f,c
  3362  00F21C  EC61  F06F         	call	___awmod	;wreg free
  3363  00F220  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3364  00F224  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3365  00F228  EC1A  F06D         	call	___wmul	;wreg free
  3366  00F22C  0E29               	movlw	low __npowers_
  3367  00F22E  240F               	addwf	?___wmul,w,c
  3368  00F230  6EF6               	movwf	tblptrl,c
  3369  00F232  0EFE               	movlw	high __npowers_
  3370  00F234  2010               	addwfc	?___wmul+1,w,c
  3371  00F236  6EF7               	movwf	tblptrh,c
  3372  00F238                     	if	0	;There are less than 3 active tblptr bytes
  3373  00F238                     	endif
  3374  00F238  0009               	tblrd		*+
  3375  00F23A  CFF5 F018          	movff	tablat,___ftmul@f2
  3376  00F23E  0009               	tblrd		*+
  3377  00F240  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3378  00F244  000A               	tblrd		*-
  3379  00F246  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3380  00F24A  ECAE  F072         	call	___ftmul	;wreg free
  3381  00F24E  C015  F024         	movff	?___ftmul,?_scale
  3382  00F252  C016  F025         	movff	?___ftmul+1,?_scale+1
  3383  00F256  C017  F026         	movff	?___ftmul+2,?_scale+2
  3384  00F25A  0012               	return	
  3385  00F25C                     l2848:
  3386                           
  3387                           ;doprnt.c: 432: else if(scl > 10)
  3388  00F25C  502A               	movf	scale@scl,w,c
  3389  00F25E  0A80               	xorlw	128
  3390  00F260  0F75               	addlw	-139
  3391  00F262  A0D8               	btfss	status,0,c
  3392  00F264  D04D               	goto	l2854
  3393                           
  3394                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3395  00F266  0E00               	movlw	0
  3396  00F268  6E0A               	movwf	___awdiv@divisor+1,c
  3397  00F26A  0E0A               	movlw	10
  3398  00F26C  6E09               	movwf	___awdiv@divisor,c
  3399  00F26E  502A               	movf	scale@scl,w,c
  3400  00F270  6E07               	movwf	___awdiv@dividend,c
  3401  00F272  6A08               	clrf	___awdiv@dividend+1,c
  3402  00F274  BE07               	btfsc	___awdiv@dividend,7,c
  3403  00F276  0608               	decf	___awdiv@dividend+1,f,c
  3404  00F278  EC17  F070         	call	___awdiv	;wreg free
  3405  00F27C  0E09               	movlw	9
  3406  00F27E  2407               	addwf	?___awdiv,w,c
  3407  00F280  6E0F               	movwf	___wmul@multiplier,c
  3408  00F282  0E00               	movlw	0
  3409  00F284  2008               	addwfc	?___awdiv+1,w,c
  3410  00F286  6E10               	movwf	___wmul@multiplier+1,c
  3411  00F288  0E00               	movlw	0
  3412  00F28A  6E12               	movwf	___wmul@multiplicand+1,c
  3413  00F28C  0E03               	movlw	3
  3414  00F28E  6E11               	movwf	___wmul@multiplicand,c
  3415  00F290  EC1A  F06D         	call	___wmul	;wreg free
  3416  00F294  0E29               	movlw	low __npowers_
  3417  00F296  240F               	addwf	?___wmul,w,c
  3418  00F298  6EF6               	movwf	tblptrl,c
  3419  00F29A  0EFE               	movlw	high __npowers_
  3420  00F29C  2010               	addwfc	?___wmul+1,w,c
  3421  00F29E  6EF7               	movwf	tblptrh,c
  3422  00F2A0                     	if	0	;There are less than 3 active tblptr bytes
  3423  00F2A0                     	endif
  3424  00F2A0  0009               	tblrd		*+
  3425  00F2A2  CFF5 F015          	movff	tablat,___ftmul@f1
  3426  00F2A6  0009               	tblrd		*+
  3427  00F2A8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3428  00F2AC  000A               	tblrd		*-
  3429  00F2AE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3430  00F2B2  0E00               	movlw	0
  3431  00F2B4  6E12               	movwf	___wmul@multiplicand+1,c
  3432  00F2B6  0E03               	movlw	3
  3433  00F2B8  6E11               	movwf	___wmul@multiplicand,c
  3434  00F2BA  0E00               	movlw	0
  3435  00F2BC  6E04               	movwf	___awmod@divisor+1,c
  3436  00F2BE  0E0A               	movlw	10
  3437  00F2C0  6E03               	movwf	___awmod@divisor,c
  3438  00F2C2  502A               	movf	scale@scl,w,c
  3439  00F2C4  6E01               	movwf	___awmod@dividend,c
  3440  00F2C6  6A02               	clrf	___awmod@dividend+1,c
  3441  00F2C8  BE01               	btfsc	___awmod@dividend,7,c
  3442  00F2CA  0602               	decf	___awmod@dividend+1,f,c
  3443  00F2CC  EC61  F06F         	call	___awmod	;wreg free
  3444  00F2D0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3445  00F2D4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3446  00F2D8  EC1A  F06D         	call	___wmul	;wreg free
  3447  00F2DC  0E29               	movlw	low __npowers_
  3448  00F2DE  240F               	addwf	?___wmul,w,c
  3449  00F2E0  6EF6               	movwf	tblptrl,c
  3450  00F2E2  0EFE               	movlw	high __npowers_
  3451  00F2E4  2010               	addwfc	?___wmul+1,w,c
  3452  00F2E6  6EF7               	movwf	tblptrh,c
  3453  00F2E8                     	if	0	;There are less than 3 active tblptr bytes
  3454  00F2E8                     	endif
  3455  00F2E8  0009               	tblrd		*+
  3456  00F2EA  CFF5 F018          	movff	tablat,___ftmul@f2
  3457  00F2EE  0009               	tblrd		*+
  3458  00F2F0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3459  00F2F4  000A               	tblrd		*-
  3460  00F2F6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3461  00F2FA  ECAE  F072         	call	___ftmul	;wreg free
  3462  00F2FE  D7A7               	goto	L4
  3463  00F300                     l2854:
  3464                           
  3465                           ;doprnt.c: 434: return _npowers_[scl];
  3466  00F300  502A               	movf	scale@scl,w,c
  3467  00F302  0D03               	mullw	3
  3468  00F304  0E29               	movlw	low __npowers_
  3469  00F306  24F3               	addwf	prodl,w,c
  3470  00F308  6EF6               	movwf	tblptrl,c
  3471  00F30A  0EFE               	movlw	high __npowers_
  3472  00F30C  20F4               	addwfc	prodh,w,c
  3473  00F30E  6EF7               	movwf	tblptrh,c
  3474  00F310                     	if	0	;There are less than 3 active tblptr bytes
  3475  00F310                     	endif
  3476  00F310  0009               	tblrd		*+
  3477  00F312  CFF5 F024          	movff	tablat,?_scale
  3478  00F316  0009               	tblrd		*+
  3479  00F318  CFF5 F025          	movff	tablat,?_scale+1
  3480  00F31C  000A               	tblrd		*-
  3481  00F31E  CFF5 F026          	movff	tablat,?_scale+2
  3482  00F322  0012               	return	
  3483  00F324                     l2858:
  3484                           
  3485                           ;doprnt.c: 435: }
  3486                           ;doprnt.c: 436: if(scl>=110)
  3487  00F324  502A               	movf	scale@scl,w,c
  3488  00F326  0A80               	xorlw	128
  3489  00F328  0F12               	addlw	-238
  3490  00F32A  A0D8               	btfss	status,0,c
  3491  00F32C  D091               	goto	l2866
  3492                           
  3493                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3494  00F32E  0E00               	movlw	0
  3495  00F330  6E12               	movwf	___wmul@multiplicand+1,c
  3496  00F332  0E03               	movlw	3
  3497  00F334  6E11               	movwf	___wmul@multiplicand,c
  3498  00F336  0E00               	movlw	0
  3499  00F338  6E0A               	movwf	___awdiv@divisor+1,c
  3500  00F33A  0E0A               	movlw	10
  3501  00F33C  6E09               	movwf	___awdiv@divisor,c
  3502  00F33E  0E00               	movlw	0
  3503  00F340  6E04               	movwf	___awmod@divisor+1,c
  3504  00F342  0E64               	movlw	100
  3505  00F344  6E03               	movwf	___awmod@divisor,c
  3506  00F346  502A               	movf	scale@scl,w,c
  3507  00F348  6E01               	movwf	___awmod@dividend,c
  3508  00F34A  6A02               	clrf	___awmod@dividend+1,c
  3509  00F34C  BE01               	btfsc	___awmod@dividend,7,c
  3510  00F34E  0602               	decf	___awmod@dividend+1,f,c
  3511  00F350  EC61  F06F         	call	___awmod	;wreg free
  3512  00F354  C001  F007         	movff	?___awmod,___awdiv@dividend
  3513  00F358  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3514  00F35C  EC17  F070         	call	___awdiv	;wreg free
  3515  00F360  0E09               	movlw	9
  3516  00F362  2407               	addwf	?___awdiv,w,c
  3517  00F364  6E0F               	movwf	___wmul@multiplier,c
  3518  00F366  0E00               	movlw	0
  3519  00F368  2008               	addwfc	?___awdiv+1,w,c
  3520  00F36A  6E10               	movwf	___wmul@multiplier+1,c
  3521  00F36C  EC1A  F06D         	call	___wmul	;wreg free
  3522  00F370  0E50               	movlw	low __powers_
  3523  00F372  240F               	addwf	?___wmul,w,c
  3524  00F374  6EF6               	movwf	tblptrl,c
  3525  00F376  0EFE               	movlw	high __powers_
  3526  00F378  2010               	addwfc	?___wmul+1,w,c
  3527  00F37A  6EF7               	movwf	tblptrh,c
  3528  00F37C                     	if	0	;There are less than 3 active tblptr bytes
  3529  00F37C                     	endif
  3530  00F37C  0009               	tblrd		*+
  3531  00F37E  CFF5 F018          	movff	tablat,___ftmul@f2
  3532  00F382  0009               	tblrd		*+
  3533  00F384  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3534  00F388  000A               	tblrd		*-
  3535  00F38A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3536  00F38E  0E00               	movlw	0
  3537  00F390  6E0A               	movwf	___awdiv@divisor+1,c
  3538  00F392  0E64               	movlw	100
  3539  00F394  6E09               	movwf	___awdiv@divisor,c
  3540  00F396  502A               	movf	scale@scl,w,c
  3541  00F398  6E07               	movwf	___awdiv@dividend,c
  3542  00F39A  6A08               	clrf	___awdiv@dividend+1,c
  3543  00F39C  BE07               	btfsc	___awdiv@dividend,7,c
  3544  00F39E  0608               	decf	___awdiv@dividend+1,f,c
  3545  00F3A0  EC17  F070         	call	___awdiv	;wreg free
  3546  00F3A4  0E12               	movlw	18
  3547  00F3A6  2407               	addwf	?___awdiv,w,c
  3548  00F3A8  6E0F               	movwf	___wmul@multiplier,c
  3549  00F3AA  0E00               	movlw	0
  3550  00F3AC  2008               	addwfc	?___awdiv+1,w,c
  3551  00F3AE  6E10               	movwf	___wmul@multiplier+1,c
  3552  00F3B0  0E00               	movlw	0
  3553  00F3B2  6E12               	movwf	___wmul@multiplicand+1,c
  3554  00F3B4  0E03               	movlw	3
  3555  00F3B6  6E11               	movwf	___wmul@multiplicand,c
  3556  00F3B8  EC1A  F06D         	call	___wmul	;wreg free
  3557  00F3BC  0E50               	movlw	low __powers_
  3558  00F3BE  240F               	addwf	?___wmul,w,c
  3559  00F3C0  6EF6               	movwf	tblptrl,c
  3560  00F3C2  0EFE               	movlw	high __powers_
  3561  00F3C4  2010               	addwfc	?___wmul+1,w,c
  3562  00F3C6  6EF7               	movwf	tblptrh,c
  3563  00F3C8                     	if	0	;There are less than 3 active tblptr bytes
  3564  00F3C8                     	endif
  3565  00F3C8  0009               	tblrd		*+
  3566  00F3CA  CFF5 F015          	movff	tablat,___ftmul@f1
  3567  00F3CE  0009               	tblrd		*+
  3568  00F3D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3569  00F3D4  000A               	tblrd		*-
  3570  00F3D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3571  00F3DA  ECAE  F072         	call	___ftmul	;wreg free
  3572  00F3DE  C015  F027         	movff	?___ftmul,_scale$2339
  3573  00F3E2  C016  F028         	movff	?___ftmul+1,_scale$2339+1
  3574  00F3E6  C017  F029         	movff	?___ftmul+2,_scale$2339+2
  3575                           
  3576                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3577  00F3EA  C027  F015         	movff	_scale$2339,___ftmul@f1
  3578  00F3EE  C028  F016         	movff	_scale$2339+1,___ftmul@f1+1
  3579  00F3F2  C029  F017         	movff	_scale$2339+2,___ftmul@f1+2
  3580  00F3F6  0E00               	movlw	0
  3581  00F3F8  6E12               	movwf	___wmul@multiplicand+1,c
  3582  00F3FA  0E03               	movlw	3
  3583  00F3FC  6E11               	movwf	___wmul@multiplicand,c
  3584  00F3FE  0E00               	movlw	0
  3585  00F400  6E04               	movwf	___awmod@divisor+1,c
  3586  00F402  0E0A               	movlw	10
  3587  00F404  6E03               	movwf	___awmod@divisor,c
  3588  00F406  502A               	movf	scale@scl,w,c
  3589  00F408  6E01               	movwf	___awmod@dividend,c
  3590  00F40A  6A02               	clrf	___awmod@dividend+1,c
  3591  00F40C  BE01               	btfsc	___awmod@dividend,7,c
  3592  00F40E  0602               	decf	___awmod@dividend+1,f,c
  3593  00F410  EC61  F06F         	call	___awmod	;wreg free
  3594  00F414  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3595  00F418  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3596  00F41C  EC1A  F06D         	call	___wmul	;wreg free
  3597  00F420  0E50               	movlw	low __powers_
  3598  00F422  240F               	addwf	?___wmul,w,c
  3599  00F424  6EF6               	movwf	tblptrl,c
  3600  00F426  0EFE               	movlw	high __powers_
  3601  00F428  2010               	addwfc	?___wmul+1,w,c
  3602  00F42A  6EF7               	movwf	tblptrh,c
  3603  00F42C                     	if	0	;There are less than 3 active tblptr bytes
  3604  00F42C                     	endif
  3605  00F42C  0009               	tblrd		*+
  3606  00F42E  CFF5 F018          	movff	tablat,___ftmul@f2
  3607  00F432  0009               	tblrd		*+
  3608  00F434  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3609  00F438  000A               	tblrd		*-
  3610  00F43A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3611  00F43E  ECAE  F072         	call	___ftmul	;wreg free
  3612  00F442  C015  F024         	movff	?___ftmul,?_scale
  3613  00F446  C016  F025         	movff	?___ftmul+1,?_scale+1
  3614  00F44A  C017  F026         	movff	?___ftmul+2,?_scale+2
  3615  00F44E  0012               	return	
  3616  00F450                     l2866:
  3617                           
  3618                           ;doprnt.c: 438: else if(scl > 10)
  3619  00F450  502A               	movf	scale@scl,w,c
  3620  00F452  0A80               	xorlw	128
  3621  00F454  0F75               	addlw	-139
  3622  00F456  A0D8               	btfss	status,0,c
  3623  00F458  D04D               	goto	l2872
  3624                           
  3625                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3626  00F45A  0E00               	movlw	0
  3627  00F45C  6E0A               	movwf	___awdiv@divisor+1,c
  3628  00F45E  0E0A               	movlw	10
  3629  00F460  6E09               	movwf	___awdiv@divisor,c
  3630  00F462  502A               	movf	scale@scl,w,c
  3631  00F464  6E07               	movwf	___awdiv@dividend,c
  3632  00F466  6A08               	clrf	___awdiv@dividend+1,c
  3633  00F468  BE07               	btfsc	___awdiv@dividend,7,c
  3634  00F46A  0608               	decf	___awdiv@dividend+1,f,c
  3635  00F46C  EC17  F070         	call	___awdiv	;wreg free
  3636  00F470  0E09               	movlw	9
  3637  00F472  2407               	addwf	?___awdiv,w,c
  3638  00F474  6E0F               	movwf	___wmul@multiplier,c
  3639  00F476  0E00               	movlw	0
  3640  00F478  2008               	addwfc	?___awdiv+1,w,c
  3641  00F47A  6E10               	movwf	___wmul@multiplier+1,c
  3642  00F47C  0E00               	movlw	0
  3643  00F47E  6E12               	movwf	___wmul@multiplicand+1,c
  3644  00F480  0E03               	movlw	3
  3645  00F482  6E11               	movwf	___wmul@multiplicand,c
  3646  00F484  EC1A  F06D         	call	___wmul	;wreg free
  3647  00F488  0E50               	movlw	low __powers_
  3648  00F48A  240F               	addwf	?___wmul,w,c
  3649  00F48C  6EF6               	movwf	tblptrl,c
  3650  00F48E  0EFE               	movlw	high __powers_
  3651  00F490  2010               	addwfc	?___wmul+1,w,c
  3652  00F492  6EF7               	movwf	tblptrh,c
  3653  00F494                     	if	0	;There are less than 3 active tblptr bytes
  3654  00F494                     	endif
  3655  00F494  0009               	tblrd		*+
  3656  00F496  CFF5 F015          	movff	tablat,___ftmul@f1
  3657  00F49A  0009               	tblrd		*+
  3658  00F49C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3659  00F4A0  000A               	tblrd		*-
  3660  00F4A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3661  00F4A6  0E00               	movlw	0
  3662  00F4A8  6E12               	movwf	___wmul@multiplicand+1,c
  3663  00F4AA  0E03               	movlw	3
  3664  00F4AC  6E11               	movwf	___wmul@multiplicand,c
  3665  00F4AE  0E00               	movlw	0
  3666  00F4B0  6E04               	movwf	___awmod@divisor+1,c
  3667  00F4B2  0E0A               	movlw	10
  3668  00F4B4  6E03               	movwf	___awmod@divisor,c
  3669  00F4B6  502A               	movf	scale@scl,w,c
  3670  00F4B8  6E01               	movwf	___awmod@dividend,c
  3671  00F4BA  6A02               	clrf	___awmod@dividend+1,c
  3672  00F4BC  BE01               	btfsc	___awmod@dividend,7,c
  3673  00F4BE  0602               	decf	___awmod@dividend+1,f,c
  3674  00F4C0  EC61  F06F         	call	___awmod	;wreg free
  3675  00F4C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3676  00F4C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3677  00F4CC  EC1A  F06D         	call	___wmul	;wreg free
  3678  00F4D0  0E50               	movlw	low __powers_
  3679  00F4D2  240F               	addwf	?___wmul,w,c
  3680  00F4D4  6EF6               	movwf	tblptrl,c
  3681  00F4D6  0EFE               	movlw	high __powers_
  3682  00F4D8  2010               	addwfc	?___wmul+1,w,c
  3683  00F4DA  6EF7               	movwf	tblptrh,c
  3684  00F4DC                     	if	0	;There are less than 3 active tblptr bytes
  3685  00F4DC                     	endif
  3686  00F4DC  0009               	tblrd		*+
  3687  00F4DE  CFF5 F018          	movff	tablat,___ftmul@f2
  3688  00F4E2  0009               	tblrd		*+
  3689  00F4E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3690  00F4E8  000A               	tblrd		*-
  3691  00F4EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3692  00F4EE  ECAE  F072         	call	___ftmul	;wreg free
  3693  00F4F2  D7A7               	goto	L5
  3694  00F4F4                     l2872:
  3695                           
  3696                           ;doprnt.c: 440: return _powers_[scl];
  3697  00F4F4  502A               	movf	scale@scl,w,c
  3698  00F4F6  0D03               	mullw	3
  3699  00F4F8  0E50               	movlw	low __powers_
  3700  00F4FA  24F3               	addwf	prodl,w,c
  3701  00F4FC  6EF6               	movwf	tblptrl,c
  3702  00F4FE  0EFE               	movlw	high __powers_
  3703  00F500  20F4               	addwfc	prodh,w,c
  3704  00F502  6EF7               	movwf	tblptrh,c
  3705  00F504                     	if	0	;There are less than 3 active tblptr bytes
  3706  00F504                     	endif
  3707  00F504  0009               	tblrd		*+
  3708  00F506  CFF5 F024          	movff	tablat,?_scale
  3709  00F50A  0009               	tblrd		*+
  3710  00F50C  CFF5 F025          	movff	tablat,?_scale+1
  3711  00F510  000A               	tblrd		*-
  3712  00F512  CFF5 F026          	movff	tablat,?_scale+2
  3713  00F516  0012               	return	
  3714  00F518                     __end_of_scale:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _isdigit *****************
  3733 ;; Defined at:
  3734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  c               1    wreg     unsigned char 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  c               1    2[COMRAM] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;		None               void
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;Total ram usage:        3 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_sprintf
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text4
  3762  00D9AE                     __ptext4:
  3763                           	opt stack 0
  3764  00D9AE                     _isdigit:
  3765                           	opt stack 29
  3766                           
  3767                           ;incstack = 0
  3768                           ;isdigit@c stored from wreg
  3769  00D9AE  6E03               	movwf	isdigit@c,c
  3770  00D9B0  0E00               	movlw	0
  3771  00D9B2  6E02               	movwf	_isdigit$1980,c
  3772  00D9B4  0E3A               	movlw	58
  3773  00D9B6  6003               	cpfslt	isdigit@c,c
  3774  00D9B8  D005               	goto	l2884
  3775  00D9BA  0E2F               	movlw	47
  3776  00D9BC  6403               	cpfsgt	isdigit@c,c
  3777  00D9BE  D002               	goto	l2884
  3778  00D9C0  0E01               	movlw	1
  3779  00D9C2  6E02               	movwf	_isdigit$1980,c
  3780  00D9C4                     l2884:
  3781  00D9C4  C002  F001         	movff	_isdigit$1980,??_isdigit
  3782  00D9C8  3001               	rrcf	??_isdigit,w,c
  3783  00D9CA  0012               	return	
  3784  00D9CC                     __end_of_isdigit:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           intcon	equ	0xFF2
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _fround *****************
  3803 ;; Defined at:
  3804 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  prec            1    wreg     unsigned char 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  prec            1   44[COMRAM] unsigned char 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  3   35[COMRAM] unsigned char 
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3818 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;Total ram usage:       10 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    2
  3825 ;; This function calls:
  3826 ;;		___awdiv
  3827 ;;		___awmod
  3828 ;;		___ftmul
  3829 ;;		___wmul
  3830 ;; This function is called by:
  3831 ;;		_sprintf
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text5
  3836  00EB6C                     __ptext5:
  3837                           	opt stack 0
  3838  00EB6C                     _fround:
  3839                           	opt stack 27
  3840                           
  3841                           ;incstack = 0
  3842                           ;fround@prec stored from wreg
  3843  00EB6C  6E2D               	movwf	fround@prec,c
  3844                           
  3845                           ;doprnt.c: 413: if(prec>=110)
  3846  00EB6E  0E6D               	movlw	109
  3847  00EB70  642D               	cpfsgt	fround@prec,c
  3848  00EB72  D09F               	goto	l2826
  3849                           
  3850                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3851  00EB74  0E00               	movlw	0
  3852  00EB76  6E12               	movwf	___wmul@multiplicand+1,c
  3853  00EB78  0E03               	movlw	3
  3854  00EB7A  6E11               	movwf	___wmul@multiplicand,c
  3855  00EB7C  0E00               	movlw	0
  3856  00EB7E  6E0A               	movwf	___awdiv@divisor+1,c
  3857  00EB80  0E0A               	movlw	10
  3858  00EB82  6E09               	movwf	___awdiv@divisor,c
  3859  00EB84  0E00               	movlw	0
  3860  00EB86  6E04               	movwf	___awmod@divisor+1,c
  3861  00EB88  0E64               	movlw	100
  3862  00EB8A  6E03               	movwf	___awmod@divisor,c
  3863  00EB8C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3864  00EB90  6A02               	clrf	___awmod@dividend+1,c
  3865  00EB92  EC61  F06F         	call	___awmod	;wreg free
  3866  00EB96  C001  F007         	movff	?___awmod,___awdiv@dividend
  3867  00EB9A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3868  00EB9E  EC17  F070         	call	___awdiv	;wreg free
  3869  00EBA2  0E09               	movlw	9
  3870  00EBA4  2407               	addwf	?___awdiv,w,c
  3871  00EBA6  6E0F               	movwf	___wmul@multiplier,c
  3872  00EBA8  0E00               	movlw	0
  3873  00EBAA  2008               	addwfc	?___awdiv+1,w,c
  3874  00EBAC  6E10               	movwf	___wmul@multiplier+1,c
  3875  00EBAE  EC1A  F06D         	call	___wmul	;wreg free
  3876  00EBB2  0E29               	movlw	low __npowers_
  3877  00EBB4  240F               	addwf	?___wmul,w,c
  3878  00EBB6  6EF6               	movwf	tblptrl,c
  3879  00EBB8  0EFE               	movlw	high __npowers_
  3880  00EBBA  2010               	addwfc	?___wmul+1,w,c
  3881  00EBBC  6EF7               	movwf	tblptrh,c
  3882  00EBBE                     	if	0	;There are less than 3 active tblptr bytes
  3883  00EBBE                     	endif
  3884  00EBBE  0009               	tblrd		*+
  3885  00EBC0  CFF5 F018          	movff	tablat,___ftmul@f2
  3886  00EBC4  0009               	tblrd		*+
  3887  00EBC6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3888  00EBCA  000A               	tblrd		*-
  3889  00EBCC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3890  00EBD0  0E00               	movlw	0
  3891  00EBD2  6E0A               	movwf	___awdiv@divisor+1,c
  3892  00EBD4  0E64               	movlw	100
  3893  00EBD6  6E09               	movwf	___awdiv@divisor,c
  3894  00EBD8  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3895  00EBDC  6A08               	clrf	___awdiv@dividend+1,c
  3896  00EBDE  EC17  F070         	call	___awdiv	;wreg free
  3897  00EBE2  0E12               	movlw	18
  3898  00EBE4  2407               	addwf	?___awdiv,w,c
  3899  00EBE6  6E0F               	movwf	___wmul@multiplier,c
  3900  00EBE8  0E00               	movlw	0
  3901  00EBEA  2008               	addwfc	?___awdiv+1,w,c
  3902  00EBEC  6E10               	movwf	___wmul@multiplier+1,c
  3903  00EBEE  0E00               	movlw	0
  3904  00EBF0  6E12               	movwf	___wmul@multiplicand+1,c
  3905  00EBF2  0E03               	movlw	3
  3906  00EBF4  6E11               	movwf	___wmul@multiplicand,c
  3907  00EBF6  EC1A  F06D         	call	___wmul	;wreg free
  3908  00EBFA  0E29               	movlw	low __npowers_
  3909  00EBFC  240F               	addwf	?___wmul,w,c
  3910  00EBFE  6EF6               	movwf	tblptrl,c
  3911  00EC00  0EFE               	movlw	high __npowers_
  3912  00EC02  2010               	addwfc	?___wmul+1,w,c
  3913  00EC04  6EF7               	movwf	tblptrh,c
  3914  00EC06                     	if	0	;There are less than 3 active tblptr bytes
  3915  00EC06                     	endif
  3916  00EC06  0009               	tblrd		*+
  3917  00EC08  CFF5 F015          	movff	tablat,___ftmul@f1
  3918  00EC0C  0009               	tblrd		*+
  3919  00EC0E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3920  00EC12  000A               	tblrd		*-
  3921  00EC14  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3922  00EC18  ECAE  F072         	call	___ftmul	;wreg free
  3923  00EC1C  C015  F02A         	movff	?___ftmul,_fround$2337
  3924  00EC20  C016  F02B         	movff	?___ftmul+1,_fround$2337+1
  3925  00EC24  C017  F02C         	movff	?___ftmul+2,_fround$2337+2
  3926                           
  3927                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3928  00EC28  0E00               	movlw	0
  3929  00EC2A  6E12               	movwf	___wmul@multiplicand+1,c
  3930  00EC2C  0E03               	movlw	3
  3931  00EC2E  6E11               	movwf	___wmul@multiplicand,c
  3932  00EC30  0E00               	movlw	0
  3933  00EC32  6E04               	movwf	___awmod@divisor+1,c
  3934  00EC34  0E0A               	movlw	10
  3935  00EC36  6E03               	movwf	___awmod@divisor,c
  3936  00EC38  C02D  F001         	movff	fround@prec,___awmod@dividend
  3937  00EC3C  6A02               	clrf	___awmod@dividend+1,c
  3938  00EC3E  EC61  F06F         	call	___awmod	;wreg free
  3939  00EC42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3940  00EC46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3941  00EC4A  EC1A  F06D         	call	___wmul	;wreg free
  3942  00EC4E  0E29               	movlw	low __npowers_
  3943  00EC50  240F               	addwf	?___wmul,w,c
  3944  00EC52  6EF6               	movwf	tblptrl,c
  3945  00EC54  0EFE               	movlw	high __npowers_
  3946  00EC56  2010               	addwfc	?___wmul+1,w,c
  3947  00EC58  6EF7               	movwf	tblptrh,c
  3948  00EC5A                     	if	0	;There are less than 3 active tblptr bytes
  3949  00EC5A                     	endif
  3950  00EC5A  0009               	tblrd		*+
  3951  00EC5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3952  00EC60  0009               	tblrd		*+
  3953  00EC62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3954  00EC66  000A               	tblrd		*-
  3955  00EC68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3956  00EC6C  C02A  F015         	movff	_fround$2337,___ftmul@f1
  3957  00EC70  C02B  F016         	movff	_fround$2337+1,___ftmul@f1+1
  3958  00EC74  C02C  F017         	movff	_fround$2337+2,___ftmul@f1+2
  3959  00EC78  ECAE  F072         	call	___ftmul	;wreg free
  3960  00EC7C  C015  F027         	movff	?___ftmul,_fround$2338
  3961  00EC80  C016  F028         	movff	?___ftmul+1,_fround$2338+1
  3962  00EC84  C017  F029         	movff	?___ftmul+2,_fround$2338+2
  3963                           
  3964                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3965  00EC88  C027  F015         	movff	_fround$2338,___ftmul@f1
  3966  00EC8C  C028  F016         	movff	_fround$2338+1,___ftmul@f1+1
  3967  00EC90  C029  F017         	movff	_fround$2338+2,___ftmul@f1+2
  3968  00EC94  0E00               	movlw	0
  3969  00EC96  6E18               	movwf	___ftmul@f2,c
  3970  00EC98  0E00               	movlw	0
  3971  00EC9A  6E19               	movwf	___ftmul@f2+1,c
  3972  00EC9C  0E3F               	movlw	63
  3973  00EC9E  6E1A               	movwf	___ftmul@f2+2,c
  3974  00ECA0  ECAE  F072         	call	___ftmul	;wreg free
  3975  00ECA4  C015  F024         	movff	?___ftmul,?_fround
  3976  00ECA8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3977  00ECAC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3978  00ECB0  0012               	return	
  3979  00ECB2                     l2826:
  3980                           
  3981                           ;doprnt.c: 415: else if(prec > 10)
  3982  00ECB2  0E0A               	movlw	10
  3983  00ECB4  642D               	cpfsgt	fround@prec,c
  3984  00ECB6  D05D               	goto	l2834
  3985                           
  3986                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3987  00ECB8  0E00               	movlw	0
  3988  00ECBA  6E12               	movwf	___wmul@multiplicand+1,c
  3989  00ECBC  0E03               	movlw	3
  3990  00ECBE  6E11               	movwf	___wmul@multiplicand,c
  3991  00ECC0  0E00               	movlw	0
  3992  00ECC2  6E04               	movwf	___awmod@divisor+1,c
  3993  00ECC4  0E0A               	movlw	10
  3994  00ECC6  6E03               	movwf	___awmod@divisor,c
  3995  00ECC8  C02D  F001         	movff	fround@prec,___awmod@dividend
  3996  00ECCC  6A02               	clrf	___awmod@dividend+1,c
  3997  00ECCE  EC61  F06F         	call	___awmod	;wreg free
  3998  00ECD2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3999  00ECD6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4000  00ECDA  EC1A  F06D         	call	___wmul	;wreg free
  4001  00ECDE  0E29               	movlw	low __npowers_
  4002  00ECE0  240F               	addwf	?___wmul,w,c
  4003  00ECE2  6EF6               	movwf	tblptrl,c
  4004  00ECE4  0EFE               	movlw	high __npowers_
  4005  00ECE6  2010               	addwfc	?___wmul+1,w,c
  4006  00ECE8  6EF7               	movwf	tblptrh,c
  4007  00ECEA                     	if	0	;There are less than 3 active tblptr bytes
  4008  00ECEA                     	endif
  4009  00ECEA  0009               	tblrd		*+
  4010  00ECEC  CFF5 F018          	movff	tablat,___ftmul@f2
  4011  00ECF0  0009               	tblrd		*+
  4012  00ECF2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4013  00ECF6  000A               	tblrd		*-
  4014  00ECF8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4015  00ECFC  0E00               	movlw	0
  4016  00ECFE  6E0A               	movwf	___awdiv@divisor+1,c
  4017  00ED00  0E0A               	movlw	10
  4018  00ED02  6E09               	movwf	___awdiv@divisor,c
  4019  00ED04  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4020  00ED08  6A08               	clrf	___awdiv@dividend+1,c
  4021  00ED0A  EC17  F070         	call	___awdiv	;wreg free
  4022  00ED0E  0E09               	movlw	9
  4023  00ED10  2407               	addwf	?___awdiv,w,c
  4024  00ED12  6E0F               	movwf	___wmul@multiplier,c
  4025  00ED14  0E00               	movlw	0
  4026  00ED16  2008               	addwfc	?___awdiv+1,w,c
  4027  00ED18  6E10               	movwf	___wmul@multiplier+1,c
  4028  00ED1A  0E00               	movlw	0
  4029  00ED1C  6E12               	movwf	___wmul@multiplicand+1,c
  4030  00ED1E  0E03               	movlw	3
  4031  00ED20  6E11               	movwf	___wmul@multiplicand,c
  4032  00ED22  EC1A  F06D         	call	___wmul	;wreg free
  4033  00ED26  0E29               	movlw	low __npowers_
  4034  00ED28  240F               	addwf	?___wmul,w,c
  4035  00ED2A  6EF6               	movwf	tblptrl,c
  4036  00ED2C  0EFE               	movlw	high __npowers_
  4037  00ED2E  2010               	addwfc	?___wmul+1,w,c
  4038  00ED30  6EF7               	movwf	tblptrh,c
  4039  00ED32                     	if	0	;There are less than 3 active tblptr bytes
  4040  00ED32                     	endif
  4041  00ED32  0009               	tblrd		*+
  4042  00ED34  CFF5 F015          	movff	tablat,___ftmul@f1
  4043  00ED38  0009               	tblrd		*+
  4044  00ED3A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4045  00ED3E  000A               	tblrd		*-
  4046  00ED40  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4047  00ED44  ECAE  F072         	call	___ftmul	;wreg free
  4048  00ED48  C015  F02A         	movff	?___ftmul,_fround$2337
  4049  00ED4C  C016  F02B         	movff	?___ftmul+1,_fround$2337+1
  4050  00ED50  C017  F02C         	movff	?___ftmul+2,_fround$2337+2
  4051                           
  4052                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4053  00ED54  C02A  F015         	movff	_fround$2337,___ftmul@f1
  4054  00ED58  C02B  F016         	movff	_fround$2337+1,___ftmul@f1+1
  4055  00ED5C  C02C  F017         	movff	_fround$2337+2,___ftmul@f1+2
  4056  00ED60  0E00               	movlw	0
  4057  00ED62  6E18               	movwf	___ftmul@f2,c
  4058  00ED64  0E00               	movlw	0
  4059  00ED66  6E19               	movwf	___ftmul@f2+1,c
  4060  00ED68  0E3F               	movlw	63
  4061  00ED6A  6E1A               	movwf	___ftmul@f2+2,c
  4062  00ED6C  ECAE  F072         	call	___ftmul	;wreg free
  4063  00ED70  D799               	goto	L6
  4064  00ED72                     l2834:
  4065                           
  4066                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4067  00ED72  502D               	movf	fround@prec,w,c
  4068  00ED74  0D03               	mullw	3
  4069  00ED76  0E29               	movlw	low __npowers_
  4070  00ED78  24F3               	addwf	prodl,w,c
  4071  00ED7A  6EF6               	movwf	tblptrl,c
  4072  00ED7C  0EFE               	movlw	high __npowers_
  4073  00ED7E  20F4               	addwfc	prodh,w,c
  4074  00ED80  6EF7               	movwf	tblptrh,c
  4075  00ED82                     	if	0	;There are less than 3 active tblptr bytes
  4076  00ED82                     	endif
  4077  00ED82  0009               	tblrd		*+
  4078  00ED84  CFF5 F015          	movff	tablat,___ftmul@f1
  4079  00ED88  0009               	tblrd		*+
  4080  00ED8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4081  00ED8E  000A               	tblrd		*-
  4082  00ED90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4083  00ED94  0E00               	movlw	0
  4084  00ED96  6E18               	movwf	___ftmul@f2,c
  4085  00ED98  0E00               	movlw	0
  4086  00ED9A  6E19               	movwf	___ftmul@f2+1,c
  4087  00ED9C  0E3F               	movlw	63
  4088  00ED9E  6E1A               	movwf	___ftmul@f2+2,c
  4089  00EDA0  ECAE  F072         	call	___ftmul	;wreg free
  4090  00EDA4  C015  F024         	movff	?___ftmul,?_fround
  4091  00EDA8  C016  F025         	movff	?___ftmul+1,?_fround+1
  4092  00EDAC  C017  F026         	movff	?___ftmul+2,?_fround+2
  4093  00EDB0  0012               	return	
  4094  00EDB2                     __end_of_fround:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           postinc0	equ	0xFEE
  4104                           wreg	equ	0xFE8
  4105                           indf2	equ	0xFDF
  4106                           postinc2	equ	0xFDE
  4107                           postdec2	equ	0xFDD
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function ___wmul *****************
  4113 ;; Defined at:
  4114 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  multiplier      2   14[COMRAM] unsigned int 
  4117 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  product         2   18[COMRAM] unsigned int 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  2   14[COMRAM] unsigned int 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, prodl, prodh
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;Total ram usage:        6 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; This function calls:
  4136 ;;		Nothing
  4137 ;; This function is called by:
  4138 ;;		_fround
  4139 ;;		_scale
  4140 ;;		_sprintf
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text6
  4145  00DA34                     __ptext6:
  4146                           	opt stack 0
  4147  00DA34                     ___wmul:
  4148                           	opt stack 28
  4149                           
  4150                           ;incstack = 0
  4151  00DA34  500F               	movf	___wmul@multiplier,w,c
  4152  00DA36  0211               	mulwf	___wmul@multiplicand,c
  4153  00DA38  CFF3 F013          	movff	prodl,___wmul@product
  4154  00DA3C  CFF4 F014          	movff	prodh,___wmul@product+1
  4155  00DA40  500F               	movf	___wmul@multiplier,w,c
  4156  00DA42  0212               	mulwf	___wmul@multiplicand+1,c
  4157  00DA44  50F3               	movf	prodl,w,c
  4158  00DA46  2614               	addwf	___wmul@product+1,f,c
  4159  00DA48  5010               	movf	___wmul@multiplier+1,w,c
  4160  00DA4A  0211               	mulwf	___wmul@multiplicand,c
  4161  00DA4C  50F3               	movf	prodl,w,c
  4162  00DA4E  2614               	addwf	___wmul@product+1,f,c
  4163  00DA50  C013  F00F         	movff	___wmul@product,?___wmul
  4164  00DA54  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4165  00DA58  0012               	return	
  4166  00DA5A                     __end_of___wmul:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           indf2	equ	0xFDF
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function ___ftmul *****************
  4185 ;; Defined at:
  4186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  f1              3   20[COMRAM] float 
  4189 ;;  f2              3   23[COMRAM] float 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4192 ;;  sign            1   34[COMRAM] unsigned char 
  4193 ;;  cntr            1   33[COMRAM] unsigned char 
  4194 ;;  exp             1   29[COMRAM] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  3   20[COMRAM] float 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:       15 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    1
  4211 ;; This function calls:
  4212 ;;		___ftpack
  4213 ;; This function is called by:
  4214 ;;		_main
  4215 ;;		_fround
  4216 ;;		_scale
  4217 ;;		_sprintf
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text7
  4222  00E55C                     __ptext7:
  4223                           	opt stack 0
  4224  00E55C                     ___ftmul:
  4225                           	opt stack 27
  4226                           
  4227                           ;incstack = 0
  4228  00E55C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4229  00E560  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4230  00E562  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4231  00E564  3416               	rlcf	___ftmul@f1+1,w,c
  4232  00E566  361B               	rlcf	??___ftmul& (0+255),f,c
  4233  00E568  E301               	bnc	u2091
  4234  00E56A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4235  00E56C                     u2091:
  4236  00E56C  501B               	movf	??___ftmul,w,c
  4237  00E56E  6E1E               	movwf	___ftmul@exp,c
  4238  00E570  501E               	movf	___ftmul@exp,w,c
  4239  00E572  A4D8               	btfss	status,2,c
  4240  00E574  D007               	goto	l2534
  4241  00E576  0E00               	movlw	0
  4242  00E578  6E15               	movwf	?___ftmul,c
  4243  00E57A  0E00               	movlw	0
  4244  00E57C  6E16               	movwf	?___ftmul+1,c
  4245  00E57E  0E00               	movlw	0
  4246  00E580  6E17               	movwf	?___ftmul+2,c
  4247  00E582  0012               	return	
  4248  00E584                     l2534:
  4249  00E584  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4250  00E588  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4251  00E58A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4252  00E58C  3419               	rlcf	___ftmul@f2+1,w,c
  4253  00E58E  361B               	rlcf	??___ftmul& (0+255),f,c
  4254  00E590  E301               	bnc	u2111
  4255  00E592  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4256  00E594                     u2111:
  4257  00E594  501B               	movf	??___ftmul,w,c
  4258  00E596  6E23               	movwf	___ftmul@sign,c
  4259  00E598  5023               	movf	___ftmul@sign,w,c
  4260  00E59A  A4D8               	btfss	status,2,c
  4261  00E59C  D007               	goto	l2540
  4262  00E59E  0E00               	movlw	0
  4263  00E5A0  6E15               	movwf	?___ftmul,c
  4264  00E5A2  0E00               	movlw	0
  4265  00E5A4  6E16               	movwf	?___ftmul+1,c
  4266  00E5A6  0E00               	movlw	0
  4267  00E5A8  6E17               	movwf	?___ftmul+2,c
  4268  00E5AA  0012               	return	
  4269  00E5AC                     l2540:
  4270  00E5AC  5023               	movf	___ftmul@sign,w,c
  4271  00E5AE  0F7B               	addlw	123
  4272  00E5B0  261E               	addwf	___ftmul@exp,f,c
  4273  00E5B2  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4274  00E5B6  501A               	movf	___ftmul@f2+2,w,c
  4275  00E5B8  1A23               	xorwf	___ftmul@sign,f,c
  4276  00E5BA  0E80               	movlw	128
  4277  00E5BC  1623               	andwf	___ftmul@sign,f,c
  4278  00E5BE  8E16               	bsf	___ftmul@f1+1,7,c
  4279  00E5C0  8E19               	bsf	___ftmul@f2+1,7,c
  4280  00E5C2  0EFF               	movlw	255
  4281  00E5C4  1618               	andwf	___ftmul@f2,f,c
  4282  00E5C6  0EFF               	movlw	255
  4283  00E5C8  1619               	andwf	___ftmul@f2+1,f,c
  4284  00E5CA  0E00               	movlw	0
  4285  00E5CC  161A               	andwf	___ftmul@f2+2,f,c
  4286  00E5CE  0E00               	movlw	0
  4287  00E5D0  6E1F               	movwf	___ftmul@f3_as_product,c
  4288  00E5D2  0E00               	movlw	0
  4289  00E5D4  6E20               	movwf	___ftmul@f3_as_product+1,c
  4290  00E5D6  0E00               	movlw	0
  4291  00E5D8  6E21               	movwf	___ftmul@f3_as_product+2,c
  4292  00E5DA  0E07               	movlw	7
  4293  00E5DC  6E22               	movwf	___ftmul@cntr,c
  4294  00E5DE                     l2554:
  4295  00E5DE  A015               	btfss	___ftmul@f1,0,c
  4296  00E5E0  D006               	goto	l2558
  4297  00E5E2  5018               	movf	___ftmul@f2,w,c
  4298  00E5E4  261F               	addwf	___ftmul@f3_as_product,f,c
  4299  00E5E6  5019               	movf	___ftmul@f2+1,w,c
  4300  00E5E8  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4301  00E5EA  501A               	movf	___ftmul@f2+2,w,c
  4302  00E5EC  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4303  00E5EE                     l2558:
  4304  00E5EE  90D8               	bcf	status,0,c
  4305  00E5F0  3217               	rrcf	___ftmul@f1+2,f,c
  4306  00E5F2  3216               	rrcf	___ftmul@f1+1,f,c
  4307  00E5F4  3215               	rrcf	___ftmul@f1,f,c
  4308  00E5F6  90D8               	bcf	status,0,c
  4309  00E5F8  3618               	rlcf	___ftmul@f2,f,c
  4310  00E5FA  3619               	rlcf	___ftmul@f2+1,f,c
  4311  00E5FC  361A               	rlcf	___ftmul@f2+2,f,c
  4312  00E5FE  2E22               	decfsz	___ftmul@cntr,f,c
  4313  00E600  D7EE               	goto	l2554
  4314  00E602  0E09               	movlw	9
  4315  00E604  6E22               	movwf	___ftmul@cntr,c
  4316  00E606                     l2564:
  4317  00E606  A015               	btfss	___ftmul@f1,0,c
  4318  00E608  D006               	goto	l2568
  4319  00E60A  5018               	movf	___ftmul@f2,w,c
  4320  00E60C  261F               	addwf	___ftmul@f3_as_product,f,c
  4321  00E60E  5019               	movf	___ftmul@f2+1,w,c
  4322  00E610  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4323  00E612  501A               	movf	___ftmul@f2+2,w,c
  4324  00E614  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4325  00E616                     l2568:
  4326  00E616  90D8               	bcf	status,0,c
  4327  00E618  3217               	rrcf	___ftmul@f1+2,f,c
  4328  00E61A  3216               	rrcf	___ftmul@f1+1,f,c
  4329  00E61C  3215               	rrcf	___ftmul@f1,f,c
  4330  00E61E  90D8               	bcf	status,0,c
  4331  00E620  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4332  00E622  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4333  00E624  321F               	rrcf	___ftmul@f3_as_product,f,c
  4334  00E626  2E22               	decfsz	___ftmul@cntr,f,c
  4335  00E628  D7EE               	goto	l2564
  4336  00E62A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4337  00E62E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4338  00E632  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4339  00E636  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4340  00E63A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4341  00E63E  ECF0  F070         	call	___ftpack	;wreg free
  4342  00E642  C001  F015         	movff	?___ftpack,?___ftmul
  4343  00E646  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4344  00E64A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4345  00E64E  0012               	return	
  4346  00E650                     __end_of___ftmul:
  4347                           	opt stack 0
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           postinc0	equ	0xFEE
  4356                           wreg	equ	0xFE8
  4357                           indf2	equ	0xFDF
  4358                           postinc2	equ	0xFDE
  4359                           postdec2	equ	0xFDD
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function ___awmod *****************
  4365 ;; Defined at:
  4366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  dividend        2    0[COMRAM] int 
  4369 ;;  divisor         2    2[COMRAM] int 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  sign            1    5[COMRAM] unsigned char 
  4372 ;;  counter         1    4[COMRAM] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  2    0[COMRAM] int 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;Total ram usage:        6 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_fround
  4392 ;;		_scale
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text8
  4397  00DEC2                     __ptext8:
  4398                           	opt stack 0
  4399  00DEC2                     ___awmod:
  4400                           	opt stack 28
  4401                           
  4402                           ;incstack = 0
  4403  00DEC2  0E00               	movlw	0
  4404  00DEC4  6E06               	movwf	___awmod@sign,c
  4405  00DEC6  AE02               	btfss	___awmod@dividend+1,7,c
  4406  00DEC8  D006               	goto	l2628
  4407  00DECA  6C01               	negf	___awmod@dividend,c
  4408  00DECC  1E02               	comf	___awmod@dividend+1,f,c
  4409  00DECE  B0D8               	btfsc	status,0,c
  4410  00DED0  2A02               	incf	___awmod@dividend+1,f,c
  4411  00DED2  0E01               	movlw	1
  4412  00DED4  6E06               	movwf	___awmod@sign,c
  4413  00DED6                     l2628:
  4414  00DED6  AE04               	btfss	___awmod@divisor+1,7,c
  4415  00DED8  D004               	goto	l2632
  4416  00DEDA  6C03               	negf	___awmod@divisor,c
  4417  00DEDC  1E04               	comf	___awmod@divisor+1,f,c
  4418  00DEDE  B0D8               	btfsc	status,0,c
  4419  00DEE0  2A04               	incf	___awmod@divisor+1,f,c
  4420  00DEE2                     l2632:
  4421  00DEE2  5003               	movf	___awmod@divisor,w,c
  4422  00DEE4  1004               	iorwf	___awmod@divisor+1,w,c
  4423  00DEE6  B4D8               	btfsc	status,2,c
  4424  00DEE8  D018               	goto	l2648
  4425  00DEEA  0E01               	movlw	1
  4426  00DEEC  6E05               	movwf	___awmod@counter,c
  4427  00DEEE  D004               	goto	l2638
  4428  00DEF0                     l2636:
  4429  00DEF0  90D8               	bcf	status,0,c
  4430  00DEF2  3603               	rlcf	___awmod@divisor,f,c
  4431  00DEF4  3604               	rlcf	___awmod@divisor+1,f,c
  4432  00DEF6  2A05               	incf	___awmod@counter,f,c
  4433  00DEF8                     l2638:
  4434  00DEF8  AE04               	btfss	___awmod@divisor+1,7,c
  4435  00DEFA  D7FA               	goto	l2636
  4436  00DEFC                     l2640:
  4437  00DEFC  5003               	movf	___awmod@divisor,w,c
  4438  00DEFE  5C01               	subwf	___awmod@dividend,w,c
  4439  00DF00  5004               	movf	___awmod@divisor+1,w,c
  4440  00DF02  5802               	subwfb	___awmod@dividend+1,w,c
  4441  00DF04  A0D8               	btfss	status,0,c
  4442  00DF06  D004               	goto	l2644
  4443  00DF08  5003               	movf	___awmod@divisor,w,c
  4444  00DF0A  5E01               	subwf	___awmod@dividend,f,c
  4445  00DF0C  5004               	movf	___awmod@divisor+1,w,c
  4446  00DF0E  5A02               	subwfb	___awmod@dividend+1,f,c
  4447  00DF10                     l2644:
  4448  00DF10  90D8               	bcf	status,0,c
  4449  00DF12  3204               	rrcf	___awmod@divisor+1,f,c
  4450  00DF14  3203               	rrcf	___awmod@divisor,f,c
  4451  00DF16  2E05               	decfsz	___awmod@counter,f,c
  4452  00DF18  D7F1               	goto	l2640
  4453  00DF1A                     l2648:
  4454  00DF1A  5006               	movf	___awmod@sign,w,c
  4455  00DF1C  B4D8               	btfsc	status,2,c
  4456  00DF1E  D004               	goto	l2652
  4457  00DF20  6C01               	negf	___awmod@dividend,c
  4458  00DF22  1E02               	comf	___awmod@dividend+1,f,c
  4459  00DF24  B0D8               	btfsc	status,0,c
  4460  00DF26  2A02               	incf	___awmod@dividend+1,f,c
  4461  00DF28                     l2652:
  4462  00DF28  C001  F001         	movff	___awmod@dividend,?___awmod
  4463  00DF2C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4464  00DF30  0012               	return	
  4465  00DF32                     __end_of___awmod:
  4466                           	opt stack 0
  4467                           tblptru	equ	0xFF8
  4468                           tblptrh	equ	0xFF7
  4469                           tblptrl	equ	0xFF6
  4470                           tablat	equ	0xFF5
  4471                           prodh	equ	0xFF4
  4472                           prodl	equ	0xFF3
  4473                           intcon	equ	0xFF2
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function ___awdiv *****************
  4484 ;; Defined at:
  4485 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  dividend        2    6[COMRAM] int 
  4488 ;;  divisor         2    8[COMRAM] int 
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;  quotient        2   12[COMRAM] int 
  4491 ;;  sign            1   11[COMRAM] unsigned char 
  4492 ;;  counter         1   10[COMRAM] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  2    6[COMRAM] int 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:        8 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_fround
  4512 ;;		_scale
  4513 ;;		_sprintf
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text9
  4518  00E02E                     __ptext9:
  4519                           	opt stack 0
  4520  00E02E                     ___awdiv:
  4521                           	opt stack 28
  4522                           
  4523                           ;incstack = 0
  4524  00E02E  0E00               	movlw	0
  4525  00E030  6E0C               	movwf	___awdiv@sign,c
  4526  00E032  AE0A               	btfss	___awdiv@divisor+1,7,c
  4527  00E034  D006               	goto	l2584
  4528  00E036  6C09               	negf	___awdiv@divisor,c
  4529  00E038  1E0A               	comf	___awdiv@divisor+1,f,c
  4530  00E03A  B0D8               	btfsc	status,0,c
  4531  00E03C  2A0A               	incf	___awdiv@divisor+1,f,c
  4532  00E03E  0E01               	movlw	1
  4533  00E040  6E0C               	movwf	___awdiv@sign,c
  4534  00E042                     l2584:
  4535  00E042  AE08               	btfss	___awdiv@dividend+1,7,c
  4536  00E044  D006               	goto	l2590
  4537  00E046  6C07               	negf	___awdiv@dividend,c
  4538  00E048  1E08               	comf	___awdiv@dividend+1,f,c
  4539  00E04A  B0D8               	btfsc	status,0,c
  4540  00E04C  2A08               	incf	___awdiv@dividend+1,f,c
  4541  00E04E  0E01               	movlw	1
  4542  00E050  1A0C               	xorwf	___awdiv@sign,f,c
  4543  00E052                     l2590:
  4544  00E052  0E00               	movlw	0
  4545  00E054  6E0E               	movwf	___awdiv@quotient+1,c
  4546  00E056  0E00               	movlw	0
  4547  00E058  6E0D               	movwf	___awdiv@quotient,c
  4548  00E05A  5009               	movf	___awdiv@divisor,w,c
  4549  00E05C  100A               	iorwf	___awdiv@divisor+1,w,c
  4550  00E05E  B4D8               	btfsc	status,2,c
  4551  00E060  D01C               	goto	l2612
  4552  00E062  0E01               	movlw	1
  4553  00E064  6E0B               	movwf	___awdiv@counter,c
  4554  00E066  D004               	goto	l2598
  4555  00E068                     l2596:
  4556  00E068  90D8               	bcf	status,0,c
  4557  00E06A  3609               	rlcf	___awdiv@divisor,f,c
  4558  00E06C  360A               	rlcf	___awdiv@divisor+1,f,c
  4559  00E06E  2A0B               	incf	___awdiv@counter,f,c
  4560  00E070                     l2598:
  4561  00E070  AE0A               	btfss	___awdiv@divisor+1,7,c
  4562  00E072  D7FA               	goto	l2596
  4563  00E074                     l2600:
  4564  00E074  90D8               	bcf	status,0,c
  4565  00E076  360D               	rlcf	___awdiv@quotient,f,c
  4566  00E078  360E               	rlcf	___awdiv@quotient+1,f,c
  4567  00E07A  5009               	movf	___awdiv@divisor,w,c
  4568  00E07C  5C07               	subwf	___awdiv@dividend,w,c
  4569  00E07E  500A               	movf	___awdiv@divisor+1,w,c
  4570  00E080  5808               	subwfb	___awdiv@dividend+1,w,c
  4571  00E082  A0D8               	btfss	status,0,c
  4572  00E084  D005               	goto	l2608
  4573  00E086  5009               	movf	___awdiv@divisor,w,c
  4574  00E088  5E07               	subwf	___awdiv@dividend,f,c
  4575  00E08A  500A               	movf	___awdiv@divisor+1,w,c
  4576  00E08C  5A08               	subwfb	___awdiv@dividend+1,f,c
  4577  00E08E  800D               	bsf	___awdiv@quotient,0,c
  4578  00E090                     l2608:
  4579  00E090  90D8               	bcf	status,0,c
  4580  00E092  320A               	rrcf	___awdiv@divisor+1,f,c
  4581  00E094  3209               	rrcf	___awdiv@divisor,f,c
  4582  00E096  2E0B               	decfsz	___awdiv@counter,f,c
  4583  00E098  D7ED               	goto	l2600
  4584  00E09A                     l2612:
  4585  00E09A  500C               	movf	___awdiv@sign,w,c
  4586  00E09C  B4D8               	btfsc	status,2,c
  4587  00E09E  D004               	goto	l2616
  4588  00E0A0  6C0D               	negf	___awdiv@quotient,c
  4589  00E0A2  1E0E               	comf	___awdiv@quotient+1,f,c
  4590  00E0A4  B0D8               	btfsc	status,0,c
  4591  00E0A6  2A0E               	incf	___awdiv@quotient+1,f,c
  4592  00E0A8                     l2616:
  4593  00E0A8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4594  00E0AC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4595  00E0B0  0012               	return	
  4596  00E0B2                     __end_of___awdiv:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function __tdiv_to_l_ *****************
  4615 ;; Defined at:
  4616 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  f1              3    0[COMRAM] float 
  4619 ;;  f2              3    3[COMRAM] float 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  quot            4    9[COMRAM] unsigned long 
  4622 ;;  exp1            1   14[COMRAM] unsigned char 
  4623 ;;  cntr            1   13[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  4    0[COMRAM] unsigned long 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:       15 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_sprintf
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text10
  4647  00E88E                     __ptext10:
  4648                           	opt stack 0
  4649  00E88E                     __tdiv_to_l_:
  4650                           	opt stack 29
  4651                           
  4652                           ;incstack = 0
  4653  00E88E  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4654  00E892  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4655  00E894  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4656  00E896  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4657  00E898  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4658  00E89A  E301               	bnc	u2541
  4659  00E89C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4660  00E89E                     u2541:
  4661  00E89E  5007               	movf	??__tdiv_to_l_,w,c
  4662  00E8A0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4663  00E8A2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4664  00E8A4  A4D8               	btfss	status,2,c
  4665  00E8A6  D009               	goto	l2894
  4666  00E8A8  0E00               	movlw	0
  4667  00E8AA  6E01               	movwf	?__tdiv_to_l_,c
  4668  00E8AC  0E00               	movlw	0
  4669  00E8AE  6E02               	movwf	?__tdiv_to_l_+1,c
  4670  00E8B0  0E00               	movlw	0
  4671  00E8B2  6E03               	movwf	?__tdiv_to_l_+2,c
  4672  00E8B4  0E00               	movlw	0
  4673  00E8B6  6E04               	movwf	?__tdiv_to_l_+3,c
  4674  00E8B8  0012               	return	
  4675  00E8BA                     l2894:
  4676  00E8BA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4677  00E8BE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4678  00E8C0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4679  00E8C2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4680  00E8C4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4681  00E8C6  E301               	bnc	u2561
  4682  00E8C8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4683  00E8CA                     u2561:
  4684  00E8CA  5007               	movf	??__tdiv_to_l_,w,c
  4685  00E8CC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4686  00E8CE  500E               	movf	__tdiv_to_l_@cntr,w,c
  4687  00E8D0  A4D8               	btfss	status,2,c
  4688  00E8D2  D009               	goto	l2900
  4689  00E8D4  0E00               	movlw	0
  4690  00E8D6  6E01               	movwf	?__tdiv_to_l_,c
  4691  00E8D8  0E00               	movlw	0
  4692  00E8DA  6E02               	movwf	?__tdiv_to_l_+1,c
  4693  00E8DC  0E00               	movlw	0
  4694  00E8DE  6E03               	movwf	?__tdiv_to_l_+2,c
  4695  00E8E0  0E00               	movlw	0
  4696  00E8E2  6E04               	movwf	?__tdiv_to_l_+3,c
  4697  00E8E4  0012               	return	
  4698  00E8E6                     l2900:
  4699  00E8E6  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4700  00E8E8  0EFF               	movlw	255
  4701  00E8EA  1601               	andwf	__tdiv_to_l_@f1,f,c
  4702  00E8EC  0EFF               	movlw	255
  4703  00E8EE  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4704  00E8F0  0E00               	movlw	0
  4705  00E8F2  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4706  00E8F4  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4707  00E8F6  0EFF               	movlw	255
  4708  00E8F8  1604               	andwf	__tdiv_to_l_@f2,f,c
  4709  00E8FA  0EFF               	movlw	255
  4710  00E8FC  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4711  00E8FE  0E00               	movlw	0
  4712  00E900  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4713  00E902  0E00               	movlw	0
  4714  00E904  6E0A               	movwf	__tdiv_to_l_@quot,c
  4715  00E906  0E00               	movlw	0
  4716  00E908  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4717  00E90A  0E00               	movlw	0
  4718  00E90C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4719  00E90E  0E00               	movlw	0
  4720  00E910  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4721  00E912  0E7F               	movlw	127
  4722  00E914  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4723  00E916  500E               	movf	__tdiv_to_l_@cntr,w,c
  4724  00E918  0F98               	addlw	152
  4725  00E91A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4726  00E91C  0E18               	movlw	24
  4727  00E91E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4728  00E920                     l736:
  4729  00E920  90D8               	bcf	status,0,c
  4730  00E922  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4731  00E924  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4732  00E926  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4733  00E928  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4734  00E92A  5004               	movf	__tdiv_to_l_@f2,w,c
  4735  00E92C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4736  00E92E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4737  00E930  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4738  00E932  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4739  00E934  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4740  00E936  A0D8               	btfss	status,0,c
  4741  00E938  D007               	goto	l737
  4742  00E93A  5004               	movf	__tdiv_to_l_@f2,w,c
  4743  00E93C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4744  00E93E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4745  00E940  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4746  00E942  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4747  00E944  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4748  00E946  800A               	bsf	__tdiv_to_l_@quot,0,c
  4749  00E948                     l737:
  4750  00E948  90D8               	bcf	status,0,c
  4751  00E94A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4752  00E94C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4753  00E94E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4754  00E950  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4755  00E952  D7E6               	goto	l736
  4756  00E954  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4757  00E956  D016               	goto	l2934
  4758  00E958  500F               	movf	__tdiv_to_l_@exp1,w,c
  4759  00E95A  0A80               	xorlw	128
  4760  00E95C  0F97               	addlw	151
  4761  00E95E  B0D8               	btfsc	status,0,c
  4762  00E960  D009               	goto	l2930
  4763  00E962  0E00               	movlw	0
  4764  00E964  6E01               	movwf	?__tdiv_to_l_,c
  4765  00E966  0E00               	movlw	0
  4766  00E968  6E02               	movwf	?__tdiv_to_l_+1,c
  4767  00E96A  0E00               	movlw	0
  4768  00E96C  6E03               	movwf	?__tdiv_to_l_+2,c
  4769  00E96E  0E00               	movlw	0
  4770  00E970  6E04               	movwf	?__tdiv_to_l_+3,c
  4771  00E972  0012               	return	
  4772  00E974                     l2930:
  4773  00E974  90D8               	bcf	status,0,c
  4774  00E976  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4775  00E978  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4776  00E97A  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4777  00E97C  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4778  00E97E  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4779  00E980  D7F9               	goto	l2930
  4780  00E982  D015               	goto	l743
  4781  00E984                     l2934:
  4782  00E984  0E17               	movlw	23
  4783  00E986  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4784  00E988  D00F               	goto	l2942
  4785  00E98A  0E00               	movlw	0
  4786  00E98C  6E01               	movwf	?__tdiv_to_l_,c
  4787  00E98E  0E00               	movlw	0
  4788  00E990  6E02               	movwf	?__tdiv_to_l_+1,c
  4789  00E992  0E00               	movlw	0
  4790  00E994  6E03               	movwf	?__tdiv_to_l_+2,c
  4791  00E996  0E00               	movlw	0
  4792  00E998  6E04               	movwf	?__tdiv_to_l_+3,c
  4793  00E99A  0012               	return	
  4794  00E99C                     l2940:
  4795  00E99C  90D8               	bcf	status,0,c
  4796  00E99E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4797  00E9A0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4798  00E9A2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4799  00E9A4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4800  00E9A6  060F               	decf	__tdiv_to_l_@exp1,f,c
  4801  00E9A8                     l2942:
  4802  00E9A8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4803  00E9AA  A4D8               	btfss	status,2,c
  4804  00E9AC  D7F7               	goto	l2940
  4805  00E9AE                     l743:
  4806  00E9AE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4807  00E9B2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4808  00E9B6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4809  00E9BA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4810  00E9BE  0012               	return		;funcret
  4811  00E9C0                     __end_of__tdiv_to_l_:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           indf2	equ	0xFDF
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function __div_to_l_ *****************
  4830 ;; Defined at:
  4831 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  f1              3    0[COMRAM] unsigned long 
  4834 ;;  f2              3    3[COMRAM] unsigned long 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  quot            4    6[COMRAM] unsigned long 
  4837 ;;  exp1            1   11[COMRAM] unsigned char 
  4838 ;;  cntr            1   10[COMRAM] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  4    0[COMRAM] unsigned long 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4848 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;Total ram usage:       12 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_sprintf
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text11
  4862  00E766                     __ptext11:
  4863                           	opt stack 0
  4864  00E766                     __div_to_l_:
  4865                           	opt stack 29
  4866                           
  4867                           ;incstack = 0
  4868  00E766  3403               	rlcf	__div_to_l_@f1+2,w,c
  4869  00E768  3404               	rlcf	__div_to_l_@f1+3,w,c
  4870  00E76A  6E0C               	movwf	__div_to_l_@exp1,c
  4871  00E76C  500C               	movf	__div_to_l_@exp1,w,c
  4872  00E76E  A4D8               	btfss	status,2,c
  4873  00E770  D009               	goto	l2950
  4874  00E772  0E00               	movlw	0
  4875  00E774  6E01               	movwf	?__div_to_l_,c
  4876  00E776  0E00               	movlw	0
  4877  00E778  6E02               	movwf	?__div_to_l_+1,c
  4878  00E77A  0E00               	movlw	0
  4879  00E77C  6E03               	movwf	?__div_to_l_+2,c
  4880  00E77E  0E00               	movlw	0
  4881  00E780  6E04               	movwf	?__div_to_l_+3,c
  4882  00E782  0012               	return	
  4883  00E784                     l2950:
  4884  00E784  3406               	rlcf	__div_to_l_@f2+2,w,c
  4885  00E786  3407               	rlcf	__div_to_l_@f2+3,w,c
  4886  00E788  6E0B               	movwf	__div_to_l_@cntr,c
  4887  00E78A  500B               	movf	__div_to_l_@cntr,w,c
  4888  00E78C  A4D8               	btfss	status,2,c
  4889  00E78E  D009               	goto	l2956
  4890  00E790  0E00               	movlw	0
  4891  00E792  6E01               	movwf	?__div_to_l_,c
  4892  00E794  0E00               	movlw	0
  4893  00E796  6E02               	movwf	?__div_to_l_+1,c
  4894  00E798  0E00               	movlw	0
  4895  00E79A  6E03               	movwf	?__div_to_l_+2,c
  4896  00E79C  0E00               	movlw	0
  4897  00E79E  6E04               	movwf	?__div_to_l_+3,c
  4898  00E7A0  0012               	return	
  4899  00E7A2                     l2956:
  4900  00E7A2  8E03               	bsf	__div_to_l_@f1+2,7,c
  4901  00E7A4  0EFF               	movlw	255
  4902  00E7A6  1601               	andwf	__div_to_l_@f1,f,c
  4903  00E7A8  0EFF               	movlw	255
  4904  00E7AA  1602               	andwf	__div_to_l_@f1+1,f,c
  4905  00E7AC  0EFF               	movlw	255
  4906  00E7AE  1603               	andwf	__div_to_l_@f1+2,f,c
  4907  00E7B0  0E00               	movlw	0
  4908  00E7B2  1604               	andwf	__div_to_l_@f1+3,f,c
  4909  00E7B4  8E06               	bsf	__div_to_l_@f2+2,7,c
  4910  00E7B6  0EFF               	movlw	255
  4911  00E7B8  1604               	andwf	__div_to_l_@f2,f,c
  4912  00E7BA  0EFF               	movlw	255
  4913  00E7BC  1605               	andwf	__div_to_l_@f2+1,f,c
  4914  00E7BE  0EFF               	movlw	255
  4915  00E7C0  1606               	andwf	__div_to_l_@f2+2,f,c
  4916  00E7C2  0E00               	movlw	0
  4917  00E7C4  1607               	andwf	__div_to_l_@f2+3,f,c
  4918  00E7C6  0E00               	movlw	0
  4919  00E7C8  6E07               	movwf	__div_to_l_@quot,c
  4920  00E7CA  0E00               	movlw	0
  4921  00E7CC  6E08               	movwf	__div_to_l_@quot+1,c
  4922  00E7CE  0E00               	movlw	0
  4923  00E7D0  6E09               	movwf	__div_to_l_@quot+2,c
  4924  00E7D2  0E00               	movlw	0
  4925  00E7D4  6E0A               	movwf	__div_to_l_@quot+3,c
  4926  00E7D6  0E7F               	movlw	127
  4927  00E7D8  5E0C               	subwf	__div_to_l_@exp1,f,c
  4928  00E7DA  500B               	movf	__div_to_l_@cntr,w,c
  4929  00E7DC  0FA0               	addlw	160
  4930  00E7DE  5E0C               	subwf	__div_to_l_@exp1,f,c
  4931  00E7E0  0E20               	movlw	32
  4932  00E7E2  6E0B               	movwf	__div_to_l_@cntr,c
  4933  00E7E4                     l2970:
  4934  00E7E4  90D8               	bcf	status,0,c
  4935  00E7E6  3607               	rlcf	__div_to_l_@quot,f,c
  4936  00E7E8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4937  00E7EA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4938  00E7EC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4939  00E7EE  5004               	movf	__div_to_l_@f2,w,c
  4940  00E7F0  5C01               	subwf	__div_to_l_@f1,w,c
  4941  00E7F2  5005               	movf	__div_to_l_@f2+1,w,c
  4942  00E7F4  5802               	subwfb	__div_to_l_@f1+1,w,c
  4943  00E7F6  5006               	movf	__div_to_l_@f2+2,w,c
  4944  00E7F8  5803               	subwfb	__div_to_l_@f1+2,w,c
  4945  00E7FA  5007               	movf	__div_to_l_@f2+3,w,c
  4946  00E7FC  5804               	subwfb	__div_to_l_@f1+3,w,c
  4947  00E7FE  A0D8               	btfss	status,0,c
  4948  00E800  D009               	goto	l2978
  4949  00E802  5004               	movf	__div_to_l_@f2,w,c
  4950  00E804  5E01               	subwf	__div_to_l_@f1,f,c
  4951  00E806  5005               	movf	__div_to_l_@f2+1,w,c
  4952  00E808  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4953  00E80A  5006               	movf	__div_to_l_@f2+2,w,c
  4954  00E80C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4955  00E80E  5007               	movf	__div_to_l_@f2+3,w,c
  4956  00E810  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4957  00E812  8007               	bsf	__div_to_l_@quot,0,c
  4958  00E814                     l2978:
  4959  00E814  90D8               	bcf	status,0,c
  4960  00E816  3601               	rlcf	__div_to_l_@f1,f,c
  4961  00E818  3602               	rlcf	__div_to_l_@f1+1,f,c
  4962  00E81A  3603               	rlcf	__div_to_l_@f1+2,f,c
  4963  00E81C  3604               	rlcf	__div_to_l_@f1+3,f,c
  4964  00E81E  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4965  00E820  D7E1               	goto	l2970
  4966  00E822  AE0C               	btfss	__div_to_l_@exp1,7,c
  4967  00E824  D016               	goto	l2994
  4968  00E826  500C               	movf	__div_to_l_@exp1,w,c
  4969  00E828  0A80               	xorlw	128
  4970  00E82A  0F9F               	addlw	159
  4971  00E82C  B0D8               	btfsc	status,0,c
  4972  00E82E  D009               	goto	l2990
  4973  00E830  0E00               	movlw	0
  4974  00E832  6E01               	movwf	?__div_to_l_,c
  4975  00E834  0E00               	movlw	0
  4976  00E836  6E02               	movwf	?__div_to_l_+1,c
  4977  00E838  0E00               	movlw	0
  4978  00E83A  6E03               	movwf	?__div_to_l_+2,c
  4979  00E83C  0E00               	movlw	0
  4980  00E83E  6E04               	movwf	?__div_to_l_+3,c
  4981  00E840  0012               	return	
  4982  00E842                     l2990:
  4983  00E842  90D8               	bcf	status,0,c
  4984  00E844  320A               	rrcf	__div_to_l_@quot+3,f,c
  4985  00E846  3209               	rrcf	__div_to_l_@quot+2,f,c
  4986  00E848  3208               	rrcf	__div_to_l_@quot+1,f,c
  4987  00E84A  3207               	rrcf	__div_to_l_@quot,f,c
  4988  00E84C  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4989  00E84E  D7F9               	goto	l2990
  4990  00E850  D015               	goto	l639
  4991  00E852                     l2994:
  4992  00E852  0E1F               	movlw	31
  4993  00E854  640C               	cpfsgt	__div_to_l_@exp1,c
  4994  00E856  D00F               	goto	l3002
  4995  00E858  0E00               	movlw	0
  4996  00E85A  6E01               	movwf	?__div_to_l_,c
  4997  00E85C  0E00               	movlw	0
  4998  00E85E  6E02               	movwf	?__div_to_l_+1,c
  4999  00E860  0E00               	movlw	0
  5000  00E862  6E03               	movwf	?__div_to_l_+2,c
  5001  00E864  0E00               	movlw	0
  5002  00E866  6E04               	movwf	?__div_to_l_+3,c
  5003  00E868  0012               	return	
  5004  00E86A                     l3000:
  5005  00E86A  90D8               	bcf	status,0,c
  5006  00E86C  3607               	rlcf	__div_to_l_@quot,f,c
  5007  00E86E  3608               	rlcf	__div_to_l_@quot+1,f,c
  5008  00E870  3609               	rlcf	__div_to_l_@quot+2,f,c
  5009  00E872  360A               	rlcf	__div_to_l_@quot+3,f,c
  5010  00E874  060C               	decf	__div_to_l_@exp1,f,c
  5011  00E876                     l3002:
  5012  00E876  500C               	movf	__div_to_l_@exp1,w,c
  5013  00E878  A4D8               	btfss	status,2,c
  5014  00E87A  D7F7               	goto	l3000
  5015  00E87C                     l639:
  5016  00E87C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5017  00E880  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5018  00E884  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5019  00E888  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5020  00E88C  0012               	return		;funcret
  5021  00E88E                     __end_of__div_to_l_:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           postinc0	equ	0xFEE
  5031                           wreg	equ	0xFE8
  5032                           indf2	equ	0xFDF
  5033                           postinc2	equ	0xFDE
  5034                           postdec2	equ	0xFDD
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function ___lltoft *****************
  5040 ;; Defined at:
  5041 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  c               4    8[COMRAM] unsigned long 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  exp             1   16[COMRAM] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  3    8[COMRAM] float 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;Total ram usage:        9 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    1
  5062 ;; This function calls:
  5063 ;;		___ftpack
  5064 ;; This function is called by:
  5065 ;;		_sprintf
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text12
  5070  00DD42                     __ptext12:
  5071                           	opt stack 0
  5072  00DD42                     ___lltoft:
  5073                           	opt stack 28
  5074                           
  5075                           ;incstack = 0
  5076  00DD42  0E8E               	movlw	142
  5077  00DD44  6E11               	movwf	___lltoft@exp,c
  5078  00DD46  D006               	goto	l3122
  5079  00DD48                     l3120:
  5080  00DD48  90D8               	bcf	status,0,c
  5081  00DD4A  320C               	rrcf	___lltoft@c+3,f,c
  5082  00DD4C  320B               	rrcf	___lltoft@c+2,f,c
  5083  00DD4E  320A               	rrcf	___lltoft@c+1,f,c
  5084  00DD50  3209               	rrcf	___lltoft@c,f,c
  5085  00DD52  2A11               	incf	___lltoft@exp,f,c
  5086  00DD54                     l3122:
  5087  00DD54  0E00               	movlw	0
  5088  00DD56  1409               	andwf	___lltoft@c,w,c
  5089  00DD58  6E0D               	movwf	??___lltoft& (0+255),c
  5090  00DD5A  0E00               	movlw	0
  5091  00DD5C  140A               	andwf	___lltoft@c+1,w,c
  5092  00DD5E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5093  00DD60  0E00               	movlw	0
  5094  00DD62  140B               	andwf	___lltoft@c+2,w,c
  5095  00DD64  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5096  00DD66  0EFF               	movlw	255
  5097  00DD68  140C               	andwf	___lltoft@c+3,w,c
  5098  00DD6A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5099  00DD6C  500D               	movf	??___lltoft,w,c
  5100  00DD6E  100E               	iorwf	??___lltoft+1,w,c
  5101  00DD70  100F               	iorwf	??___lltoft+2,w,c
  5102  00DD72  1010               	iorwf	??___lltoft+3,w,c
  5103  00DD74  A4D8               	btfss	status,2,c
  5104  00DD76  D7E8               	goto	l3120
  5105  00DD78  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5106  00DD7C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5107  00DD80  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5108  00DD84  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5109  00DD88  0E00               	movlw	0
  5110  00DD8A  6E05               	movwf	___ftpack@sign,c
  5111  00DD8C  ECF0  F070         	call	___ftpack	;wreg free
  5112  00DD90  C001  F009         	movff	?___ftpack,?___lltoft
  5113  00DD94  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5114  00DD98  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5115  00DD9C  0012               	return	
  5116  00DD9E                     __end_of___lltoft:
  5117                           	opt stack 0
  5118                           tblptru	equ	0xFF8
  5119                           tblptrh	equ	0xFF7
  5120                           tblptrl	equ	0xFF6
  5121                           tablat	equ	0xFF5
  5122                           prodh	equ	0xFF4
  5123                           prodl	equ	0xFF3
  5124                           intcon	equ	0xFF2
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function ___llmod *****************
  5135 ;; Defined at:
  5136 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  dividend        4   13[COMRAM] unsigned long 
  5139 ;;  divisor         4   17[COMRAM] unsigned long 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  counter         1   21[COMRAM] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  4   13[COMRAM] unsigned long 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5151 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;Total ram usage:        9 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_sprintf
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text13
  5165  00DE5C                     __ptext13:
  5166                           	opt stack 0
  5167  00DE5C                     ___llmod:
  5168                           	opt stack 29
  5169                           
  5170                           ;incstack = 0
  5171  00DE5C  5012               	movf	___llmod@divisor,w,c
  5172  00DE5E  1013               	iorwf	___llmod@divisor+1,w,c
  5173  00DE60  1014               	iorwf	___llmod@divisor+2,w,c
  5174  00DE62  1015               	iorwf	___llmod@divisor+3,w,c
  5175  00DE64  B4D8               	btfsc	status,2,c
  5176  00DE66  D024               	goto	l828
  5177  00DE68  0E01               	movlw	1
  5178  00DE6A  6E16               	movwf	___llmod@counter,c
  5179  00DE6C  D006               	goto	l3108
  5180  00DE6E                     l3106:
  5181  00DE6E  90D8               	bcf	status,0,c
  5182  00DE70  3612               	rlcf	___llmod@divisor,f,c
  5183  00DE72  3613               	rlcf	___llmod@divisor+1,f,c
  5184  00DE74  3614               	rlcf	___llmod@divisor+2,f,c
  5185  00DE76  3615               	rlcf	___llmod@divisor+3,f,c
  5186  00DE78  2A16               	incf	___llmod@counter,f,c
  5187  00DE7A                     l3108:
  5188  00DE7A  AE15               	btfss	___llmod@divisor+3,7,c
  5189  00DE7C  D7F8               	goto	l3106
  5190  00DE7E                     l3110:
  5191  00DE7E  5012               	movf	___llmod@divisor,w,c
  5192  00DE80  5C0E               	subwf	___llmod@dividend,w,c
  5193  00DE82  5013               	movf	___llmod@divisor+1,w,c
  5194  00DE84  580F               	subwfb	___llmod@dividend+1,w,c
  5195  00DE86  5014               	movf	___llmod@divisor+2,w,c
  5196  00DE88  5810               	subwfb	___llmod@dividend+2,w,c
  5197  00DE8A  5015               	movf	___llmod@divisor+3,w,c
  5198  00DE8C  5811               	subwfb	___llmod@dividend+3,w,c
  5199  00DE8E  A0D8               	btfss	status,0,c
  5200  00DE90  D008               	goto	l3114
  5201  00DE92  5012               	movf	___llmod@divisor,w,c
  5202  00DE94  5E0E               	subwf	___llmod@dividend,f,c
  5203  00DE96  5013               	movf	___llmod@divisor+1,w,c
  5204  00DE98  5A0F               	subwfb	___llmod@dividend+1,f,c
  5205  00DE9A  5014               	movf	___llmod@divisor+2,w,c
  5206  00DE9C  5A10               	subwfb	___llmod@dividend+2,f,c
  5207  00DE9E  5015               	movf	___llmod@divisor+3,w,c
  5208  00DEA0  5A11               	subwfb	___llmod@dividend+3,f,c
  5209  00DEA2                     l3114:
  5210  00DEA2  90D8               	bcf	status,0,c
  5211  00DEA4  3215               	rrcf	___llmod@divisor+3,f,c
  5212  00DEA6  3214               	rrcf	___llmod@divisor+2,f,c
  5213  00DEA8  3213               	rrcf	___llmod@divisor+1,f,c
  5214  00DEAA  3212               	rrcf	___llmod@divisor,f,c
  5215  00DEAC  2E16               	decfsz	___llmod@counter,f,c
  5216  00DEAE  D7E7               	goto	l3110
  5217  00DEB0                     l828:
  5218  00DEB0  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5219  00DEB4  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5220  00DEB8  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5221  00DEBC  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5222  00DEC0  0012               	return		;funcret
  5223  00DEC2                     __end_of___llmod:
  5224                           	opt stack 0
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function ___lldiv *****************
  5242 ;; Defined at:
  5243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  dividend        4    0[COMRAM] unsigned long 
  5246 ;;  divisor         4    4[COMRAM] unsigned long 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  quotient        4    8[COMRAM] unsigned long 
  5249 ;;  counter         1   12[COMRAM] unsigned char 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  4    0[COMRAM] unsigned long 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5259 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;Total ram usage:       13 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_sprintf
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text14
  5273  00DFAC                     __ptext14:
  5274                           	opt stack 0
  5275  00DFAC                     ___lldiv:
  5276                           	opt stack 29
  5277                           
  5278                           ;incstack = 0
  5279  00DFAC  0E00               	movlw	0
  5280  00DFAE  6E09               	movwf	___lldiv@quotient,c
  5281  00DFB0  0E00               	movlw	0
  5282  00DFB2  6E0A               	movwf	___lldiv@quotient+1,c
  5283  00DFB4  0E00               	movlw	0
  5284  00DFB6  6E0B               	movwf	___lldiv@quotient+2,c
  5285  00DFB8  0E00               	movlw	0
  5286  00DFBA  6E0C               	movwf	___lldiv@quotient+3,c
  5287  00DFBC  5005               	movf	___lldiv@divisor,w,c
  5288  00DFBE  1006               	iorwf	___lldiv@divisor+1,w,c
  5289  00DFC0  1007               	iorwf	___lldiv@divisor+2,w,c
  5290  00DFC2  1008               	iorwf	___lldiv@divisor+3,w,c
  5291  00DFC4  B4D8               	btfsc	status,2,c
  5292  00DFC6  D02A               	goto	l818
  5293  00DFC8  0E01               	movlw	1
  5294  00DFCA  6E0D               	movwf	___lldiv@counter,c
  5295  00DFCC  D006               	goto	l3088
  5296  00DFCE                     l3086:
  5297  00DFCE  90D8               	bcf	status,0,c
  5298  00DFD0  3605               	rlcf	___lldiv@divisor,f,c
  5299  00DFD2  3606               	rlcf	___lldiv@divisor+1,f,c
  5300  00DFD4  3607               	rlcf	___lldiv@divisor+2,f,c
  5301  00DFD6  3608               	rlcf	___lldiv@divisor+3,f,c
  5302  00DFD8  2A0D               	incf	___lldiv@counter,f,c
  5303  00DFDA                     l3088:
  5304  00DFDA  AE08               	btfss	___lldiv@divisor+3,7,c
  5305  00DFDC  D7F8               	goto	l3086
  5306  00DFDE                     l3090:
  5307  00DFDE  90D8               	bcf	status,0,c
  5308  00DFE0  3609               	rlcf	___lldiv@quotient,f,c
  5309  00DFE2  360A               	rlcf	___lldiv@quotient+1,f,c
  5310  00DFE4  360B               	rlcf	___lldiv@quotient+2,f,c
  5311  00DFE6  360C               	rlcf	___lldiv@quotient+3,f,c
  5312  00DFE8  5005               	movf	___lldiv@divisor,w,c
  5313  00DFEA  5C01               	subwf	___lldiv@dividend,w,c
  5314  00DFEC  5006               	movf	___lldiv@divisor+1,w,c
  5315  00DFEE  5802               	subwfb	___lldiv@dividend+1,w,c
  5316  00DFF0  5007               	movf	___lldiv@divisor+2,w,c
  5317  00DFF2  5803               	subwfb	___lldiv@dividend+2,w,c
  5318  00DFF4  5008               	movf	___lldiv@divisor+3,w,c
  5319  00DFF6  5804               	subwfb	___lldiv@dividend+3,w,c
  5320  00DFF8  A0D8               	btfss	status,0,c
  5321  00DFFA  D009               	goto	l3098
  5322  00DFFC  5005               	movf	___lldiv@divisor,w,c
  5323  00DFFE  5E01               	subwf	___lldiv@dividend,f,c
  5324  00E000  5006               	movf	___lldiv@divisor+1,w,c
  5325  00E002  5A02               	subwfb	___lldiv@dividend+1,f,c
  5326  00E004  5007               	movf	___lldiv@divisor+2,w,c
  5327  00E006  5A03               	subwfb	___lldiv@dividend+2,f,c
  5328  00E008  5008               	movf	___lldiv@divisor+3,w,c
  5329  00E00A  5A04               	subwfb	___lldiv@dividend+3,f,c
  5330  00E00C  8009               	bsf	___lldiv@quotient,0,c
  5331  00E00E                     l3098:
  5332  00E00E  90D8               	bcf	status,0,c
  5333  00E010  3208               	rrcf	___lldiv@divisor+3,f,c
  5334  00E012  3207               	rrcf	___lldiv@divisor+2,f,c
  5335  00E014  3206               	rrcf	___lldiv@divisor+1,f,c
  5336  00E016  3205               	rrcf	___lldiv@divisor,f,c
  5337  00E018  2E0D               	decfsz	___lldiv@counter,f,c
  5338  00E01A  D7E1               	goto	l3090
  5339  00E01C                     l818:
  5340  00E01C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5341  00E020  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5342  00E024  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5343  00E028  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5344  00E02C  0012               	return		;funcret
  5345  00E02E                     __end_of___lldiv:
  5346                           	opt stack 0
  5347                           tblptru	equ	0xFF8
  5348                           tblptrh	equ	0xFF7
  5349                           tblptrl	equ	0xFF6
  5350                           tablat	equ	0xFF5
  5351                           prodh	equ	0xFF4
  5352                           prodl	equ	0xFF3
  5353                           intcon	equ	0xFF2
  5354                           postinc0	equ	0xFEE
  5355                           wreg	equ	0xFE8
  5356                           indf2	equ	0xFDF
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           
  5363 ;; *************** function ___fttol *****************
  5364 ;; Defined at:
  5365 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  f1              3   42[COMRAM] float 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  lval            4   52[COMRAM] unsigned long 
  5370 ;;  exp1            1   56[COMRAM] unsigned char 
  5371 ;;  sign1           1   51[COMRAM] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  4   42[COMRAM] long 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5381 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;Total ram usage:       15 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_sprintf
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text15
  5395  00E468                     __ptext15:
  5396                           	opt stack 0
  5397  00E468                     ___fttol:
  5398                           	opt stack 29
  5399                           
  5400                           ;incstack = 0
  5401  00E468  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5402  00E46C  6A30               	clrf	(??___fttol+1)& (0+255),c
  5403  00E46E  6A31               	clrf	(??___fttol+2)& (0+255),c
  5404  00E470  342C               	rlcf	___fttol@f1+1,w,c
  5405  00E472  362F               	rlcf	??___fttol& (0+255),f,c
  5406  00E474  E301               	bnc	u2751
  5407  00E476  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5408  00E478                     u2751:
  5409  00E478  502F               	movf	??___fttol,w,c
  5410  00E47A  6E39               	movwf	___fttol@exp1,c
  5411  00E47C  5039               	movf	___fttol@exp1,w,c
  5412  00E47E  A4D8               	btfss	status,2,c
  5413  00E480  D009               	goto	l3040
  5414  00E482  0E00               	movlw	0
  5415  00E484  6E2B               	movwf	?___fttol,c
  5416  00E486  0E00               	movlw	0
  5417  00E488  6E2C               	movwf	?___fttol+1,c
  5418  00E48A  0E00               	movlw	0
  5419  00E48C  6E2D               	movwf	?___fttol+2,c
  5420  00E48E  0E00               	movlw	0
  5421  00E490  6E2E               	movwf	?___fttol+3,c
  5422  00E492  0012               	return	
  5423  00E494                     l3040:
  5424  00E494  0E17               	movlw	23
  5425  00E496  6E2F               	movwf	??___fttol& (0+255),c
  5426  00E498  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5427  00E49C  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5428  00E4A0  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5429  00E4A4  282F               	incf	??___fttol,w,c
  5430  00E4A6  6E33               	movwf	(??___fttol+4)& (0+255),c
  5431  00E4A8  D004               	goto	u2770
  5432  00E4AA                     u2775:
  5433  00E4AA  90D8               	bcf	status,0,c
  5434  00E4AC  3232               	rrcf	??___fttol+3,f,c
  5435  00E4AE  3231               	rrcf	??___fttol+2,f,c
  5436  00E4B0  3230               	rrcf	??___fttol+1,f,c
  5437  00E4B2                     u2770:
  5438  00E4B2  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5439  00E4B4  D7FA               	goto	u2775
  5440  00E4B6  5030               	movf	??___fttol+1,w,c
  5441  00E4B8  6E34               	movwf	___fttol@sign1,c
  5442  00E4BA  8E2C               	bsf	___fttol@f1+1,7,c
  5443  00E4BC  0EFF               	movlw	255
  5444  00E4BE  162B               	andwf	___fttol@f1,f,c
  5445  00E4C0  0EFF               	movlw	255
  5446  00E4C2  162C               	andwf	___fttol@f1+1,f,c
  5447  00E4C4  0E00               	movlw	0
  5448  00E4C6  162D               	andwf	___fttol@f1+2,f,c
  5449  00E4C8  502B               	movf	___fttol@f1,w,c
  5450  00E4CA  6E35               	movwf	___fttol@lval,c
  5451  00E4CC  502C               	movf	___fttol@f1+1,w,c
  5452  00E4CE  6E36               	movwf	___fttol@lval+1,c
  5453  00E4D0  502D               	movf	___fttol@f1+2,w,c
  5454  00E4D2  6E37               	movwf	___fttol@lval+2,c
  5455  00E4D4  6A38               	clrf	___fttol@lval+3,c
  5456  00E4D6  0E8E               	movlw	142
  5457  00E4D8  5E39               	subwf	___fttol@exp1,f,c
  5458  00E4DA  AE39               	btfss	___fttol@exp1,7,c
  5459  00E4DC  D016               	goto	l3062
  5460  00E4DE  5039               	movf	___fttol@exp1,w,c
  5461  00E4E0  0A80               	xorlw	128
  5462  00E4E2  0F8F               	addlw	143
  5463  00E4E4  B0D8               	btfsc	status,0,c
  5464  00E4E6  D009               	goto	l3058
  5465  00E4E8  0E00               	movlw	0
  5466  00E4EA  6E2B               	movwf	?___fttol,c
  5467  00E4EC  0E00               	movlw	0
  5468  00E4EE  6E2C               	movwf	?___fttol+1,c
  5469  00E4F0  0E00               	movlw	0
  5470  00E4F2  6E2D               	movwf	?___fttol+2,c
  5471  00E4F4  0E00               	movlw	0
  5472  00E4F6  6E2E               	movwf	?___fttol+3,c
  5473  00E4F8  0012               	return	
  5474  00E4FA                     l3058:
  5475  00E4FA  90D8               	bcf	status,0,c
  5476  00E4FC  3238               	rrcf	___fttol@lval+3,f,c
  5477  00E4FE  3237               	rrcf	___fttol@lval+2,f,c
  5478  00E500  3236               	rrcf	___fttol@lval+1,f,c
  5479  00E502  3235               	rrcf	___fttol@lval,f,c
  5480  00E504  3E39               	incfsz	___fttol@exp1,f,c
  5481  00E506  D7F9               	goto	l3058
  5482  00E508  D015               	goto	l3072
  5483  00E50A                     l3062:
  5484  00E50A  0E17               	movlw	23
  5485  00E50C  6439               	cpfsgt	___fttol@exp1,c
  5486  00E50E  D00F               	goto	l3070
  5487  00E510  0E00               	movlw	0
  5488  00E512  6E2B               	movwf	?___fttol,c
  5489  00E514  0E00               	movlw	0
  5490  00E516  6E2C               	movwf	?___fttol+1,c
  5491  00E518  0E00               	movlw	0
  5492  00E51A  6E2D               	movwf	?___fttol+2,c
  5493  00E51C  0E00               	movlw	0
  5494  00E51E  6E2E               	movwf	?___fttol+3,c
  5495  00E520  0012               	return	
  5496  00E522                     l3068:
  5497  00E522  90D8               	bcf	status,0,c
  5498  00E524  3635               	rlcf	___fttol@lval,f,c
  5499  00E526  3636               	rlcf	___fttol@lval+1,f,c
  5500  00E528  3637               	rlcf	___fttol@lval+2,f,c
  5501  00E52A  3638               	rlcf	___fttol@lval+3,f,c
  5502  00E52C  0639               	decf	___fttol@exp1,f,c
  5503  00E52E                     l3070:
  5504  00E52E  5039               	movf	___fttol@exp1,w,c
  5505  00E530  A4D8               	btfss	status,2,c
  5506  00E532  D7F7               	goto	l3068
  5507  00E534                     l3072:
  5508  00E534  5034               	movf	___fttol@sign1,w,c
  5509  00E536  B4D8               	btfsc	status,2,c
  5510  00E538  D008               	goto	l3076
  5511  00E53A  1E38               	comf	___fttol@lval+3,f,c
  5512  00E53C  1E37               	comf	___fttol@lval+2,f,c
  5513  00E53E  1E36               	comf	___fttol@lval+1,f,c
  5514  00E540  6C35               	negf	___fttol@lval,c
  5515  00E542  0E00               	movlw	0
  5516  00E544  2236               	addwfc	___fttol@lval+1,f,c
  5517  00E546  2237               	addwfc	___fttol@lval+2,f,c
  5518  00E548  2238               	addwfc	___fttol@lval+3,f,c
  5519  00E54A                     l3076:
  5520  00E54A  C035  F02B         	movff	___fttol@lval,?___fttol
  5521  00E54E  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5522  00E552  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5523  00E556  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5524  00E55A  0012               	return	
  5525  00E55C                     __end_of___fttol:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function ___ftsub *****************
  5544 ;; Defined at:
  5545 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  f1              3   62[COMRAM] float 
  5548 ;;  f2              3   65[COMRAM] float 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;		None
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  3   62[COMRAM] float 
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5560 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;Total ram usage:        6 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    2
  5567 ;; This function calls:
  5568 ;;		___ftadd
  5569 ;; This function is called by:
  5570 ;;		_sprintf
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text16
  5575  00DB7E                     __ptext16:
  5576                           	opt stack 0
  5577  00DB7E                     ___ftsub:
  5578                           	opt stack 27
  5579                           
  5580                           ;incstack = 0
  5581  00DB7E  5042               	movf	___ftsub@f2,w,c
  5582  00DB80  1043               	iorwf	___ftsub@f2+1,w,c
  5583  00DB82  1044               	iorwf	___ftsub@f2+2,w,c
  5584  00DB84  B4D8               	btfsc	status,2,c
  5585  00DB86  D006               	goto	l3008
  5586  00DB88  0E00               	movlw	0
  5587  00DB8A  1A42               	xorwf	___ftsub@f2,f,c
  5588  00DB8C  0E00               	movlw	0
  5589  00DB8E  1A43               	xorwf	___ftsub@f2+1,f,c
  5590  00DB90  0E80               	movlw	128
  5591  00DB92  1A44               	xorwf	___ftsub@f2+2,f,c
  5592  00DB94                     l3008:
  5593  00DB94  C03F  F033         	movff	___ftsub@f1,___ftadd@f1
  5594  00DB98  C040  F034         	movff	___ftsub@f1+1,___ftadd@f1+1
  5595  00DB9C  C041  F035         	movff	___ftsub@f1+2,___ftadd@f1+2
  5596  00DBA0  C042  F036         	movff	___ftsub@f2,___ftadd@f2
  5597  00DBA4  C043  F037         	movff	___ftsub@f2+1,___ftadd@f2+1
  5598  00DBA8  C044  F038         	movff	___ftsub@f2+2,___ftadd@f2+2
  5599  00DBAC  ECE0  F074         	call	___ftadd	;wreg free
  5600  00DBB0  C033  F03F         	movff	?___ftadd,?___ftsub
  5601  00DBB4  C034  F040         	movff	?___ftadd+1,?___ftsub+1
  5602  00DBB8  C035  F041         	movff	?___ftadd+2,?___ftsub+2
  5603  00DBBC  0012               	return	
  5604  00DBBE                     __end_of___ftsub:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           fsr2h	equ	0xFDA
  5619                           fsr2l	equ	0xFD9
  5620                           status	equ	0xFD8
  5621                           
  5622 ;; *************** function ___ftadd *****************
  5623 ;; Defined at:
  5624 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  f1              3   50[COMRAM] float 
  5627 ;;  f2              3   53[COMRAM] float 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  exp1            1   61[COMRAM] unsigned char 
  5630 ;;  exp2            1   60[COMRAM] unsigned char 
  5631 ;;  sign            1   59[COMRAM] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  3   50[COMRAM] float 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:       12 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    1
  5648 ;; This function calls:
  5649 ;;		___ftpack
  5650 ;; This function is called by:
  5651 ;;		_main
  5652 ;;		_sprintf
  5653 ;;		___ftsub
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text17
  5658  00E9C0                     __ptext17:
  5659                           	opt stack 0
  5660  00E9C0                     ___ftadd:
  5661                           	opt stack 27
  5662                           
  5663                           ;incstack = 0
  5664  00E9C0  C035  F039         	movff	___ftadd@f1+2,??___ftadd
  5665  00E9C4  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5666  00E9C6  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5667  00E9C8  3434               	rlcf	___ftadd@f1+1,w,c
  5668  00E9CA  3639               	rlcf	??___ftadd& (0+255),f,c
  5669  00E9CC  E301               	bnc	u1881
  5670  00E9CE  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5671  00E9D0                     u1881:
  5672  00E9D0  5039               	movf	??___ftadd,w,c
  5673  00E9D2  6E3E               	movwf	___ftadd@exp1,c
  5674  00E9D4  C038  F039         	movff	___ftadd@f2+2,??___ftadd
  5675  00E9D8  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5676  00E9DA  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5677  00E9DC  3437               	rlcf	___ftadd@f2+1,w,c
  5678  00E9DE  3639               	rlcf	??___ftadd& (0+255),f,c
  5679  00E9E0  E301               	bnc	u1891
  5680  00E9E2  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5681  00E9E4                     u1891:
  5682  00E9E4  5039               	movf	??___ftadd,w,c
  5683  00E9E6  6E3D               	movwf	___ftadd@exp2,c
  5684  00E9E8  503E               	movf	___ftadd@exp1,w,c
  5685  00E9EA  B4D8               	btfsc	status,2,c
  5686  00E9EC  D00B               	goto	l694
  5687  00E9EE  503D               	movf	___ftadd@exp2,w,c
  5688  00E9F0  5C3E               	subwf	___ftadd@exp1,w,c
  5689  00E9F2  B0D8               	btfsc	status,0,c
  5690  00E9F4  D00E               	goto	l2466
  5691  00E9F6  503E               	movf	___ftadd@exp1,w,c
  5692  00E9F8  0800               	sublw	0
  5693  00E9FA  243D               	addwf	___ftadd@exp2,w,c
  5694  00E9FC  6E39               	movwf	??___ftadd& (0+255),c
  5695  00E9FE  0E18               	movlw	24
  5696  00EA00  6439               	cpfsgt	??___ftadd,c
  5697  00EA02  D007               	goto	l2466
  5698  00EA04                     l694:
  5699  00EA04  C036  F033         	movff	___ftadd@f2,?___ftadd
  5700  00EA08  C037  F034         	movff	___ftadd@f2+1,?___ftadd+1
  5701  00EA0C  C038  F035         	movff	___ftadd@f2+2,?___ftadd+2
  5702  00EA10  0012               	return	
  5703  00EA12                     l2466:
  5704  00EA12  503D               	movf	___ftadd@exp2,w,c
  5705  00EA14  B4D8               	btfsc	status,2,c
  5706  00EA16  D00B               	goto	l698
  5707  00EA18  503E               	movf	___ftadd@exp1,w,c
  5708  00EA1A  5C3D               	subwf	___ftadd@exp2,w,c
  5709  00EA1C  B0D8               	btfsc	status,0,c
  5710  00EA1E  D00E               	goto	l2472
  5711  00EA20  503D               	movf	___ftadd@exp2,w,c
  5712  00EA22  0800               	sublw	0
  5713  00EA24  243E               	addwf	___ftadd@exp1,w,c
  5714  00EA26  6E39               	movwf	??___ftadd& (0+255),c
  5715  00EA28  0E18               	movlw	24
  5716  00EA2A  6439               	cpfsgt	??___ftadd,c
  5717  00EA2C  D007               	goto	l2472
  5718  00EA2E                     l698:
  5719  00EA2E  C033  F033         	movff	___ftadd@f1,?___ftadd
  5720  00EA32  C034  F034         	movff	___ftadd@f1+1,?___ftadd+1
  5721  00EA36  C035  F035         	movff	___ftadd@f1+2,?___ftadd+2
  5722  00EA3A  0012               	return	
  5723  00EA3C                     l2472:
  5724  00EA3C  0E06               	movlw	6
  5725  00EA3E  6E3C               	movwf	___ftadd@sign,c
  5726  00EA40  BE35               	btfsc	___ftadd@f1+2,7,c
  5727  00EA42  8E3C               	bsf	___ftadd@sign,7,c
  5728  00EA44  BE38               	btfsc	___ftadd@f2+2,7,c
  5729  00EA46  8C3C               	bsf	___ftadd@sign,6,c
  5730  00EA48  8E34               	bsf	___ftadd@f1+1,7,c
  5731  00EA4A  0EFF               	movlw	255
  5732  00EA4C  1633               	andwf	___ftadd@f1,f,c
  5733  00EA4E  0EFF               	movlw	255
  5734  00EA50  1634               	andwf	___ftadd@f1+1,f,c
  5735  00EA52  0E00               	movlw	0
  5736  00EA54  1635               	andwf	___ftadd@f1+2,f,c
  5737  00EA56  8E37               	bsf	___ftadd@f2+1,7,c
  5738  00EA58  0EFF               	movlw	255
  5739  00EA5A  1636               	andwf	___ftadd@f2,f,c
  5740  00EA5C  0EFF               	movlw	255
  5741  00EA5E  1637               	andwf	___ftadd@f2+1,f,c
  5742  00EA60  0E00               	movlw	0
  5743  00EA62  1638               	andwf	___ftadd@f2+2,f,c
  5744  00EA64  503D               	movf	___ftadd@exp2,w,c
  5745  00EA66  5C3E               	subwf	___ftadd@exp1,w,c
  5746  00EA68  B0D8               	btfsc	status,0,c
  5747  00EA6A  D01B               	goto	l2498
  5748  00EA6C                     l2488:
  5749  00EA6C  90D8               	bcf	status,0,c
  5750  00EA6E  3636               	rlcf	___ftadd@f2,f,c
  5751  00EA70  3637               	rlcf	___ftadd@f2+1,f,c
  5752  00EA72  3638               	rlcf	___ftadd@f2+2,f,c
  5753  00EA74  063D               	decf	___ftadd@exp2,f,c
  5754  00EA76  503E               	movf	___ftadd@exp1,w,c
  5755  00EA78  183D               	xorwf	___ftadd@exp2,w,c
  5756  00EA7A  B4D8               	btfsc	status,2,c
  5757  00EA7C  D00D               	goto	l2496
  5758  00EA7E  063C               	decf	___ftadd@sign,f,c
  5759  00EA80  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5760  00EA84  0E07               	movlw	7
  5761  00EA86  1639               	andwf	??___ftadd,f,c
  5762  00EA88  B4D8               	btfsc	status,2,c
  5763  00EA8A  D006               	goto	l2496
  5764  00EA8C  D7EF               	goto	l2488
  5765  00EA8E                     l2494:
  5766  00EA8E  90D8               	bcf	status,0,c
  5767  00EA90  3235               	rrcf	___ftadd@f1+2,f,c
  5768  00EA92  3234               	rrcf	___ftadd@f1+1,f,c
  5769  00EA94  3233               	rrcf	___ftadd@f1,f,c
  5770  00EA96  2A3E               	incf	___ftadd@exp1,f,c
  5771  00EA98                     l2496:
  5772  00EA98  503D               	movf	___ftadd@exp2,w,c
  5773  00EA9A  183E               	xorwf	___ftadd@exp1,w,c
  5774  00EA9C  B4D8               	btfsc	status,2,c
  5775  00EA9E  D01F               	goto	l709
  5776  00EAA0  D7F6               	goto	l2494
  5777  00EAA2                     l2498:
  5778  00EAA2  503E               	movf	___ftadd@exp1,w,c
  5779  00EAA4  5C3D               	subwf	___ftadd@exp2,w,c
  5780  00EAA6  B0D8               	btfsc	status,0,c
  5781  00EAA8  D01A               	goto	l709
  5782  00EAAA                     l2500:
  5783  00EAAA  90D8               	bcf	status,0,c
  5784  00EAAC  3633               	rlcf	___ftadd@f1,f,c
  5785  00EAAE  3634               	rlcf	___ftadd@f1+1,f,c
  5786  00EAB0  3635               	rlcf	___ftadd@f1+2,f,c
  5787  00EAB2  063E               	decf	___ftadd@exp1,f,c
  5788  00EAB4  503E               	movf	___ftadd@exp1,w,c
  5789  00EAB6  183D               	xorwf	___ftadd@exp2,w,c
  5790  00EAB8  B4D8               	btfsc	status,2,c
  5791  00EABA  D00D               	goto	l2508
  5792  00EABC  063C               	decf	___ftadd@sign,f,c
  5793  00EABE  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5794  00EAC2  0E07               	movlw	7
  5795  00EAC4  1639               	andwf	??___ftadd,f,c
  5796  00EAC6  B4D8               	btfsc	status,2,c
  5797  00EAC8  D006               	goto	l2508
  5798  00EACA  D7EF               	goto	l2500
  5799  00EACC                     l2506:
  5800  00EACC  90D8               	bcf	status,0,c
  5801  00EACE  3238               	rrcf	___ftadd@f2+2,f,c
  5802  00EAD0  3237               	rrcf	___ftadd@f2+1,f,c
  5803  00EAD2  3236               	rrcf	___ftadd@f2,f,c
  5804  00EAD4  2A3D               	incf	___ftadd@exp2,f,c
  5805  00EAD6                     l2508:
  5806  00EAD6  503D               	movf	___ftadd@exp2,w,c
  5807  00EAD8  183E               	xorwf	___ftadd@exp1,w,c
  5808  00EADA  A4D8               	btfss	status,2,c
  5809  00EADC  D7F7               	goto	l2506
  5810  00EADE                     l709:
  5811  00EADE  AE3C               	btfss	___ftadd@sign,7,c
  5812  00EAE0  D00C               	goto	l718
  5813  00EAE2  0EFF               	movlw	255
  5814  00EAE4  1A33               	xorwf	___ftadd@f1,f,c
  5815  00EAE6  0EFF               	movlw	255
  5816  00EAE8  1A34               	xorwf	___ftadd@f1+1,f,c
  5817  00EAEA  0EFF               	movlw	255
  5818  00EAEC  1A35               	xorwf	___ftadd@f1+2,f,c
  5819  00EAEE  0E01               	movlw	1
  5820  00EAF0  2633               	addwf	___ftadd@f1,f,c
  5821  00EAF2  0E00               	movlw	0
  5822  00EAF4  2234               	addwfc	___ftadd@f1+1,f,c
  5823  00EAF6  0E00               	movlw	0
  5824  00EAF8  2235               	addwfc	___ftadd@f1+2,f,c
  5825  00EAFA                     l718:
  5826  00EAFA  AC3C               	btfss	___ftadd@sign,6,c
  5827  00EAFC  D00C               	goto	l2514
  5828  00EAFE  0EFF               	movlw	255
  5829  00EB00  1A36               	xorwf	___ftadd@f2,f,c
  5830  00EB02  0EFF               	movlw	255
  5831  00EB04  1A37               	xorwf	___ftadd@f2+1,f,c
  5832  00EB06  0EFF               	movlw	255
  5833  00EB08  1A38               	xorwf	___ftadd@f2+2,f,c
  5834  00EB0A  0E01               	movlw	1
  5835  00EB0C  2636               	addwf	___ftadd@f2,f,c
  5836  00EB0E  0E00               	movlw	0
  5837  00EB10  2237               	addwfc	___ftadd@f2+1,f,c
  5838  00EB12  0E00               	movlw	0
  5839  00EB14  2238               	addwfc	___ftadd@f2+2,f,c
  5840  00EB16                     l2514:
  5841  00EB16  0E00               	movlw	0
  5842  00EB18  6E3C               	movwf	___ftadd@sign,c
  5843  00EB1A  5033               	movf	___ftadd@f1,w,c
  5844  00EB1C  2636               	addwf	___ftadd@f2,f,c
  5845  00EB1E  5034               	movf	___ftadd@f1+1,w,c
  5846  00EB20  2237               	addwfc	___ftadd@f2+1,f,c
  5847  00EB22  5035               	movf	___ftadd@f1+2,w,c
  5848  00EB24  2238               	addwfc	___ftadd@f2+2,f,c
  5849  00EB26  AE38               	btfss	___ftadd@f2+2,7,c
  5850  00EB28  D00E               	goto	l2524
  5851  00EB2A  0EFF               	movlw	255
  5852  00EB2C  1A36               	xorwf	___ftadd@f2,f,c
  5853  00EB2E  0EFF               	movlw	255
  5854  00EB30  1A37               	xorwf	___ftadd@f2+1,f,c
  5855  00EB32  0EFF               	movlw	255
  5856  00EB34  1A38               	xorwf	___ftadd@f2+2,f,c
  5857  00EB36  0E01               	movlw	1
  5858  00EB38  2636               	addwf	___ftadd@f2,f,c
  5859  00EB3A  0E00               	movlw	0
  5860  00EB3C  2237               	addwfc	___ftadd@f2+1,f,c
  5861  00EB3E  0E00               	movlw	0
  5862  00EB40  2238               	addwfc	___ftadd@f2+2,f,c
  5863  00EB42  0E01               	movlw	1
  5864  00EB44  6E3C               	movwf	___ftadd@sign,c
  5865  00EB46                     l2524:
  5866  00EB46  C036  F001         	movff	___ftadd@f2,___ftpack@arg
  5867  00EB4A  C037  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5868  00EB4E  C038  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5869  00EB52  C03E  F004         	movff	___ftadd@exp1,___ftpack@exp
  5870  00EB56  C03C  F005         	movff	___ftadd@sign,___ftpack@sign
  5871  00EB5A  ECF0  F070         	call	___ftpack	;wreg free
  5872  00EB5E  C001  F033         	movff	?___ftpack,?___ftadd
  5873  00EB62  C002  F034         	movff	?___ftpack+1,?___ftadd+1
  5874  00EB66  C003  F035         	movff	?___ftpack+2,?___ftadd+2
  5875  00EB6A  0012               	return	
  5876  00EB6C                     __end_of___ftadd:
  5877                           	opt stack 0
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           postinc0	equ	0xFEE
  5886                           wreg	equ	0xFE8
  5887                           indf2	equ	0xFDF
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           fsr2h	equ	0xFDA
  5891                           fsr2l	equ	0xFD9
  5892                           status	equ	0xFD8
  5893                           
  5894 ;; *************** function ___ftneg *****************
  5895 ;; Defined at:
  5896 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  f1              3    0[COMRAM] float 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;		None
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  3    0[COMRAM] float 
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;Total ram usage:        3 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_sprintf
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text18
  5924  00DA10                     __ptext18:
  5925                           	opt stack 0
  5926  00DA10                     ___ftneg:
  5927                           	opt stack 29
  5928                           
  5929                           ;incstack = 0
  5930  00DA10  5001               	movf	___ftneg@f1,w,c
  5931  00DA12  1002               	iorwf	___ftneg@f1+1,w,c
  5932  00DA14  1003               	iorwf	___ftneg@f1+2,w,c
  5933  00DA16  B4D8               	btfsc	status,2,c
  5934  00DA18  D006               	goto	l768
  5935  00DA1A  0E00               	movlw	0
  5936  00DA1C  1A01               	xorwf	___ftneg@f1,f,c
  5937  00DA1E  0E00               	movlw	0
  5938  00DA20  1A02               	xorwf	___ftneg@f1+1,f,c
  5939  00DA22  0E80               	movlw	128
  5940  00DA24  1A03               	xorwf	___ftneg@f1+2,f,c
  5941  00DA26                     l768:
  5942  00DA26  C001  F001         	movff	___ftneg@f1,?___ftneg
  5943  00DA2A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5944  00DA2E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5945  00DA32  0012               	return		;funcret
  5946  00DA34                     __end_of___ftneg:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           postinc0	equ	0xFEE
  5956                           wreg	equ	0xFE8
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function ___ftge *****************
  5965 ;; Defined at:
  5966 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  ff1             3    0[COMRAM] float 
  5969 ;;  ff2             3    3[COMRAM] float 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        9 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_sprintf
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           	psect	text19
  5995  00E0B2                     __ptext19:
  5996                           	opt stack 0
  5997  00E0B2                     ___ftge:
  5998                           	opt stack 29
  5999                           
  6000                           ;incstack = 0
  6001  00E0B2  AE03               	btfss	___ftge@ff1+2,7,c
  6002  00E0B4  D016               	goto	l3016
  6003  00E0B6  C001  F007         	movff	___ftge@ff1,??___ftge
  6004  00E0BA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6005  00E0BE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6006  00E0C2  1E07               	comf	??___ftge,f,c
  6007  00E0C4  1E08               	comf	??___ftge+1,f,c
  6008  00E0C6  1E09               	comf	??___ftge+2,f,c
  6009  00E0C8  2A07               	incf	??___ftge,f,c
  6010  00E0CA  0E00               	movlw	0
  6011  00E0CC  2208               	addwfc	??___ftge+1,f,c
  6012  00E0CE  2209               	addwfc	??___ftge+2,f,c
  6013  00E0D0  0E00               	movlw	0
  6014  00E0D2  2407               	addwf	??___ftge,w,c
  6015  00E0D4  6E01               	movwf	___ftge@ff1,c
  6016  00E0D6  0E00               	movlw	0
  6017  00E0D8  2008               	addwfc	??___ftge+1,w,c
  6018  00E0DA  6E02               	movwf	___ftge@ff1+1,c
  6019  00E0DC  0E80               	movlw	128
  6020  00E0DE  2009               	addwfc	??___ftge+2,w,c
  6021  00E0E0  6E03               	movwf	___ftge@ff1+2,c
  6022  00E0E2                     l3016:
  6023  00E0E2  AE06               	btfss	___ftge@ff2+2,7,c
  6024  00E0E4  D016               	goto	l3020
  6025  00E0E6  C004  F007         	movff	___ftge@ff2,??___ftge
  6026  00E0EA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6027  00E0EE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6028  00E0F2  1E07               	comf	??___ftge,f,c
  6029  00E0F4  1E08               	comf	??___ftge+1,f,c
  6030  00E0F6  1E09               	comf	??___ftge+2,f,c
  6031  00E0F8  2A07               	incf	??___ftge,f,c
  6032  00E0FA  0E00               	movlw	0
  6033  00E0FC  2208               	addwfc	??___ftge+1,f,c
  6034  00E0FE  2209               	addwfc	??___ftge+2,f,c
  6035  00E100  0E00               	movlw	0
  6036  00E102  2407               	addwf	??___ftge,w,c
  6037  00E104  6E04               	movwf	___ftge@ff2,c
  6038  00E106  0E00               	movlw	0
  6039  00E108  2008               	addwfc	??___ftge+1,w,c
  6040  00E10A  6E05               	movwf	___ftge@ff2+1,c
  6041  00E10C  0E80               	movlw	128
  6042  00E10E  2009               	addwfc	??___ftge+2,w,c
  6043  00E110  6E06               	movwf	___ftge@ff2+2,c
  6044  00E112                     l3020:
  6045  00E112  0E00               	movlw	0
  6046  00E114  1A01               	xorwf	___ftge@ff1,f,c
  6047  00E116  0E00               	movlw	0
  6048  00E118  1A02               	xorwf	___ftge@ff1+1,f,c
  6049  00E11A  0E80               	movlw	128
  6050  00E11C  1A03               	xorwf	___ftge@ff1+2,f,c
  6051  00E11E  0E00               	movlw	0
  6052  00E120  1A04               	xorwf	___ftge@ff2,f,c
  6053  00E122  0E00               	movlw	0
  6054  00E124  1A05               	xorwf	___ftge@ff2+1,f,c
  6055  00E126  0E80               	movlw	128
  6056  00E128  1A06               	xorwf	___ftge@ff2+2,f,c
  6057  00E12A  5004               	movf	___ftge@ff2,w,c
  6058  00E12C  5C01               	subwf	___ftge@ff1,w,c
  6059  00E12E  5005               	movf	___ftge@ff2+1,w,c
  6060  00E130  5802               	subwfb	___ftge@ff1+1,w,c
  6061  00E132  5006               	movf	___ftge@ff2+2,w,c
  6062  00E134  5803               	subwfb	___ftge@ff1+2,w,c
  6063  00E136  B0D8               	btfsc	status,0,c
  6064  00E138  D002               	goto	l3026
  6065  00E13A  90D8               	bcf	status,0,c
  6066  00E13C  0012               	return	
  6067  00E13E                     l3026:
  6068  00E13E  80D8               	bsf	status,0,c
  6069  00E140  0012               	return	
  6070  00E142                     __end_of___ftge:
  6071                           	opt stack 0
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function ___lwtoft *****************
  6089 ;; Defined at:
  6090 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  c               2    8[COMRAM] unsigned int 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  3    8[COMRAM] float 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        3 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    1
  6111 ;; This function calls:
  6112 ;;		___ftpack
  6113 ;; This function is called by:
  6114 ;;		_main
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text20
  6119  00D9EC                     __ptext20:
  6120                           	opt stack 0
  6121  00D9EC                     ___lwtoft:
  6122                           	opt stack 29
  6123                           
  6124                           ;incstack = 0
  6125  00D9EC  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6126  00D9F0  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6127  00D9F4  6A03               	clrf	___ftpack@arg+2,c
  6128  00D9F6  0E8E               	movlw	142
  6129  00D9F8  6E04               	movwf	___ftpack@exp,c
  6130  00D9FA  0E00               	movlw	0
  6131  00D9FC  6E05               	movwf	___ftpack@sign,c
  6132  00D9FE  ECF0  F070         	call	___ftpack	;wreg free
  6133  00DA02  C001  F009         	movff	?___ftpack,?___lwtoft
  6134  00DA06  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6135  00DA0A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6136  00DA0E  0012               	return	
  6137  00DA10                     __end_of___lwtoft:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function ___ftdiv *****************
  6156 ;; Defined at:
  6157 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  f1              3   35[COMRAM] float 
  6160 ;;  f2              3   38[COMRAM] float 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  f3              3   45[COMRAM] float 
  6163 ;;  sign            1   49[COMRAM] unsigned char 
  6164 ;;  exp             1   48[COMRAM] unsigned char 
  6165 ;;  cntr            1   44[COMRAM] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  3   35[COMRAM] float 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6175 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;Total ram usage:       15 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    1
  6182 ;; This function calls:
  6183 ;;		___ftpack
  6184 ;; This function is called by:
  6185 ;;		_main
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text21
  6190  00E28E                     __ptext21:
  6191                           	opt stack 0
  6192  00E28E                     ___ftdiv:
  6193                           	opt stack 29
  6194                           
  6195                           ;incstack = 0
  6196  00E28E  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  6197  00E292  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6198  00E294  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6199  00E296  3425               	rlcf	___ftdiv@f1+1,w,c
  6200  00E298  362A               	rlcf	??___ftdiv& (0+255),f,c
  6201  00E29A  E301               	bnc	u3421
  6202  00E29C  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6203  00E29E                     u3421:
  6204  00E29E  502A               	movf	??___ftdiv,w,c
  6205  00E2A0  6E31               	movwf	___ftdiv@exp,c
  6206  00E2A2  5031               	movf	___ftdiv@exp,w,c
  6207  00E2A4  A4D8               	btfss	status,2,c
  6208  00E2A6  D007               	goto	l3562
  6209  00E2A8  0E00               	movlw	0
  6210  00E2AA  6E24               	movwf	?___ftdiv,c
  6211  00E2AC  0E00               	movlw	0
  6212  00E2AE  6E25               	movwf	?___ftdiv+1,c
  6213  00E2B0  0E00               	movlw	0
  6214  00E2B2  6E26               	movwf	?___ftdiv+2,c
  6215  00E2B4  0012               	return	
  6216  00E2B6                     l3562:
  6217  00E2B6  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  6218  00E2BA  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6219  00E2BC  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6220  00E2BE  3428               	rlcf	___ftdiv@f2+1,w,c
  6221  00E2C0  362A               	rlcf	??___ftdiv& (0+255),f,c
  6222  00E2C2  E301               	bnc	u3441
  6223  00E2C4  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6224  00E2C6                     u3441:
  6225  00E2C6  502A               	movf	??___ftdiv,w,c
  6226  00E2C8  6E32               	movwf	___ftdiv@sign,c
  6227  00E2CA  5032               	movf	___ftdiv@sign,w,c
  6228  00E2CC  A4D8               	btfss	status,2,c
  6229  00E2CE  D007               	goto	l3568
  6230  00E2D0  0E00               	movlw	0
  6231  00E2D2  6E24               	movwf	?___ftdiv,c
  6232  00E2D4  0E00               	movlw	0
  6233  00E2D6  6E25               	movwf	?___ftdiv+1,c
  6234  00E2D8  0E00               	movlw	0
  6235  00E2DA  6E26               	movwf	?___ftdiv+2,c
  6236  00E2DC  0012               	return	
  6237  00E2DE                     l3568:
  6238  00E2DE  0E00               	movlw	0
  6239  00E2E0  6E2E               	movwf	___ftdiv@f3,c
  6240  00E2E2  0E00               	movlw	0
  6241  00E2E4  6E2F               	movwf	___ftdiv@f3+1,c
  6242  00E2E6  0E00               	movlw	0
  6243  00E2E8  6E30               	movwf	___ftdiv@f3+2,c
  6244  00E2EA  5032               	movf	___ftdiv@sign,w,c
  6245  00E2EC  0F89               	addlw	137
  6246  00E2EE  5E31               	subwf	___ftdiv@exp,f,c
  6247  00E2F0  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  6248  00E2F4  5029               	movf	___ftdiv@f2+2,w,c
  6249  00E2F6  1A32               	xorwf	___ftdiv@sign,f,c
  6250  00E2F8  0E80               	movlw	128
  6251  00E2FA  1632               	andwf	___ftdiv@sign,f,c
  6252  00E2FC  8E25               	bsf	___ftdiv@f1+1,7,c
  6253  00E2FE  0EFF               	movlw	255
  6254  00E300  1624               	andwf	___ftdiv@f1,f,c
  6255  00E302  0EFF               	movlw	255
  6256  00E304  1625               	andwf	___ftdiv@f1+1,f,c
  6257  00E306  0E00               	movlw	0
  6258  00E308  1626               	andwf	___ftdiv@f1+2,f,c
  6259  00E30A  8E28               	bsf	___ftdiv@f2+1,7,c
  6260  00E30C  0EFF               	movlw	255
  6261  00E30E  1627               	andwf	___ftdiv@f2,f,c
  6262  00E310  0EFF               	movlw	255
  6263  00E312  1628               	andwf	___ftdiv@f2+1,f,c
  6264  00E314  0E00               	movlw	0
  6265  00E316  1629               	andwf	___ftdiv@f2+2,f,c
  6266  00E318  0E18               	movlw	24
  6267  00E31A  6E2D               	movwf	___ftdiv@cntr,c
  6268  00E31C                     l3588:
  6269  00E31C  90D8               	bcf	status,0,c
  6270  00E31E  362E               	rlcf	___ftdiv@f3,f,c
  6271  00E320  362F               	rlcf	___ftdiv@f3+1,f,c
  6272  00E322  3630               	rlcf	___ftdiv@f3+2,f,c
  6273  00E324  5027               	movf	___ftdiv@f2,w,c
  6274  00E326  5C24               	subwf	___ftdiv@f1,w,c
  6275  00E328  5028               	movf	___ftdiv@f2+1,w,c
  6276  00E32A  5825               	subwfb	___ftdiv@f1+1,w,c
  6277  00E32C  5029               	movf	___ftdiv@f2+2,w,c
  6278  00E32E  5826               	subwfb	___ftdiv@f1+2,w,c
  6279  00E330  A0D8               	btfss	status,0,c
  6280  00E332  D007               	goto	l729
  6281  00E334  5027               	movf	___ftdiv@f2,w,c
  6282  00E336  5E24               	subwf	___ftdiv@f1,f,c
  6283  00E338  5028               	movf	___ftdiv@f2+1,w,c
  6284  00E33A  5A25               	subwfb	___ftdiv@f1+1,f,c
  6285  00E33C  5029               	movf	___ftdiv@f2+2,w,c
  6286  00E33E  5A26               	subwfb	___ftdiv@f1+2,f,c
  6287  00E340  802E               	bsf	___ftdiv@f3,0,c
  6288  00E342                     l729:
  6289  00E342  90D8               	bcf	status,0,c
  6290  00E344  3624               	rlcf	___ftdiv@f1,f,c
  6291  00E346  3625               	rlcf	___ftdiv@f1+1,f,c
  6292  00E348  3626               	rlcf	___ftdiv@f1+2,f,c
  6293  00E34A  2E2D               	decfsz	___ftdiv@cntr,f,c
  6294  00E34C  D7E7               	goto	l3588
  6295  00E34E  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6296  00E352  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6297  00E356  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6298  00E35A  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6299  00E35E  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6300  00E362  ECF0  F070         	call	___ftpack	;wreg free
  6301  00E366  C001  F024         	movff	?___ftpack,?___ftdiv
  6302  00E36A  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6303  00E36E  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6304  00E372  0012               	return	
  6305  00E374                     __end_of___ftdiv:
  6306                           	opt stack 0
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           intcon	equ	0xFF2
  6314                           postinc0	equ	0xFEE
  6315                           wreg	equ	0xFE8
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function ___ftpack *****************
  6324 ;; Defined at:
  6325 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  arg             3    0[COMRAM] unsigned um
  6328 ;;  exp             1    3[COMRAM] unsigned char 
  6329 ;;  sign            1    4[COMRAM] unsigned char 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;		None
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  3    0[COMRAM] float 
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6341 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;Total ram usage:        8 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		___ftadd
  6351 ;;		___ftdiv
  6352 ;;		___ftmul
  6353 ;;		___lltoft
  6354 ;;		___lwtoft
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text22
  6359  00E1E0                     __ptext22:
  6360                           	opt stack 0
  6361  00E1E0                     ___ftpack:
  6362                           	opt stack 27
  6363                           
  6364                           ;incstack = 0
  6365  00E1E0  5004               	movf	___ftpack@exp,w,c
  6366  00E1E2  B4D8               	btfsc	status,2,c
  6367  00E1E4  D005               	goto	l2402
  6368  00E1E6  5001               	movf	___ftpack@arg,w,c
  6369  00E1E8  1002               	iorwf	___ftpack@arg+1,w,c
  6370  00E1EA  1003               	iorwf	___ftpack@arg+2,w,c
  6371  00E1EC  A4D8               	btfss	status,2,c
  6372  00E1EE  D00C               	goto	l2408
  6373  00E1F0                     l2402:
  6374  00E1F0  0E00               	movlw	0
  6375  00E1F2  6E01               	movwf	?___ftpack,c
  6376  00E1F4  0E00               	movlw	0
  6377  00E1F6  6E02               	movwf	?___ftpack+1,c
  6378  00E1F8  0E00               	movlw	0
  6379  00E1FA  6E03               	movwf	?___ftpack+2,c
  6380  00E1FC  0012               	return	
  6381  00E1FE                     l2406:
  6382  00E1FE  2A04               	incf	___ftpack@exp,f,c
  6383  00E200  90D8               	bcf	status,0,c
  6384  00E202  3203               	rrcf	___ftpack@arg+2,f,c
  6385  00E204  3202               	rrcf	___ftpack@arg+1,f,c
  6386  00E206  3201               	rrcf	___ftpack@arg,f,c
  6387  00E208                     l2408:
  6388  00E208  0E00               	movlw	0
  6389  00E20A  1401               	andwf	___ftpack@arg,w,c
  6390  00E20C  6E06               	movwf	??___ftpack& (0+255),c
  6391  00E20E  0E00               	movlw	0
  6392  00E210  1402               	andwf	___ftpack@arg+1,w,c
  6393  00E212  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6394  00E214  0EFE               	movlw	254
  6395  00E216  1403               	andwf	___ftpack@arg+2,w,c
  6396  00E218  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6397  00E21A  5006               	movf	??___ftpack,w,c
  6398  00E21C  1007               	iorwf	??___ftpack+1,w,c
  6399  00E21E  1008               	iorwf	??___ftpack+2,w,c
  6400  00E220  B4D8               	btfsc	status,2,c
  6401  00E222  D00C               	goto	l2414
  6402  00E224  D7EC               	goto	l2406
  6403  00E226                     l2410:
  6404  00E226  2A04               	incf	___ftpack@exp,f,c
  6405  00E228  0E01               	movlw	1
  6406  00E22A  2601               	addwf	___ftpack@arg,f,c
  6407  00E22C  0E00               	movlw	0
  6408  00E22E  2202               	addwfc	___ftpack@arg+1,f,c
  6409  00E230  0E00               	movlw	0
  6410  00E232  2203               	addwfc	___ftpack@arg+2,f,c
  6411  00E234  90D8               	bcf	status,0,c
  6412  00E236  3203               	rrcf	___ftpack@arg+2,f,c
  6413  00E238  3202               	rrcf	___ftpack@arg+1,f,c
  6414  00E23A  3201               	rrcf	___ftpack@arg,f,c
  6415  00E23C                     l2414:
  6416  00E23C  0E00               	movlw	0
  6417  00E23E  1401               	andwf	___ftpack@arg,w,c
  6418  00E240  6E06               	movwf	??___ftpack& (0+255),c
  6419  00E242  0E00               	movlw	0
  6420  00E244  1402               	andwf	___ftpack@arg+1,w,c
  6421  00E246  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6422  00E248  0EFF               	movlw	255
  6423  00E24A  1403               	andwf	___ftpack@arg+2,w,c
  6424  00E24C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6425  00E24E  5006               	movf	??___ftpack,w,c
  6426  00E250  1007               	iorwf	??___ftpack+1,w,c
  6427  00E252  1008               	iorwf	??___ftpack+2,w,c
  6428  00E254  B4D8               	btfsc	status,2,c
  6429  00E256  D006               	goto	l2418
  6430  00E258  D7E6               	goto	l2410
  6431  00E25A                     l2416:
  6432  00E25A  0604               	decf	___ftpack@exp,f,c
  6433  00E25C  90D8               	bcf	status,0,c
  6434  00E25E  3601               	rlcf	___ftpack@arg,f,c
  6435  00E260  3602               	rlcf	___ftpack@arg+1,f,c
  6436  00E262  3603               	rlcf	___ftpack@arg+2,f,c
  6437  00E264                     l2418:
  6438  00E264  BE02               	btfsc	___ftpack@arg+1,7,c
  6439  00E266  D003               	goto	l671
  6440  00E268  0E02               	movlw	2
  6441  00E26A  6004               	cpfslt	___ftpack@exp,c
  6442  00E26C  D7F6               	goto	l2416
  6443  00E26E                     l671:
  6444  00E26E  A004               	btfss	___ftpack@exp,0,c
  6445  00E270  9E02               	bcf	___ftpack@arg+1,7,c
  6446  00E272  90D8               	bcf	status,0,c
  6447  00E274  3204               	rrcf	___ftpack@exp,f,c
  6448  00E276  5004               	movf	___ftpack@exp,w,c
  6449  00E278  1203               	iorwf	___ftpack@arg+2,f,c
  6450  00E27A  5005               	movf	___ftpack@sign,w,c
  6451  00E27C  A4D8               	btfss	status,2,c
  6452  00E27E  8E03               	bsf	___ftpack@arg+2,7,c
  6453  00E280  C001  F001         	movff	___ftpack@arg,?___ftpack
  6454  00E284  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6455  00E288  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6456  00E28C  0012               	return	
  6457  00E28E                     __end_of___ftpack:
  6458                           	opt stack 0
  6459                           tblptru	equ	0xFF8
  6460                           tblptrh	equ	0xFF7
  6461                           tblptrl	equ	0xFF6
  6462                           tablat	equ	0xFF5
  6463                           prodh	equ	0xFF4
  6464                           prodl	equ	0xFF3
  6465                           intcon	equ	0xFF2
  6466                           postinc0	equ	0xFEE
  6467                           wreg	equ	0xFE8
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _WriteTimer0 *****************
  6476 ;; Defined at:
  6477 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\Timers\t0write.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  timer0          2    0[COMRAM] unsigned int 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  timer           2    2[COMRAM] struct Timers
  6482 ;; Return value:  Size  Location     Type
  6483 ;;		None               void
  6484 ;; Registers used:
  6485 ;;		None
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:        4 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text23
  6505  00D96E                     __ptext23:
  6506                           	opt stack 0
  6507  00D96E                     _WriteTimer0:
  6508                           	opt stack 30
  6509                           
  6510                           ;incstack = 0
  6511  00D96E  C001  F003         	movff	WriteTimer0@timer0,WriteTimer0@timer
  6512  00D972  C002  F004         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  6513  00D976  C004  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  6514  00D97A  C003  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  6515  00D97E  0012               	return		;funcret
  6516  00D980                     __end_of_WriteTimer0:
  6517                           	opt stack 0
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           postinc0	equ	0xFEE
  6526                           wreg	equ	0xFE8
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _USARTOut *****************
  6535 ;; Defined at:
  6536 ;;		line 100 in file "motion.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  data            2    6[COMRAM] PTR unsigned char 
  6539 ;;		 -> Text(128), 
  6540 ;;  bytes           1    8[COMRAM] unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  i               2   12[COMRAM] int 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;		None               void
  6545 ;; Registers used:
  6546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6552 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;Total ram usage:        8 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    1
  6559 ;; This function calls:
  6560 ;;		_WriteUSART
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text24
  6567  00DB3E                     __ptext24:
  6568                           	opt stack 0
  6569  00DB3E                     _USARTOut:
  6570                           	opt stack 29
  6571                           
  6572                           ;motion.c: 102: int i;
  6573                           ;motion.c: 103: for(i=0; i<bytes; i++)
  6574                           
  6575                           ;incstack = 0
  6576  00DB3E  0E00               	movlw	0
  6577  00DB40  6E0E               	movwf	USARTOut@i+1,c
  6578  00DB42  0E00               	movlw	0
  6579  00DB44  6E0D               	movwf	USARTOut@i,c
  6580  00DB46  D00D               	goto	l3252
  6581  00DB48                     l102:
  6582  00DB48  A2AC               	btfss	4012,1,c	;volatile
  6583  00DB4A  D7FE               	goto	l102
  6584                           
  6585                           ;motion.c: 106: WriteUSART(data[i]);
  6586  00DB4C  500D               	movf	USARTOut@i,w,c
  6587  00DB4E  2407               	addwf	USARTOut@data,w,c
  6588  00DB50  6ED9               	movwf	fsr2l,c
  6589  00DB52  500E               	movf	USARTOut@i+1,w,c
  6590  00DB54  2008               	addwfc	USARTOut@data+1,w,c
  6591  00DB56  6EDA               	movwf	fsr2h,c
  6592  00DB58  50DF               	movf	indf2,w,c
  6593  00DB5A  ECAE  F06C         	call	_WriteUSART
  6594  00DB5E  4A0D               	infsnz	USARTOut@i,f,c
  6595  00DB60  2A0E               	incf	USARTOut@i+1,f,c
  6596  00DB62                     l3252:
  6597  00DB62  5009               	movf	USARTOut@bytes,w,c
  6598  00DB64  6E0A               	movwf	??_USARTOut& (0+255),c
  6599  00DB66  6A0B               	clrf	(??_USARTOut+1)& (0+255),c
  6600  00DB68  500A               	movf	??_USARTOut,w,c
  6601  00DB6A  5C0D               	subwf	USARTOut@i,w,c
  6602  00DB6C  500E               	movf	USARTOut@i+1,w,c
  6603  00DB6E  0A80               	xorlw	128
  6604  00DB70  6E0C               	movwf	(??_USARTOut+2)& (0+255),c
  6605  00DB72  500B               	movf	??_USARTOut+1,w,c
  6606  00DB74  0A80               	xorlw	128
  6607  00DB76  580C               	subwfb	(??_USARTOut+2)& (0+255),w,c
  6608  00DB78  B0D8               	btfsc	status,0,c
  6609  00DB7A  0012               	return	
  6610  00DB7C  D7E5               	goto	l102
  6611  00DB7E                     __end_of_USARTOut:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           postinc0	equ	0xFEE
  6621                           wreg	equ	0xFE8
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _WriteUSART *****************
  6630 ;; Defined at:
  6631 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uwrite.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  data            1    wreg     unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  data            1    0[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;Total ram usage:        1 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; This function calls:
  6652 ;;		Nothing
  6653 ;; This function is called by:
  6654 ;;		_USARTOut
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           	psect	text25
  6659  00D95C                     __ptext25:
  6660                           	opt stack 0
  6661  00D95C                     _WriteUSART:
  6662                           	opt stack 29
  6663                           
  6664                           ;incstack = 0
  6665                           ;WriteUSART@data stored from wreg
  6666  00D95C  6E01               	movwf	WriteUSART@data,c
  6667  00D95E  ACAC               	btfss	4012,6,c	;volatile
  6668  00D960  D003               	goto	l2786
  6669  00D962  90AC               	bcf	4012,0,c	;volatile
  6670  00D964  B27D               	btfsc	_USART_Status,1,c
  6671  00D966  80AC               	bsf	4012,0,c	;volatile
  6672  00D968                     l2786:
  6673  00D968  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  6674  00D96C  0012               	return		;funcret
  6675  00D96E                     __end_of_WriteUSART:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon	equ	0xFF2
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           indf2	equ	0xFDF
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _SetChannel *****************
  6694 ;; Defined at:
  6695 ;;		line 293 in file "MRF24J40.h"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;  channel         1    wreg     unsigned char 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  channel         1    8[COMRAM] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;		None               void
  6702 ;; Registers used:
  6703 ;;		wreg, status,2, status,0, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        1 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    2
  6716 ;; This function calls:
  6717 ;;		_SetLongRAMAddr
  6718 ;;		_SetShortRAMAddr
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text26
  6725  00DAAC                     __ptext26:
  6726                           	opt stack 0
  6727  00DAAC                     _SetChannel:
  6728                           	opt stack 28
  6729                           
  6730                           ;incstack = 0
  6731                           ;SetChannel@channel stored from wreg
  6732  00DAAC  6E09               	movwf	SetChannel@channel,c
  6733                           
  6734                           ;MRF24J40.h: 295: SetLongRAMAddr((0x200), (channel | 0x02));
  6735  00DAAE  0E02               	movlw	2
  6736  00DAB0  6E04               	movwf	SetLongRAMAddr@address+1,c
  6737  00DAB2  0E00               	movlw	0
  6738  00DAB4  6E03               	movwf	SetLongRAMAddr@address,c
  6739  00DAB6  5009               	movf	SetChannel@channel,w,c
  6740  00DAB8  0902               	iorlw	2
  6741  00DABA  6E05               	movwf	SetLongRAMAddr@value,c
  6742  00DABC  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6743                           
  6744                           ;MRF24J40.h: 296: SetShortRAMAddr((0x6D),0x04);
  6745  00DAC0  0E04               	movlw	4
  6746  00DAC2  6E03               	movwf	SetShortRAMAddr@value,c
  6747  00DAC4  0E6D               	movlw	109
  6748  00DAC6  EC2D  F06D         	call	_SetShortRAMAddr
  6749                           
  6750                           ;MRF24J40.h: 297: SetShortRAMAddr((0x6D),0x00);
  6751  00DACA  0E00               	movlw	0
  6752  00DACC  6E03               	movwf	SetShortRAMAddr@value,c
  6753  00DACE  0E6D               	movlw	109
  6754  00DAD0  EC2D  F06D         	call	_SetShortRAMAddr
  6755  00DAD4  0012               	return		;funcret
  6756  00DAD6                     __end_of_SetChannel:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _PHYTransmit *****************
  6775 ;; Defined at:
  6776 ;;		line 340 in file "MRF24J40.h"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  Data            2    8[COMRAM] PTR unsigned char 
  6779 ;;		 -> TxPacket(13), 
  6780 ;;  NoBytes         1   10[COMRAM] unsigned char 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  i               1   11[COMRAM] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6792 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;Total ram usage:        4 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    2
  6799 ;; This function calls:
  6800 ;;		_SetLongRAMAddr
  6801 ;;		_SetShortRAMAddr
  6802 ;; This function is called by:
  6803 ;;		_main
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text27
  6808  00E374                     __ptext27:
  6809                           	opt stack 0
  6810  00E374                     _PHYTransmit:
  6811                           	opt stack 28
  6812                           
  6813                           ;MRF24J40.h: 342: unsigned char i;
  6814                           ;MRF24J40.h: 343: SetLongRAMAddr(0,NoBytes+9);
  6815                           
  6816                           ;incstack = 0
  6817  00E374  0E00               	movlw	0
  6818  00E376  6E04               	movwf	SetLongRAMAddr@address+1,c
  6819  00E378  0E00               	movlw	0
  6820  00E37A  6E03               	movwf	SetLongRAMAddr@address,c
  6821  00E37C  500B               	movf	PHYTransmit@NoBytes,w,c
  6822  00E37E  0F09               	addlw	9
  6823  00E380  6E05               	movwf	SetLongRAMAddr@value,c
  6824  00E382  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6825                           
  6826                           ;MRF24J40.h: 344: SetLongRAMAddr(1,NoBytes+9);
  6827  00E386  0E00               	movlw	0
  6828  00E388  6E04               	movwf	SetLongRAMAddr@address+1,c
  6829  00E38A  0E01               	movlw	1
  6830  00E38C  6E03               	movwf	SetLongRAMAddr@address,c
  6831  00E38E  500B               	movf	PHYTransmit@NoBytes,w,c
  6832  00E390  0F09               	addlw	9
  6833  00E392  6E05               	movwf	SetLongRAMAddr@value,c
  6834  00E394  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6835                           
  6836                           ;MRF24J40.h: 345: SetLongRAMAddr(2,0x01);
  6837  00E398  0E00               	movlw	0
  6838  00E39A  6E04               	movwf	SetLongRAMAddr@address+1,c
  6839  00E39C  0E02               	movlw	2
  6840  00E39E  6E03               	movwf	SetLongRAMAddr@address,c
  6841  00E3A0  0E01               	movlw	1
  6842  00E3A2  6E05               	movwf	SetLongRAMAddr@value,c
  6843  00E3A4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6844                           
  6845                           ;MRF24J40.h: 346: SetLongRAMAddr(3,0x88);
  6846  00E3A8  0E00               	movlw	0
  6847  00E3AA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6848  00E3AC  0E03               	movlw	3
  6849  00E3AE  6E03               	movwf	SetLongRAMAddr@address,c
  6850  00E3B0  0E88               	movlw	136
  6851  00E3B2  6E05               	movwf	SetLongRAMAddr@value,c
  6852  00E3B4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6853                           
  6854                           ;MRF24J40.h: 347: SetLongRAMAddr(4,0x01);
  6855  00E3B8  0E00               	movlw	0
  6856  00E3BA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6857  00E3BC  0E04               	movlw	4
  6858  00E3BE  6E03               	movwf	SetLongRAMAddr@address,c
  6859  00E3C0  0E01               	movlw	1
  6860  00E3C2  6E05               	movwf	SetLongRAMAddr@value,c
  6861  00E3C4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6862                           
  6863                           ;MRF24J40.h: 348: SetLongRAMAddr(5,0xFF);
  6864  00E3C8  0E00               	movlw	0
  6865  00E3CA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6866  00E3CC  0E05               	movlw	5
  6867  00E3CE  6E03               	movwf	SetLongRAMAddr@address,c
  6868  00E3D0  0EFF               	movlw	255
  6869  00E3D2  6E05               	movwf	SetLongRAMAddr@value,c
  6870  00E3D4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6871                           
  6872                           ;MRF24J40.h: 349: SetLongRAMAddr(6,0xFF);
  6873  00E3D8  0E00               	movlw	0
  6874  00E3DA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6875  00E3DC  0E06               	movlw	6
  6876  00E3DE  6E03               	movwf	SetLongRAMAddr@address,c
  6877  00E3E0  0EFF               	movlw	255
  6878  00E3E2  6E05               	movwf	SetLongRAMAddr@value,c
  6879  00E3E4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6880                           
  6881                           ;MRF24J40.h: 350: SetLongRAMAddr(7,0xFF);
  6882  00E3E8  0E00               	movlw	0
  6883  00E3EA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6884  00E3EC  0E07               	movlw	7
  6885  00E3EE  6E03               	movwf	SetLongRAMAddr@address,c
  6886  00E3F0  0EFF               	movlw	255
  6887  00E3F2  6E05               	movwf	SetLongRAMAddr@value,c
  6888  00E3F4  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6889                           
  6890                           ;MRF24J40.h: 351: SetLongRAMAddr(8,0xFF);
  6891  00E3F8  0E00               	movlw	0
  6892  00E3FA  6E04               	movwf	SetLongRAMAddr@address+1,c
  6893  00E3FC  0E08               	movlw	8
  6894  00E3FE  6E03               	movwf	SetLongRAMAddr@address,c
  6895  00E400  0EFF               	movlw	255
  6896  00E402  6E05               	movwf	SetLongRAMAddr@value,c
  6897  00E404  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6898                           
  6899                           ;MRF24J40.h: 352: SetLongRAMAddr(9,0xFF);
  6900  00E408  0E00               	movlw	0
  6901  00E40A  6E04               	movwf	SetLongRAMAddr@address+1,c
  6902  00E40C  0E09               	movlw	9
  6903  00E40E  6E03               	movwf	SetLongRAMAddr@address,c
  6904  00E410  0EFF               	movlw	255
  6905  00E412  6E05               	movwf	SetLongRAMAddr@value,c
  6906  00E414  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6907                           
  6908                           ;MRF24J40.h: 353: SetLongRAMAddr(10,0xFF);
  6909  00E418  0E00               	movlw	0
  6910  00E41A  6E04               	movwf	SetLongRAMAddr@address+1,c
  6911  00E41C  0E0A               	movlw	10
  6912  00E41E  6E03               	movwf	SetLongRAMAddr@address,c
  6913  00E420  0EFF               	movlw	255
  6914  00E422  6E05               	movwf	SetLongRAMAddr@value,c
  6915  00E424  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6916                           
  6917                           ;MRF24J40.h: 354: for(i=0; i<NoBytes; i++) SetLongRAMAddr(11+i,Data[i]);
  6918  00E428  0E00               	movlw	0
  6919  00E42A  6E0C               	movwf	PHYTransmit@i,c
  6920  00E42C  D013               	goto	l3184
  6921  00E42E                     l3180:
  6922  00E42E  0E0B               	movlw	11
  6923  00E430  240C               	addwf	PHYTransmit@i,w,c
  6924  00E432  6E03               	movwf	SetLongRAMAddr@address,c
  6925  00E434  6A04               	clrf	SetLongRAMAddr@address+1,c
  6926  00E436  0E00               	movlw	0
  6927  00E438  2204               	addwfc	SetLongRAMAddr@address+1,f,c
  6928  00E43A  500C               	movf	PHYTransmit@i,w,c
  6929  00E43C  0D01               	mullw	1
  6930  00E43E  50F3               	movf	prodl,w,c
  6931  00E440  2409               	addwf	PHYTransmit@Data,w,c
  6932  00E442  6ED9               	movwf	fsr2l,c
  6933  00E444  50F4               	movf	prodh,w,c
  6934  00E446  200A               	addwfc	PHYTransmit@Data+1,w,c
  6935  00E448  6EDA               	movwf	fsr2h,c
  6936  00E44A  50DF               	movf	indf2,w,c
  6937  00E44C  6E05               	movwf	SetLongRAMAddr@value,c
  6938  00E44E  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  6939  00E452  2A0C               	incf	PHYTransmit@i,f,c
  6940  00E454                     l3184:
  6941  00E454  500B               	movf	PHYTransmit@NoBytes,w,c
  6942  00E456  5C0C               	subwf	PHYTransmit@i,w,c
  6943  00E458  A0D8               	btfss	status,0,c
  6944  00E45A  D7E9               	goto	l3180
  6945                           
  6946                           ;MRF24J40.h: 355: SetShortRAMAddr((0x37),0b00000001);
  6947  00E45C  0E01               	movlw	1
  6948  00E45E  6E03               	movwf	SetShortRAMAddr@value,c
  6949  00E460  0E37               	movlw	55
  6950  00E462  EC2D  F06D         	call	_SetShortRAMAddr
  6951  00E466  0012               	return		;funcret
  6952  00E468                     __end_of_PHYTransmit:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon	equ	0xFF2
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _PHYReceive *****************
  6971 ;; Defined at:
  6972 ;;		line 362 in file "MRF24J40.h"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  Data            2    8[COMRAM] PTR unsigned char 
  6975 ;;		 -> RxPacket(13), 
  6976 ;;  Strength        2   10[COMRAM] PTR unsigned char 
  6977 ;;		 -> Strength(2), 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  i               1   14[COMRAM] unsigned char 
  6980 ;;  NoBytes         1   13[COMRAM] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      unsigned char 
  6983 ;; Registers used:
  6984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;Total ram usage:        7 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    2
  6997 ;; This function calls:
  6998 ;;		_GetLongRAMAddr
  6999 ;;		_GetShortRAMAddr
  7000 ;;		_SetShortRAMAddr
  7001 ;; This function is called by:
  7002 ;;		_main
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           	psect	text28
  7007  00DF32                     __ptext28:
  7008                           	opt stack 0
  7009  00DF32                     _PHYReceive:
  7010                           	opt stack 28
  7011                           
  7012                           ;MRF24J40.h: 364: unsigned char NoBytes,i;
  7013                           ;MRF24J40.h: 365: if(GetShortRAMAddr((0x62)) & 0x08)
  7014                           
  7015                           ;incstack = 0
  7016  00DF32  0E62               	movlw	98
  7017  00DF34  EC41  F06D         	call	_GetShortRAMAddr
  7018  00DF38  6E0D               	movwf	??_PHYReceive& (0+255),c
  7019  00DF3A  A60D               	btfss	??_PHYReceive,3,c
  7020  00DF3C  D035               	goto	l3210
  7021                           
  7022                           ;MRF24J40.h: 366: {
  7023                           ;MRF24J40.h: 367: NoBytes = GetLongRAMAddr((0x300))-11;
  7024  00DF3E  0E03               	movlw	3
  7025  00DF40  6E04               	movwf	GetLongRAMAddr@address+1,c
  7026  00DF42  0E00               	movlw	0
  7027  00DF44  6E03               	movwf	GetLongRAMAddr@address,c
  7028  00DF46  EC4B  F06E         	call	_GetLongRAMAddr	;wreg free
  7029  00DF4A  0FF5               	addlw	245
  7030  00DF4C  6E0E               	movwf	PHYReceive@NoBytes,c
  7031                           
  7032                           ;MRF24J40.h: 368: for(i=0; i<NoBytes; i++) Data[i] = GetLongRAMAddr((0x300)+10+i);
  7033  00DF4E  0E00               	movlw	0
  7034  00DF50  6E0F               	movwf	PHYReceive@i,c
  7035  00DF52  D012               	goto	l3198
  7036  00DF54                     l3194:
  7037  00DF54  500F               	movf	PHYReceive@i,w,c
  7038  00DF56  0D01               	mullw	1
  7039  00DF58  50F3               	movf	prodl,w,c
  7040  00DF5A  2409               	addwf	PHYReceive@Data,w,c
  7041  00DF5C  6ED9               	movwf	fsr2l,c
  7042  00DF5E  50F4               	movf	prodh,w,c
  7043  00DF60  200A               	addwfc	PHYReceive@Data+1,w,c
  7044  00DF62  6EDA               	movwf	fsr2h,c
  7045  00DF64  0E0A               	movlw	10
  7046  00DF66  240F               	addwf	PHYReceive@i,w,c
  7047  00DF68  6E03               	movwf	GetLongRAMAddr@address,c
  7048  00DF6A  6A04               	clrf	GetLongRAMAddr@address+1,c
  7049  00DF6C  0E03               	movlw	3
  7050  00DF6E  2204               	addwfc	GetLongRAMAddr@address+1,f,c
  7051  00DF70  EC4B  F06E         	call	_GetLongRAMAddr	;wreg free
  7052  00DF74  6EDF               	movwf	indf2,c
  7053  00DF76  2A0F               	incf	PHYReceive@i,f,c
  7054  00DF78                     l3198:
  7055  00DF78  500E               	movf	PHYReceive@NoBytes,w,c
  7056  00DF7A  5C0F               	subwf	PHYReceive@i,w,c
  7057  00DF7C  A0D8               	btfss	status,0,c
  7058  00DF7E  D7EA               	goto	l3194
  7059                           
  7060                           ;MRF24J40.h: 369: *Strength = GetLongRAMAddr((0x300)+NoBytes+13);
  7061  00DF80  0E0D               	movlw	13
  7062  00DF82  240E               	addwf	PHYReceive@NoBytes,w,c
  7063  00DF84  6E03               	movwf	GetLongRAMAddr@address,c
  7064  00DF86  6A04               	clrf	GetLongRAMAddr@address+1,c
  7065  00DF88  0E03               	movlw	3
  7066  00DF8A  2204               	addwfc	GetLongRAMAddr@address+1,f,c
  7067  00DF8C  EC4B  F06E         	call	_GetLongRAMAddr	;wreg free
  7068  00DF90  C00B  FFD9         	movff	PHYReceive@Strength,fsr2l
  7069  00DF94  C00C  FFDA         	movff	PHYReceive@Strength+1,fsr2h
  7070  00DF98  6EDF               	movwf	indf2,c
  7071                           
  7072                           ;MRF24J40.h: 370: SetShortRAMAddr((0x1B),0x01);
  7073  00DF9A  0E01               	movlw	1
  7074  00DF9C  6E03               	movwf	SetShortRAMAddr@value,c
  7075  00DF9E  0E1B               	movlw	27
  7076  00DFA0  EC2D  F06D         	call	_SetShortRAMAddr
  7077                           
  7078                           ;MRF24J40.h: 371: return(NoBytes);
  7079  00DFA4  500E               	movf	PHYReceive@NoBytes,w,c
  7080                           
  7081                           ;MRF24J40.h: 372: }
  7082  00DFA6  0012               	return	
  7083  00DFA8                     l3210:
  7084                           
  7085                           ;MRF24J40.h: 373: else return(0);
  7086  00DFA8  0E00               	movlw	0
  7087  00DFAA  0012               	return	
  7088  00DFAC                     __end_of_PHYReceive:
  7089                           	opt stack 0
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           postinc0	equ	0xFEE
  7098                           wreg	equ	0xFE8
  7099                           indf2	equ	0xFDF
  7100                           postinc2	equ	0xFDE
  7101                           postdec2	equ	0xFDD
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _GetShortRAMAddr *****************
  7107 ;; Defined at:
  7108 ;;		line 254 in file "MRF24J40.h"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  address         1    wreg     unsigned char 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  address         1    2[COMRAM] unsigned char 
  7113 ;;  tmpINT0IE       1    4[COMRAM] volatile unsigned char 
  7114 ;;  toReturn        1    3[COMRAM] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      unsigned char 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;Total ram usage:        3 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    1
  7131 ;; This function calls:
  7132 ;;		_ReadSPI
  7133 ;;		_WriteSPI
  7134 ;; This function is called by:
  7135 ;;		_PHYReceive
  7136 ;;		_PHYGetRSSI
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text29
  7141  00DA82                     __ptext29:
  7142                           	opt stack 0
  7143  00DA82                     _GetShortRAMAddr:
  7144                           	opt stack 28
  7145                           
  7146                           ;incstack = 0
  7147                           ;GetShortRAMAddr@address stored from wreg
  7148  00DA82  6E03               	movwf	GetShortRAMAddr@address,c
  7149                           
  7150                           ;MRF24J40.h: 256: unsigned char toReturn;
  7151                           ;MRF24J40.h: 257: volatile unsigned char tmpINT0IE = INTCONbits.INT0IE;
  7152  00DA84  0E00               	movlw	0
  7153  00DA86  B8F2               	btfsc	intcon,4,c	;volatile
  7154  00DA88  0E01               	movlw	1
  7155  00DA8A  6E05               	movwf	GetShortRAMAddr@tmpINT0IE,c	;volatile
  7156                           
  7157                           ;MRF24J40.h: 258: INTCONbits.INT0IE = 0;
  7158  00DA8C  98F2               	bcf	intcon,4,c	;volatile
  7159                           
  7160                           ;MRF24J40.h: 259: PORTCbits.RC0 = 0;
  7161  00DA8E  9082               	bcf	3970,0,c	;volatile
  7162                           
  7163                           ;MRF24J40.h: 260: WriteSPI(address);
  7164  00DA90  5003               	movf	GetShortRAMAddr@address,w,c
  7165  00DA92  ECCB  F06C         	call	_WriteSPI
  7166                           
  7167                           ;MRF24J40.h: 261: toReturn = ReadSPI();
  7168  00DA96  ECA5  F06C         	call	_ReadSPI	;wreg free
  7169  00DA9A  6E04               	movwf	GetShortRAMAddr@toReturn,c
  7170                           
  7171                           ;MRF24J40.h: 262: PORTCbits.RC0 = 1;
  7172  00DA9C  8082               	bsf	3970,0,c	;volatile
  7173                           
  7174                           ;MRF24J40.h: 263: INTCONbits.INT0IE = tmpINT0IE;
  7175  00DA9E  B005               	btfsc	GetShortRAMAddr@tmpINT0IE,0,c	;volatile
  7176  00DAA0  D002               	bra	u2295
  7177  00DAA2  98F2               	bcf	intcon,4,c	;volatile
  7178  00DAA4  D001               	bra	u2296
  7179  00DAA6                     u2295:
  7180  00DAA6  88F2               	bsf	intcon,4,c	;volatile
  7181  00DAA8                     u2296:
  7182                           
  7183                           ;MRF24J40.h: 264: return toReturn;
  7184  00DAA8  5004               	movf	GetShortRAMAddr@toReturn,w,c
  7185  00DAAA  0012               	return	
  7186  00DAAC                     __end_of_GetShortRAMAddr:
  7187                           	opt stack 0
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodh	equ	0xFF4
  7193                           prodl	equ	0xFF3
  7194                           intcon	equ	0xFF2
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _GetLongRAMAddr *****************
  7205 ;; Defined at:
  7206 ;;		line 273 in file "MRF24J40.h"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  address         2    2[COMRAM] unsigned int 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  tmpINT0IE       1    7[COMRAM] volatile unsigned char 
  7211 ;;  toReturn        1    6[COMRAM] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      unsigned char 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;Total ram usage:        6 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    1
  7228 ;; This function calls:
  7229 ;;		_ReadSPI
  7230 ;;		_WriteSPI
  7231 ;; This function is called by:
  7232 ;;		_PHYReceive
  7233 ;;		_PHYGetRSSI
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text30
  7238  00DC96                     __ptext30:
  7239                           	opt stack 0
  7240  00DC96                     _GetLongRAMAddr:
  7241                           	opt stack 28
  7242                           
  7243                           ;MRF24J40.h: 275: unsigned char toReturn;
  7244                           ;MRF24J40.h: 276: volatile unsigned char tmpINT0IE = INTCONbits.INT0IE;
  7245                           
  7246                           ;incstack = 0
  7247  00DC96  0E00               	movlw	0
  7248  00DC98  B8F2               	btfsc	intcon,4,c	;volatile
  7249  00DC9A  0E01               	movlw	1
  7250  00DC9C  6E08               	movwf	GetLongRAMAddr@tmpINT0IE,c	;volatile
  7251                           
  7252                           ;MRF24J40.h: 277: INTCONbits.INT0IE = 0;
  7253  00DC9E  98F2               	bcf	intcon,4,c	;volatile
  7254                           
  7255                           ;MRF24J40.h: 278: PORTCbits.RC0 = 0;
  7256  00DCA0  9082               	bcf	3970,0,c	;volatile
  7257                           
  7258                           ;MRF24J40.h: 279: WriteSPI(((address>>3)&0b01111111)|0x80);
  7259  00DCA2  C003  F005         	movff	GetLongRAMAddr@address,??_GetLongRAMAddr
  7260  00DCA6  C004  F006         	movff	GetLongRAMAddr@address+1,??_GetLongRAMAddr+1
  7261  00DCAA  90D8               	bcf	status,0,c
  7262  00DCAC  3206               	rrcf	??_GetLongRAMAddr+1,f,c
  7263  00DCAE  3205               	rrcf	??_GetLongRAMAddr,f,c
  7264  00DCB0  90D8               	bcf	status,0,c
  7265  00DCB2  3206               	rrcf	??_GetLongRAMAddr+1,f,c
  7266  00DCB4  3205               	rrcf	??_GetLongRAMAddr,f,c
  7267  00DCB6  90D8               	bcf	status,0,c
  7268  00DCB8  3206               	rrcf	??_GetLongRAMAddr+1,f,c
  7269  00DCBA  3205               	rrcf	??_GetLongRAMAddr,f,c
  7270  00DCBC  5005               	movf	??_GetLongRAMAddr,w,c
  7271  00DCBE  0B7F               	andlw	127
  7272  00DCC0  0980               	iorlw	128
  7273  00DCC2  ECCB  F06C         	call	_WriteSPI
  7274                           
  7275                           ;MRF24J40.h: 280: WriteSPI(((address<<5)&0b11100000));
  7276  00DCC6  3803               	swapf	GetLongRAMAddr@address,w,c
  7277  00DCC8  46E8               	rlncf	wreg,f,c
  7278  00DCCA  0BE0               	andlw	224
  7279  00DCCC  0BE0               	andlw	224
  7280  00DCCE  ECCB  F06C         	call	_WriteSPI
  7281                           
  7282                           ;MRF24J40.h: 281: toReturn = ReadSPI();
  7283  00DCD2  ECA5  F06C         	call	_ReadSPI	;wreg free
  7284  00DCD6  6E07               	movwf	GetLongRAMAddr@toReturn,c
  7285                           
  7286                           ;MRF24J40.h: 282: PORTCbits.RC0 = 1;
  7287  00DCD8  8082               	bsf	3970,0,c	;volatile
  7288                           
  7289                           ;MRF24J40.h: 283: INTCONbits.INT0IE = tmpINT0IE;
  7290  00DCDA  B008               	btfsc	GetLongRAMAddr@tmpINT0IE,0,c	;volatile
  7291  00DCDC  D002               	bra	u2305
  7292  00DCDE  98F2               	bcf	intcon,4,c	;volatile
  7293  00DCE0  D001               	bra	u2306
  7294  00DCE2                     u2305:
  7295  00DCE2  88F2               	bsf	intcon,4,c	;volatile
  7296  00DCE4                     u2306:
  7297                           
  7298                           ;MRF24J40.h: 284: return toReturn;
  7299  00DCE4  5007               	movf	GetLongRAMAddr@toReturn,w,c
  7300  00DCE6  0012               	return	
  7301  00DCE8                     __end_of_GetLongRAMAddr:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           postinc0	equ	0xFEE
  7311                           wreg	equ	0xFE8
  7312                           indf2	equ	0xFDF
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function _ReadSPI *****************
  7320 ;; Defined at:
  7321 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\SPI\spi_read.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  TempVar         1    0[COMRAM] unsigned char 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  1    wreg      unsigned char 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;Total ram usage:        1 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_GetShortRAMAddr
  7345 ;;		_GetLongRAMAddr
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text31
  7350  00D94A                     __ptext31:
  7351                           	opt stack 0
  7352  00D94A                     _ReadSPI:
  7353                           	opt stack 28
  7354                           
  7355                           ;incstack = 0
  7356  00D94A  CFC9 F001          	movff	4041,ReadSPI@TempVar	;volatile
  7357  00D94E  969E               	bcf	3998,3,c	;volatile
  7358  00D950  0E00               	movlw	0
  7359  00D952  6EC9               	movwf	4041,c	;volatile
  7360  00D954                     l337:
  7361  00D954  A69E               	btfss	3998,3,c	;volatile
  7362  00D956  D7FE               	goto	l337
  7363  00D958  50C9               	movf	4041,w,c	;volatile
  7364  00D95A  0012               	return	
  7365  00D95C                     __end_of_ReadSPI:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           prodh	equ	0xFF4
  7372                           prodl	equ	0xFF3
  7373                           intcon	equ	0xFF2
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           indf2	equ	0xFDF
  7377                           postinc2	equ	0xFDE
  7378                           postdec2	equ	0xFDD
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _OpenTimer0 *****************
  7384 ;; Defined at:
  7385 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\Timers\t0open.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  config          1    wreg     unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  config          1    0[COMRAM] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:        1 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; This function calls:
  7406 ;;		Nothing
  7407 ;; This function is called by:
  7408 ;;		_main
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text32
  7413  00D9CC                     __ptext32:
  7414                           	opt stack 0
  7415  00D9CC                     _OpenTimer0:
  7416                           	opt stack 30
  7417                           
  7418                           ;incstack = 0
  7419                           ;OpenTimer0@config stored from wreg
  7420  00D9CC  6E01               	movwf	OpenTimer0@config,c
  7421  00D9CE  5001               	movf	OpenTimer0@config,w,c
  7422  00D9D0  0B7F               	andlw	127
  7423  00D9D2  6ED5               	movwf	4053,c	;volatile
  7424  00D9D4  0E00               	movlw	0
  7425  00D9D6  6ED7               	movwf	4055,c	;volatile
  7426  00D9D8  0E00               	movlw	0
  7427  00D9DA  6ED6               	movwf	4054,c	;volatile
  7428  00D9DC  94F2               	bcf	intcon,2,c	;volatile
  7429  00D9DE  AE01               	btfss	OpenTimer0@config,7,c
  7430  00D9E0  D002               	goto	l369
  7431  00D9E2  8AF2               	bsf	intcon,5,c	;volatile
  7432  00D9E4  D001               	goto	l370
  7433  00D9E6                     l369:
  7434  00D9E6  9AF2               	bcf	intcon,5,c	;volatile
  7435  00D9E8                     l370:
  7436  00D9E8  8ED5               	bsf	4053,7,c	;volatile
  7437  00D9EA  0012               	return		;funcret
  7438  00D9EC                     __end_of_OpenTimer0:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           postinc0	equ	0xFEE
  7448                           wreg	equ	0xFE8
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _MRF24J40Init *****************
  7457 ;; Defined at:
  7458 ;;		line 304 in file "MRF24J40.h"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  j               2    8[COMRAM] unsigned int 
  7463 ;;  i               1    0        unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;		None               void
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        2 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    2
  7480 ;; This function calls:
  7481 ;;		_SetLongRAMAddr
  7482 ;;		_SetShortRAMAddr
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text33
  7489  00E650                     __ptext33:
  7490                           	opt stack 0
  7491  00E650                     _MRF24J40Init:
  7492                           	opt stack 28
  7493                           
  7494                           ;MRF24J40.h: 306: unsigned char i;
  7495                           ;MRF24J40.h: 307: unsigned int j;
  7496                           ;MRF24J40.h: 309: PORTCbits.RC2 = 0;
  7497                           
  7498                           ;incstack = 0
  7499  00E650  9482               	bcf	3970,2,c	;volatile
  7500                           
  7501                           ;MRF24J40.h: 310: for(j=0;j<300;j++);
  7502  00E652  0E00               	movlw	0
  7503  00E654  6E0A               	movwf	MRF24J40Init@j+1,c
  7504  00E656  0E00               	movlw	0
  7505  00E658  6E09               	movwf	MRF24J40Init@j,c
  7506  00E65A                     l3138:
  7507  00E65A  0E2C               	movlw	44
  7508  00E65C  5C09               	subwf	MRF24J40Init@j,w,c
  7509  00E65E  0E01               	movlw	1
  7510  00E660  580A               	subwfb	MRF24J40Init@j+1,w,c
  7511  00E662  B0D8               	btfsc	status,0,c
  7512  00E664  D003               	goto	l71
  7513  00E666  4A09               	infsnz	MRF24J40Init@j,f,c
  7514  00E668  2A0A               	incf	MRF24J40Init@j+1,f,c
  7515  00E66A  D7F7               	goto	l3138
  7516  00E66C                     l71:
  7517                           
  7518                           ;MRF24J40.h: 311: PORTCbits.RC2 = 1;
  7519  00E66C  8482               	bsf	3970,2,c	;volatile
  7520                           
  7521                           ;MRF24J40.h: 312: for(j=0;j<300;j++);
  7522  00E66E  0E00               	movlw	0
  7523  00E670  6E0A               	movwf	MRF24J40Init@j+1,c
  7524  00E672  0E00               	movlw	0
  7525  00E674  6E09               	movwf	MRF24J40Init@j,c
  7526  00E676                     l3148:
  7527  00E676  0E2C               	movlw	44
  7528  00E678  5C09               	subwf	MRF24J40Init@j,w,c
  7529  00E67A  0E01               	movlw	1
  7530  00E67C  580A               	subwfb	MRF24J40Init@j+1,w,c
  7531  00E67E  B0D8               	btfsc	status,0,c
  7532  00E680  D003               	goto	l3156
  7533  00E682  4A09               	infsnz	MRF24J40Init@j,f,c
  7534  00E684  2A0A               	incf	MRF24J40Init@j+1,f,c
  7535  00E686  D7F7               	goto	l3148
  7536  00E688                     l3156:
  7537                           
  7538                           ;MRF24J40.h: 314: SetShortRAMAddr((0x6D),0x04);
  7539  00E688  0E04               	movlw	4
  7540  00E68A  6E03               	movwf	SetShortRAMAddr@value,c
  7541  00E68C  0E6D               	movlw	109
  7542  00E68E  EC2D  F06D         	call	_SetShortRAMAddr
  7543                           
  7544                           ;MRF24J40.h: 315: SetShortRAMAddr((0x6D),0x00);
  7545  00E692  0E00               	movlw	0
  7546  00E694  6E03               	movwf	SetShortRAMAddr@value,c
  7547  00E696  0E6D               	movlw	109
  7548  00E698  EC2D  F06D         	call	_SetShortRAMAddr
  7549                           
  7550                           ;MRF24J40.h: 316: SetShortRAMAddr((0x1B),0x05);
  7551  00E69C  0E05               	movlw	5
  7552  00E69E  6E03               	movwf	SetShortRAMAddr@value,c
  7553  00E6A0  0E1B               	movlw	27
  7554  00E6A2  EC2D  F06D         	call	_SetShortRAMAddr
  7555                           
  7556                           ;MRF24J40.h: 317: SetShortRAMAddr((0x07),0xFF);
  7557  00E6A6  0EFF               	movlw	255
  7558  00E6A8  6E03               	movwf	SetShortRAMAddr@value,c
  7559  00E6AA  0E07               	movlw	7
  7560  00E6AC  EC2D  F06D         	call	_SetShortRAMAddr
  7561                           
  7562                           ;MRF24J40.h: 318: SetShortRAMAddr((0x09),0xFF);
  7563  00E6B0  0EFF               	movlw	255
  7564  00E6B2  6E03               	movwf	SetShortRAMAddr@value,c
  7565  00E6B4  0E09               	movlw	9
  7566  00E6B6  EC2D  F06D         	call	_SetShortRAMAddr
  7567                           
  7568                           ;MRF24J40.h: 319: SetShortRAMAddr((0x03),0xFF);
  7569  00E6BA  0EFF               	movlw	255
  7570  00E6BC  6E03               	movwf	SetShortRAMAddr@value,c
  7571  00E6BE  0E03               	movlw	3
  7572  00E6C0  EC2D  F06D         	call	_SetShortRAMAddr
  7573                           
  7574                           ;MRF24J40.h: 320: SetShortRAMAddr((0x05),0xFF);
  7575  00E6C4  0EFF               	movlw	255
  7576  00E6C6  6E03               	movwf	SetShortRAMAddr@value,c
  7577  00E6C8  0E05               	movlw	5
  7578  00E6CA  EC2D  F06D         	call	_SetShortRAMAddr
  7579                           
  7580                           ;MRF24J40.h: 322: SetLongRAMAddr((0x202),0x80);
  7581  00E6CE  0E02               	movlw	2
  7582  00E6D0  6E04               	movwf	SetLongRAMAddr@address+1,c
  7583  00E6D2  0E02               	movlw	2
  7584  00E6D4  6E03               	movwf	SetLongRAMAddr@address,c
  7585  00E6D6  0E80               	movlw	128
  7586  00E6D8  6E05               	movwf	SetLongRAMAddr@value,c
  7587  00E6DA  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  7588                           
  7589                           ;MRF24J40.h: 323: SetLongRAMAddr((0x203),0x00);
  7590  00E6DE  0E02               	movlw	2
  7591  00E6E0  6E04               	movwf	SetLongRAMAddr@address+1,c
  7592  00E6E2  0E03               	movlw	3
  7593  00E6E4  6E03               	movwf	SetLongRAMAddr@address,c
  7594  00E6E6  0E00               	movlw	0
  7595  00E6E8  6E05               	movwf	SetLongRAMAddr@value,c
  7596  00E6EA  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  7597                           
  7598                           ;MRF24J40.h: 324: SetLongRAMAddr((0x206),0x80);
  7599  00E6EE  0E02               	movlw	2
  7600  00E6F0  6E04               	movwf	SetLongRAMAddr@address+1,c
  7601  00E6F2  0E06               	movlw	6
  7602  00E6F4  6E03               	movwf	SetLongRAMAddr@address,c
  7603  00E6F6  0E80               	movlw	128
  7604  00E6F8  6E05               	movwf	SetLongRAMAddr@value,c
  7605  00E6FA  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  7606                           
  7607                           ;MRF24J40.h: 325: SetLongRAMAddr((0x208),0b00010000);
  7608  00E6FE  0E02               	movlw	2
  7609  00E700  6E04               	movwf	SetLongRAMAddr@address+1,c
  7610  00E702  0E08               	movlw	8
  7611  00E704  6E03               	movwf	SetLongRAMAddr@address,c
  7612  00E706  0E10               	movlw	16
  7613  00E708  6E05               	movwf	SetLongRAMAddr@value,c
  7614  00E70A  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  7615                           
  7616                           ;MRF24J40.h: 326: SetShortRAMAddr((0x75),0x38);
  7617  00E70E  0E38               	movlw	56
  7618  00E710  6E03               	movwf	SetShortRAMAddr@value,c
  7619  00E712  0E75               	movlw	117
  7620  00E714  EC2D  F06D         	call	_SetShortRAMAddr
  7621                           
  7622                           ;MRF24J40.h: 327: SetShortRAMAddr((0x7D),0x40);
  7623  00E718  0E40               	movlw	64
  7624  00E71A  6E03               	movwf	SetShortRAMAddr@value,c
  7625  00E71C  0E7D               	movlw	125
  7626  00E71E  EC2D  F06D         	call	_SetShortRAMAddr
  7627                           
  7628                           ;MRF24J40.h: 328: SetShortRAMAddr((0x7F),0x00);
  7629  00E722  0E00               	movlw	0
  7630  00E724  6E03               	movwf	SetShortRAMAddr@value,c
  7631  00E726  0E7F               	movlw	127
  7632  00E728  EC2D  F06D         	call	_SetShortRAMAddr
  7633                           
  7634                           ;MRF24J40.h: 329: SetLongRAMAddr((0x200),0x00);
  7635  00E72C  0E02               	movlw	2
  7636  00E72E  6E04               	movwf	SetLongRAMAddr@address+1,c
  7637  00E730  0E00               	movlw	0
  7638  00E732  6E03               	movwf	SetLongRAMAddr@address,c
  7639  00E734  0E00               	movlw	0
  7640  00E736  6E05               	movwf	SetLongRAMAddr@value,c
  7641  00E738  EC22  F06E         	call	_SetLongRAMAddr	;wreg free
  7642                           
  7643                           ;MRF24J40.h: 330: SetShortRAMAddr((0x01),0x23);
  7644  00E73C  0E23               	movlw	35
  7645  00E73E  6E03               	movwf	SetShortRAMAddr@value,c
  7646  00E740  0E01               	movlw	1
  7647  00E742  EC2D  F06D         	call	_SetShortRAMAddr
  7648                           
  7649                           ;MRF24J40.h: 331: SetShortRAMAddr((0x6D),0x04);
  7650  00E746  0E04               	movlw	4
  7651  00E748  6E03               	movwf	SetShortRAMAddr@value,c
  7652  00E74A  0E6D               	movlw	109
  7653  00E74C  EC2D  F06D         	call	_SetShortRAMAddr
  7654                           
  7655                           ;MRF24J40.h: 332: SetShortRAMAddr((0x6D),0x00);
  7656  00E750  0E00               	movlw	0
  7657  00E752  6E03               	movwf	SetShortRAMAddr@value,c
  7658  00E754  0E6D               	movlw	109
  7659  00E756  EC2D  F06D         	call	_SetShortRAMAddr
  7660                           
  7661                           ;MRF24J40.h: 333: SetShortRAMAddr((0x65),0xF7);
  7662  00E75A  0EF7               	movlw	247
  7663  00E75C  6E03               	movwf	SetShortRAMAddr@value,c
  7664  00E75E  0E65               	movlw	101
  7665  00E760  EC2D  F06D         	call	_SetShortRAMAddr
  7666  00E764  0012               	return		;funcret
  7667  00E766                     __end_of_MRF24J40Init:
  7668                           	opt stack 0
  7669                           tblptru	equ	0xFF8
  7670                           tblptrh	equ	0xFF7
  7671                           tblptrl	equ	0xFF6
  7672                           tablat	equ	0xFF5
  7673                           prodh	equ	0xFF4
  7674                           prodl	equ	0xFF3
  7675                           intcon	equ	0xFF2
  7676                           postinc0	equ	0xFEE
  7677                           wreg	equ	0xFE8
  7678                           indf2	equ	0xFDF
  7679                           postinc2	equ	0xFDE
  7680                           postdec2	equ	0xFDD
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _SetShortRAMAddr *****************
  7686 ;; Defined at:
  7687 ;;		line 238 in file "MRF24J40.h"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  address         1    wreg     unsigned char 
  7690 ;;  value           1    2[COMRAM] unsigned char 
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;  address         1    3[COMRAM] unsigned char 
  7693 ;;  tmpINT0IE       1    4[COMRAM] volatile unsigned char 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;		None               void
  7696 ;; Registers used:
  7697 ;;		wreg, status,2, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7703 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;Total ram usage:        3 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    1
  7710 ;; This function calls:
  7711 ;;		_WriteSPI
  7712 ;; This function is called by:
  7713 ;;		_SetChannel
  7714 ;;		_MRF24J40Init
  7715 ;;		_PHYTransmit
  7716 ;;		_PHYReceive
  7717 ;;		_PHYGetRSSI
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text34
  7722  00DA5A                     __ptext34:
  7723                           	opt stack 0
  7724  00DA5A                     _SetShortRAMAddr:
  7725                           	opt stack 28
  7726                           
  7727                           ;incstack = 0
  7728                           ;SetShortRAMAddr@address stored from wreg
  7729  00DA5A  6E04               	movwf	SetShortRAMAddr@address,c
  7730                           
  7731                           ;MRF24J40.h: 240: volatile unsigned char tmpINT0IE = INTCONbits.INT0IE;
  7732  00DA5C  0E00               	movlw	0
  7733  00DA5E  B8F2               	btfsc	intcon,4,c	;volatile
  7734  00DA60  0E01               	movlw	1
  7735  00DA62  6E05               	movwf	SetShortRAMAddr@tmpINT0IE,c	;volatile
  7736                           
  7737                           ;MRF24J40.h: 241: INTCONbits.INT0IE = 0;
  7738  00DA64  98F2               	bcf	intcon,4,c	;volatile
  7739                           
  7740                           ;MRF24J40.h: 242: PORTCbits.RC0 = 0;
  7741  00DA66  9082               	bcf	3970,0,c	;volatile
  7742                           
  7743                           ;MRF24J40.h: 243: WriteSPI(address);
  7744  00DA68  5004               	movf	SetShortRAMAddr@address,w,c
  7745  00DA6A  ECCB  F06C         	call	_WriteSPI
  7746                           
  7747                           ;MRF24J40.h: 244: WriteSPI(value);
  7748  00DA6E  5003               	movf	SetShortRAMAddr@value,w,c
  7749  00DA70  ECCB  F06C         	call	_WriteSPI
  7750                           
  7751                           ;MRF24J40.h: 245: PORTCbits.RC0 = 1;
  7752  00DA74  8082               	bsf	3970,0,c	;volatile
  7753                           
  7754                           ;MRF24J40.h: 246: INTCONbits.INT0IE = tmpINT0IE;
  7755  00DA76  B005               	btfsc	SetShortRAMAddr@tmpINT0IE,0,c	;volatile
  7756  00DA78  D002               	bra	u2285
  7757  00DA7A  98F2               	bcf	intcon,4,c	;volatile
  7758  00DA7C  D001               	bra	u2286
  7759  00DA7E                     u2285:
  7760  00DA7E  88F2               	bsf	intcon,4,c	;volatile
  7761  00DA80                     u2286:
  7762  00DA80  0012               	return		;funcret
  7763  00DA82                     __end_of_SetShortRAMAddr:
  7764                           	opt stack 0
  7765                           tblptru	equ	0xFF8
  7766                           tblptrh	equ	0xFF7
  7767                           tblptrl	equ	0xFF6
  7768                           tablat	equ	0xFF5
  7769                           prodh	equ	0xFF4
  7770                           prodl	equ	0xFF3
  7771                           intcon	equ	0xFF2
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _SetLongRAMAddr *****************
  7782 ;; Defined at:
  7783 ;;		line 221 in file "MRF24J40.h"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  address         2    2[COMRAM] unsigned int 
  7786 ;;  value           1    4[COMRAM] unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  tmpINT0IE       1    7[COMRAM] volatile unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;		None               void
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:        6 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    1
  7805 ;; This function calls:
  7806 ;;		_WriteSPI
  7807 ;; This function is called by:
  7808 ;;		_SetChannel
  7809 ;;		_MRF24J40Init
  7810 ;;		_PHYTransmit
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text35
  7815  00DC44                     __ptext35:
  7816                           	opt stack 0
  7817  00DC44                     _SetLongRAMAddr:
  7818                           	opt stack 28
  7819                           
  7820                           ;MRF24J40.h: 223: volatile unsigned char tmpINT0IE = INTCONbits.INT0IE;
  7821                           
  7822                           ;incstack = 0
  7823  00DC44  0E00               	movlw	0
  7824  00DC46  B8F2               	btfsc	intcon,4,c	;volatile
  7825  00DC48  0E01               	movlw	1
  7826  00DC4A  6E08               	movwf	SetLongRAMAddr@tmpINT0IE,c	;volatile
  7827                           
  7828                           ;MRF24J40.h: 224: INTCONbits.INT0IE = 0;
  7829  00DC4C  98F2               	bcf	intcon,4,c	;volatile
  7830                           
  7831                           ;MRF24J40.h: 225: PORTCbits.RC0 = 0;
  7832  00DC4E  9082               	bcf	3970,0,c	;volatile
  7833                           
  7834                           ;MRF24J40.h: 226: WriteSPI((((unsigned char)(address>>3))&0b01111111)|0x80);
  7835  00DC50  C003  F006         	movff	SetLongRAMAddr@address,??_SetLongRAMAddr
  7836  00DC54  C004  F007         	movff	SetLongRAMAddr@address+1,??_SetLongRAMAddr+1
  7837  00DC58  90D8               	bcf	status,0,c
  7838  00DC5A  3207               	rrcf	??_SetLongRAMAddr+1,f,c
  7839  00DC5C  3206               	rrcf	??_SetLongRAMAddr,f,c
  7840  00DC5E  90D8               	bcf	status,0,c
  7841  00DC60  3207               	rrcf	??_SetLongRAMAddr+1,f,c
  7842  00DC62  3206               	rrcf	??_SetLongRAMAddr,f,c
  7843  00DC64  90D8               	bcf	status,0,c
  7844  00DC66  3207               	rrcf	??_SetLongRAMAddr+1,f,c
  7845  00DC68  3206               	rrcf	??_SetLongRAMAddr,f,c
  7846  00DC6A  5006               	movf	??_SetLongRAMAddr,w,c
  7847  00DC6C  0B7F               	andlw	127
  7848  00DC6E  0980               	iorlw	128
  7849  00DC70  ECCB  F06C         	call	_WriteSPI
  7850                           
  7851                           ;MRF24J40.h: 227: WriteSPI((((unsigned char)(address<<5))&0b11100000)|0x10);
  7852  00DC74  3803               	swapf	SetLongRAMAddr@address,w,c
  7853  00DC76  46E8               	rlncf	wreg,f,c
  7854  00DC78  0BE0               	andlw	224
  7855  00DC7A  0BE0               	andlw	224
  7856  00DC7C  0910               	iorlw	16
  7857  00DC7E  ECCB  F06C         	call	_WriteSPI
  7858                           
  7859                           ;MRF24J40.h: 228: WriteSPI(value);
  7860  00DC82  5005               	movf	SetLongRAMAddr@value,w,c
  7861  00DC84  ECCB  F06C         	call	_WriteSPI
  7862                           
  7863                           ;MRF24J40.h: 229: PORTCbits.RC0 = 1;
  7864  00DC88  8082               	bsf	3970,0,c	;volatile
  7865                           
  7866                           ;MRF24J40.h: 230: INTCONbits.INT0IE = tmpINT0IE;
  7867  00DC8A  B008               	btfsc	SetLongRAMAddr@tmpINT0IE,0,c	;volatile
  7868  00DC8C  D002               	bra	u2275
  7869  00DC8E  98F2               	bcf	intcon,4,c	;volatile
  7870  00DC90  D001               	bra	u2276
  7871  00DC92                     u2275:
  7872  00DC92  88F2               	bsf	intcon,4,c	;volatile
  7873  00DC94                     u2276:
  7874  00DC94  0012               	return		;funcret
  7875  00DC96                     __end_of_SetLongRAMAddr:
  7876                           	opt stack 0
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           postinc0	equ	0xFEE
  7885                           wreg	equ	0xFE8
  7886                           indf2	equ	0xFDF
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _WriteSPI *****************
  7894 ;; Defined at:
  7895 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\SPI\spi_writ.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  data_out        1    wreg     unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  data_out        1    1[COMRAM] unsigned char 
  7900 ;;  TempVar         1    0[COMRAM] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      char 
  7903 ;; Registers used:
  7904 ;;		wreg
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;Total ram usage:        2 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; This function calls:
  7917 ;;		Nothing
  7918 ;; This function is called by:
  7919 ;;		_SetLongRAMAddr
  7920 ;;		_SetShortRAMAddr
  7921 ;;		_GetShortRAMAddr
  7922 ;;		_GetLongRAMAddr
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text36
  7927  00D996                     __ptext36:
  7928                           	opt stack 0
  7929  00D996                     _WriteSPI:
  7930                           	opt stack 28
  7931                           
  7932                           ;incstack = 0
  7933                           ;WriteSPI@data_out stored from wreg
  7934  00D996  6E02               	movwf	WriteSPI@data_out,c
  7935  00D998  CFC9 F001          	movff	4041,WriteSPI@TempVar	;volatile
  7936  00D99C  969E               	bcf	3998,3,c	;volatile
  7937  00D99E  9EC6               	bcf	4038,7,c	;volatile
  7938  00D9A0  C002  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  7939  00D9A4  BEC6               	btfsc	4038,7,c	;volatile
  7940  00D9A6  0012               	return	
  7941  00D9A8                     l354:
  7942  00D9A8  B69E               	btfsc	3998,3,c	;volatile
  7943  00D9AA  0012               	return	
  7944  00D9AC  D7FD               	goto	l354
  7945  00D9AE                     __end_of_WriteSPI:
  7946                           	opt stack 0
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           postinc0	equ	0xFEE
  7955                           wreg	equ	0xFE8
  7956                           indf2	equ	0xFDF
  7957                           postinc2	equ	0xFDE
  7958                           postdec2	equ	0xFDD
  7959                           fsr2h	equ	0xFDA
  7960                           fsr2l	equ	0xFD9
  7961                           status	equ	0xFD8
  7962                           
  7963 ;; *************** function _Init_IO *****************
  7964 ;; Defined at:
  7965 ;;		line 75 in file "motion.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;		None               void
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;Total ram usage:        0 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:    1
  7986 ;; This function calls:
  7987 ;;		_OpenSPI
  7988 ;;		_OpenUSART
  7989 ;; This function is called by:
  7990 ;;		_main
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           	psect	text37
  7995  00DC00                     __ptext37:
  7996                           	opt stack 0
  7997  00DC00                     _Init_IO:
  7998                           	opt stack 29
  7999                           
  8000                           ;motion.c: 77: PORTA = 0x04;
  8001                           
  8002                           ;incstack = 0
  8003  00DC00  0E04               	movlw	4
  8004  00DC02  6E80               	movwf	3968,c	;volatile
  8005                           
  8006                           ;motion.c: 78: TRISA = 0xF8;
  8007  00DC04  0EF8               	movlw	248
  8008  00DC06  6E92               	movwf	3986,c	;volatile
  8009                           
  8010                           ;motion.c: 79: TRISB = 0xFF;
  8011  00DC08  6893               	setf	3987,c	;volatile
  8012                           
  8013                           ;motion.c: 80: INTCON2bits.RBPU = 0;
  8014  00DC0A  9EF1               	bcf	intcon2,7,c	;volatile
  8015                           
  8016                           ;motion.c: 81: ADCON0 = 0x1C;
  8017  00DC0C  0E1C               	movlw	28
  8018  00DC0E  6EC2               	movwf	4034,c	;volatile
  8019                           
  8020                           ;motion.c: 83: PORTCbits.RC0 = 1;
  8021  00DC10  8082               	bsf	3970,0,c	;volatile
  8022                           
  8023                           ;motion.c: 84: TRISCbits.TRISC0 = 0;
  8024  00DC12  9094               	bcf	3988,0,c	;volatile
  8025                           
  8026                           ;motion.c: 85: PORTCbits.RC1 = 1;
  8027  00DC14  8282               	bsf	3970,1,c	;volatile
  8028                           
  8029                           ;motion.c: 86: TRISCbits.TRISC0 = 0;
  8030  00DC16  9094               	bcf	3988,0,c	;volatile
  8031                           
  8032                           ;motion.c: 87: PORTCbits.RC2 = 1;
  8033  00DC18  8482               	bsf	3970,2,c	;volatile
  8034                           
  8035                           ;motion.c: 88: TRISCbits.TRISC2 = 0;
  8036  00DC1A  9494               	bcf	3988,2,c	;volatile
  8037                           
  8038                           ;motion.c: 90: INTCONbits.INT0IF = 0;
  8039  00DC1C  92F2               	bcf	intcon,1,c	;volatile
  8040                           
  8041                           ;motion.c: 91: INTCONbits.INT0IE = 1;
  8042  00DC1E  88F2               	bsf	intcon,4,c	;volatile
  8043                           
  8044                           ;motion.c: 92: RCONbits.IPEN = 1;
  8045  00DC20  8ED0               	bsf	4048,7,c	;volatile
  8046                           
  8047                           ;motion.c: 93: INTCONbits.GIEH = 1;
  8048  00DC22  8EF2               	bsf	intcon,7,c	;volatile
  8049                           
  8050                           ;motion.c: 94: OSCCONbits.IDLEN = 1;
  8051  00DC24  8ED3               	bsf	4051,7,c	;volatile
  8052                           
  8053                           ;motion.c: 95: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 
      +                          & 0b11111111,25 );
  8054  00DC26  0E00               	movlw	0
  8055  00DC28  6E02               	movwf	OpenUSART@spbrg+1,c
  8056  00DC2A  0E19               	movlw	25
  8057  00DC2C  6E01               	movwf	OpenUSART@spbrg,c
  8058  00DC2E  0E3C               	movlw	60
  8059  00DC30  ECFE  F06E         	call	_OpenUSART
  8060                           
  8061                           ;motion.c: 97: OpenSPI(0b00000000,0b00000000,0b00000000);
  8062  00DC34  0E00               	movlw	0
  8063  00DC36  6E01               	movwf	OpenSPI@bus_mode,c
  8064  00DC38  0E00               	movlw	0
  8065  00DC3A  6E02               	movwf	OpenSPI@smp_phase,c
  8066  00DC3C  0E00               	movlw	0
  8067  00DC3E  EC74  F06E         	call	_OpenSPI
  8068  00DC42  0012               	return		;funcret
  8069  00DC44                     __end_of_Init_IO:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf2	equ	0xFDF
  8082                           postinc2	equ	0xFDE
  8083                           postdec2	equ	0xFDD
  8084                           fsr2h	equ	0xFDA
  8085                           fsr2l	equ	0xFD9
  8086                           status	equ	0xFD8
  8087                           
  8088 ;; *************** function _OpenUSART *****************
  8089 ;; Defined at:
  8090 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uopen.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  config          1    wreg     unsigned char 
  8093 ;;  spbrg           2    0[COMRAM] unsigned int 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;  config          1    2[COMRAM] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, status,2
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;Total ram usage:        3 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_Init_IO
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text38
  8119  00DDFC                     __ptext38:
  8120                           	opt stack 0
  8121  00DDFC                     _OpenUSART:
  8122                           	opt stack 29
  8123                           
  8124                           ;incstack = 0
  8125                           ;OpenUSART@config stored from wreg
  8126  00DDFC  6E03               	movwf	OpenUSART@config,c
  8127  00DDFE  0E00               	movlw	0
  8128  00DE00  6EAC               	movwf	4012,c	;volatile
  8129  00DE02  0E00               	movlw	0
  8130  00DE04  6EAB               	movwf	4011,c	;volatile
  8131  00DE06  B003               	btfsc	OpenUSART@config,0,c
  8132  00DE08  88AC               	bsf	4012,4,c	;volatile
  8133  00DE0A  A203               	btfss	OpenUSART@config,1,c
  8134  00DE0C  D002               	goto	l2722
  8135  00DE0E  8CAC               	bsf	4012,6,c	;volatile
  8136  00DE10  8CAB               	bsf	4011,6,c	;volatile
  8137  00DE12                     l2722:
  8138  00DE12  B403               	btfsc	OpenUSART@config,2,c
  8139  00DE14  8EAC               	bsf	4012,7,c	;volatile
  8140  00DE16  A603               	btfss	OpenUSART@config,3,c
  8141  00DE18  D002               	goto	l402
  8142  00DE1A  88AB               	bsf	4011,4,c	;volatile
  8143  00DE1C  D001               	goto	l2730
  8144  00DE1E                     l402:
  8145  00DE1E  8AAB               	bsf	4011,5,c	;volatile
  8146  00DE20                     l2730:
  8147  00DE20  B803               	btfsc	OpenUSART@config,4,c
  8148  00DE22  84AC               	bsf	4012,2,c	;volatile
  8149  00DE24  989E               	bcf	3998,4,c	;volatile
  8150  00DE26  BA03               	btfsc	OpenUSART@config,5,c
  8151  00DE28  86AB               	bsf	4011,3,c	;volatile
  8152  00DE2A  AC03               	btfss	OpenUSART@config,6,c
  8153  00DE2C  D002               	goto	l406
  8154  00DE2E  8A9D               	bsf	3997,5,c	;volatile
  8155  00DE30  D001               	goto	l407
  8156  00DE32                     l406:
  8157  00DE32  9A9D               	bcf	3997,5,c	;volatile
  8158  00DE34                     l407:
  8159  00DE34  9A9E               	bcf	3998,5,c	;volatile
  8160  00DE36  AE03               	btfss	OpenUSART@config,7,c
  8161  00DE38  D002               	goto	l408
  8162  00DE3A  889D               	bsf	3997,4,c	;volatile
  8163  00DE3C  D001               	goto	l409
  8164  00DE3E                     l408:
  8165  00DE3E  989D               	bcf	3997,4,c	;volatile
  8166  00DE40                     l409:
  8167  00DE40  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8168  00DE44  5002               	movf	OpenUSART@spbrg+1,w,c
  8169  00DE46  6EB0               	movwf	4016,c	;volatile
  8170  00DE48  8AAC               	bsf	4012,5,c	;volatile
  8171  00DE4A  8EAB               	bsf	4011,7,c	;volatile
  8172  00DE4C  9C94               	bcf	3988,6,c	;volatile
  8173  00DE4E  8E94               	bsf	3988,7,c	;volatile
  8174  00DE50  A8AC               	btfss	4012,4,c	;volatile
  8175  00DE52  0012               	return	
  8176  00DE54  BEAC               	btfsc	4012,7,c	;volatile
  8177  00DE56  0012               	return	
  8178  00DE58  8C94               	bsf	3988,6,c	;volatile
  8179  00DE5A  0012               	return	
  8180  00DE5C                     __end_of_OpenUSART:
  8181                           	opt stack 0
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _OpenSPI *****************
  8200 ;; Defined at:
  8201 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\SPI\spi_open.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  sync_mode       1    wreg     unsigned char 
  8204 ;;  bus_mode        1    0[COMRAM] unsigned char 
  8205 ;;  smp_phase       1    1[COMRAM] unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  sync_mode       1    2[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        3 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		_Init_IO
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text39
  8231  00DCE8                     __ptext39:
  8232                           	opt stack 0
  8233  00DCE8                     _OpenSPI:
  8234                           	opt stack 29
  8235                           
  8236                           ;incstack = 0
  8237                           ;OpenSPI@sync_mode stored from wreg
  8238  00DCE8  6E03               	movwf	OpenSPI@sync_mode,c
  8239  00DCEA  0E3F               	movlw	63
  8240  00DCEC  16C7               	andwf	4039,f,c	;volatile
  8241  00DCEE  0E00               	movlw	0
  8242  00DCF0  6EC6               	movwf	4038,c	;volatile
  8243  00DCF2  5003               	movf	OpenSPI@sync_mode,w,c
  8244  00DCF4  12C6               	iorwf	4038,f,c	;volatile
  8245  00DCF6  5002               	movf	OpenSPI@smp_phase,w,c
  8246  00DCF8  12C7               	iorwf	4039,f,c	;volatile
  8247  00DCFA  D005               	goto	l2772
  8248  00DCFC                     l320:
  8249  00DCFC  8CC7               	bsf	4039,6,c	;volatile
  8250  00DCFE  D015               	goto	l2776
  8251  00DD00                     l322:
  8252  00DD00  8CC7               	bsf	4039,6,c	;volatile
  8253  00DD02                     l323:
  8254  00DD02  88C6               	bsf	4038,4,c	;volatile
  8255  00DD04  D012               	goto	l2776
  8256  00DD06                     l2772:
  8257  00DD06  5001               	movf	OpenSPI@bus_mode,w,c
  8258                           
  8259                           ; Switch size 1, requested type "space"
  8260                           ; Number of cases is 3, Range of values is 0 to 3
  8261                           ; switch strategies available:
  8262                           ; Name         Instructions Cycles
  8263                           ; simple_byte           10     6 (average)
  8264                           ;	Chosen strategy is simple_byte
  8265  00DD08  0A00               	xorlw	0	; case 0
  8266  00DD0A  B4D8               	btfsc	status,2,c
  8267  00DD0C  D7F7               	goto	l320
  8268  00DD0E  0A02               	xorlw	2	; case 2
  8269  00DD10  B4D8               	btfsc	status,2,c
  8270  00DD12  D7F6               	goto	l322
  8271  00DD14  0A01               	xorlw	1	; case 3
  8272  00DD16  B4D8               	btfsc	status,2,c
  8273  00DD18  D7F4               	goto	l323
  8274  00DD1A  D007               	goto	l2776
  8275  00DD1C                     l326:
  8276  00DD1C  8694               	bsf	3988,3,c	;volatile
  8277  00DD1E  8A92               	bsf	3986,5,c	;volatile
  8278  00DD20  D00C               	goto	l327
  8279  00DD22                     l328:
  8280  00DD22  8694               	bsf	3988,3,c	;volatile
  8281  00DD24  D00A               	goto	l327
  8282  00DD26                     l329:
  8283  00DD26  9694               	bcf	3988,3,c	;volatile
  8284  00DD28  D008               	goto	l327
  8285  00DD2A                     l2776:
  8286  00DD2A  5003               	movf	OpenSPI@sync_mode,w,c
  8287                           
  8288                           ; Switch size 1, requested type "space"
  8289                           ; Number of cases is 2, Range of values is 4 to 5
  8290                           ; switch strategies available:
  8291                           ; Name         Instructions Cycles
  8292                           ; simple_byte            7     4 (average)
  8293                           ;	Chosen strategy is simple_byte
  8294  00DD2C  0A04               	xorlw	4	; case 4
  8295  00DD2E  B4D8               	btfsc	status,2,c
  8296  00DD30  D7F5               	goto	l326
  8297  00DD32  0A01               	xorlw	1	; case 5
  8298  00DD34  B4D8               	btfsc	status,2,c
  8299  00DD36  D7F5               	goto	l328
  8300  00DD38  D7F6               	goto	l329
  8301  00DD3A                     l327:
  8302  00DD3A  8894               	bsf	3988,4,c	;volatile
  8303  00DD3C  9A94               	bcf	3988,5,c	;volatile
  8304  00DD3E  8AC6               	bsf	4038,5,c	;volatile
  8305  00DD40  0012               	return		;funcret
  8306  00DD42                     __end_of_OpenSPI:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _CalculateCRC *****************
  8326 ;; Defined at:
  8327 ;;		line 170 in file "motion.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  message         2    0[COMRAM] PTR unsigned char 
  8330 ;;		 -> RxPacket(13), TxPacket(13), 
  8331 ;;  length          1    2[COMRAM] unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  crc             1    6[COMRAM] unsigned char 
  8334 ;;  i               1    5[COMRAM] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      unsigned char 
  8337 ;; Registers used:
  8338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:        7 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_main
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text40
  8358  00DBBE                     __ptext40:
  8359                           	opt stack 0
  8360  00DBBE                     _CalculateCRC:
  8361                           	opt stack 30
  8362                           
  8363                           ;motion.c: 172: unsigned char i, crc = 0;
  8364                           
  8365                           ;incstack = 0
  8366  00DBBE  0E00               	movlw	0
  8367  00DBC0  6E07               	movwf	CalculateCRC@crc,c
  8368                           
  8369                           ;motion.c: 173: for (i = 0; i < length; i++)
  8370  00DBC2  0E00               	movlw	0
  8371  00DBC4  6E06               	movwf	CalculateCRC@i,c
  8372  00DBC6  D016               	goto	l3292
  8373  00DBC8                     l3288:
  8374                           
  8375                           ;motion.c: 174: crc = code_Table[crc ^ message[i]];
  8376  00DBC8  5006               	movf	CalculateCRC@i,w,c
  8377  00DBCA  0D01               	mullw	1
  8378  00DBCC  50F3               	movf	prodl,w,c
  8379  00DBCE  2401               	addwf	CalculateCRC@message,w,c
  8380  00DBD0  6ED9               	movwf	fsr2l,c
  8381  00DBD2  50F4               	movf	prodh,w,c
  8382  00DBD4  2002               	addwfc	CalculateCRC@message+1,w,c
  8383  00DBD6  6EDA               	movwf	fsr2h,c
  8384  00DBD8  50DF               	movf	indf2,w,c
  8385  00DBDA  1807               	xorwf	CalculateCRC@crc,w,c
  8386  00DBDC  6E04               	movwf	??_CalculateCRC& (0+255),c
  8387  00DBDE  6A05               	clrf	(??_CalculateCRC+1)& (0+255),c
  8388  00DBE0  0E01               	movlw	low _code_Table
  8389  00DBE2  2404               	addwf	??_CalculateCRC,w,c
  8390  00DBE4  6EF6               	movwf	tblptrl,c
  8391  00DBE6  0EFD               	movlw	high _code_Table
  8392  00DBE8  2005               	addwfc	??_CalculateCRC+1,w,c
  8393  00DBEA  6EF7               	movwf	tblptrh,c
  8394  00DBEC                     	if	0	;There are less than 3 active tblptr bytes
  8395  00DBEC                     	endif
  8396  00DBEC  0008               	tblrd		*
  8397  00DBEE  CFF5 F007          	movff	tablat,CalculateCRC@crc
  8398  00DBF2  2A06               	incf	CalculateCRC@i,f,c
  8399  00DBF4                     l3292:
  8400  00DBF4  5003               	movf	CalculateCRC@length,w,c
  8401  00DBF6  5C06               	subwf	CalculateCRC@i,w,c
  8402  00DBF8  A0D8               	btfss	status,0,c
  8403  00DBFA  D7E6               	goto	l3288
  8404                           
  8405                           ;motion.c: 175: return crc;
  8406  00DBFC  5007               	movf	CalculateCRC@crc,w,c
  8407  00DBFE  0012               	return	
  8408  00DC00                     __end_of_CalculateCRC:
  8409                           	opt stack 0
  8410                           tblptru	equ	0xFF8
  8411                           tblptrh	equ	0xFF7
  8412                           tblptrl	equ	0xFF6
  8413                           tablat	equ	0xFF5
  8414                           prodh	equ	0xFF4
  8415                           prodl	equ	0xFF3
  8416                           intcon	equ	0xFF2
  8417                           intcon2	equ	0xFF1
  8418                           postinc0	equ	0xFEE
  8419                           wreg	equ	0xFE8
  8420                           indf2	equ	0xFDF
  8421                           postinc2	equ	0xFDE
  8422                           postdec2	equ	0xFDD
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function _ADC *****************
  8428 ;; Defined at:
  8429 ;;		line 123 in file "motion.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;		None               void
  8436 ;; Registers used:
  8437 ;;		wreg, status,2, status,0, cstack
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;Total ram usage:        0 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    1
  8450 ;; This function calls:
  8451 ;;		_BusyADC
  8452 ;;		_ConvertADC
  8453 ;;		_Delay10TCYx
  8454 ;;		_OpenADC
  8455 ;;		_ReadADC
  8456 ;;		_SetChanADC
  8457 ;; This function is called by:
  8458 ;;		_main
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           	psect	text41
  8463  00E142                     __ptext41:
  8464                           	opt stack 0
  8465  00E142                     _ADC:
  8466                           	opt stack 29
  8467                           
  8468                           ;motion.c: 127: OpenADC(0b10101111 & 0b11111111 & 0b11111001,0b10001111 & 0b01111111 & 0
      +                          b11111100,0);
  8469                           
  8470                           ;incstack = 0
  8471  00E142  0E0C               	movlw	12
  8472  00E144  6E01               	movwf	OpenADC@config2,c
  8473  00E146  0E00               	movlw	0
  8474  00E148  6E02               	movwf	OpenADC@portconfig,c
  8475  00E14A  0EA9               	movlw	169
  8476  00E14C  ECCF  F06E         	call	_OpenADC
  8477                           
  8478                           ;motion.c: 128: Delay10TCYx(5);
  8479  00E150  0E05               	movlw	5
  8480  00E152  EC9D  F06C         	call	_Delay10TCYx
  8481                           
  8482                           ;motion.c: 129: OpenADC(0b10101111 & 0b11111111 & 0b11111001,0b10010111 & 0b01111111 & 0
      +                          b11111100,0);
  8483  00E156  0E14               	movlw	20
  8484  00E158  6E01               	movwf	OpenADC@config2,c
  8485  00E15A  0E00               	movlw	0
  8486  00E15C  6E02               	movwf	OpenADC@portconfig,c
  8487  00E15E  0EA9               	movlw	169
  8488  00E160  ECCF  F06E         	call	_OpenADC
  8489                           
  8490                           ;motion.c: 130: Delay10TCYx(5);
  8491  00E164  0E05               	movlw	5
  8492  00E166  EC9D  F06C         	call	_Delay10TCYx
  8493                           
  8494                           ;motion.c: 131: OpenADC(0b10101111 & 0b11111111 & 0b11111001,0b10011111 & 0b01111111 & 0
      +                          b11111100,0);
  8495  00E16A  0E1C               	movlw	28
  8496  00E16C  6E01               	movwf	OpenADC@config2,c
  8497  00E16E  0E00               	movlw	0
  8498  00E170  6E02               	movwf	OpenADC@portconfig,c
  8499  00E172  0EA9               	movlw	169
  8500  00E174  ECCF  F06E         	call	_OpenADC
  8501                           
  8502                           ;motion.c: 132: Delay10TCYx(5);
  8503  00E178  0E05               	movlw	5
  8504  00E17A  EC9D  F06C         	call	_Delay10TCYx
  8505                           
  8506                           ;motion.c: 134: SetChanADC(0b10001111);
  8507  00E17E  0E8F               	movlw	143
  8508  00E180  ECC0  F06C         	call	_SetChanADC
  8509                           
  8510                           ;motion.c: 135: ConvertADC();
  8511  00E184  EC8E  F06C         	call	_ConvertADC	;wreg free
  8512  00E188                     l3266:
  8513  00E188  EC90  F06C         	call	_BusyADC	;wreg free
  8514  00E18C  0900               	iorlw	0
  8515  00E18E  A4D8               	btfss	status,2,c
  8516  00E190  D7FB               	goto	l3266
  8517                           
  8518                           ;motion.c: 137: ADCresult1 = ReadADC();
  8519  00E192  EC96  F06C         	call	_ReadADC	;wreg free
  8520  00E196  C001  F086         	movff	?_ReadADC,_ADCresult1
  8521  00E19A  C002  F087         	movff	?_ReadADC+1,_ADCresult1+1
  8522                           
  8523                           ;motion.c: 139: SetChanADC(0b10010111);
  8524  00E19E  0E97               	movlw	151
  8525  00E1A0  ECC0  F06C         	call	_SetChanADC
  8526                           
  8527                           ;motion.c: 140: ConvertADC();
  8528  00E1A4  EC8E  F06C         	call	_ConvertADC	;wreg free
  8529  00E1A8                     l3274:
  8530  00E1A8  EC90  F06C         	call	_BusyADC	;wreg free
  8531  00E1AC  0900               	iorlw	0
  8532  00E1AE  A4D8               	btfss	status,2,c
  8533  00E1B0  D7FB               	goto	l3274
  8534                           
  8535                           ;motion.c: 142: ADCresult2 = ReadADC();
  8536  00E1B2  EC96  F06C         	call	_ReadADC	;wreg free
  8537  00E1B6  C001  F0A4         	movff	?_ReadADC,_ADCresult2
  8538  00E1BA  C002  F0A5         	movff	?_ReadADC+1,_ADCresult2+1
  8539                           
  8540                           ;motion.c: 144: SetChanADC(0b10011111);
  8541  00E1BE  0E9F               	movlw	159
  8542  00E1C0  ECC0  F06C         	call	_SetChanADC
  8543                           
  8544                           ;motion.c: 145: ConvertADC();
  8545  00E1C4  EC8E  F06C         	call	_ConvertADC	;wreg free
  8546  00E1C8                     l3282:
  8547  00E1C8  EC90  F06C         	call	_BusyADC	;wreg free
  8548  00E1CC  0900               	iorlw	0
  8549  00E1CE  A4D8               	btfss	status,2,c
  8550  00E1D0  D7FB               	goto	l3282
  8551                           
  8552                           ;motion.c: 147: ADCresult3 = ReadADC();
  8553  00E1D2  EC96  F06C         	call	_ReadADC	;wreg free
  8554  00E1D6  C001  F088         	movff	?_ReadADC,_ADCresult3
  8555  00E1DA  C002  F089         	movff	?_ReadADC+1,_ADCresult3+1
  8556  00E1DE  0012               	return		;funcret
  8557  00E1E0                     __end_of_ADC:
  8558                           	opt stack 0
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           intcon	equ	0xFF2
  8566                           intcon2	equ	0xFF1
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function _SetChanADC *****************
  8577 ;; Defined at:
  8578 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcsetch.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  channel         1    wreg     unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  channel         1    1[COMRAM] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;		None               void
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;Total ram usage:        2 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; This function calls:
  8599 ;;		Nothing
  8600 ;; This function is called by:
  8601 ;;		_ADC
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           	psect	text42
  8606  00D980                     __ptext42:
  8607                           	opt stack 0
  8608  00D980                     _SetChanADC:
  8609                           	opt stack 29
  8610                           
  8611                           ;incstack = 0
  8612                           ;SetChanADC@channel stored from wreg
  8613  00D980  6E02               	movwf	SetChanADC@channel,c
  8614  00D982  CFC2 F001          	movff	4034,??_SetChanADC	;volatile
  8615  00D986  0EC3               	movlw	195
  8616  00D988  1601               	andwf	??_SetChanADC,f,c
  8617  00D98A  90D8               	bcf	status,0,c
  8618  00D98C  3002               	rrcf	SetChanADC@channel,w,c
  8619  00D98E  0B3C               	andlw	60
  8620  00D990  1001               	iorwf	??_SetChanADC,w,c
  8621  00D992  6EC2               	movwf	4034,c	;volatile
  8622  00D994  0012               	return		;funcret
  8623  00D996                     __end_of_SetChanADC:
  8624                           	opt stack 0
  8625                           tblptru	equ	0xFF8
  8626                           tblptrh	equ	0xFF7
  8627                           tblptrl	equ	0xFF6
  8628                           tablat	equ	0xFF5
  8629                           prodh	equ	0xFF4
  8630                           prodl	equ	0xFF3
  8631                           intcon	equ	0xFF2
  8632                           intcon2	equ	0xFF1
  8633                           postinc0	equ	0xFEE
  8634                           wreg	equ	0xFE8
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           fsr2h	equ	0xFDA
  8639                           fsr2l	equ	0xFD9
  8640                           status	equ	0xFD8
  8641                           
  8642 ;; *************** function _ReadADC *****************
  8643 ;; Defined at:
  8644 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcread.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;		None
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;		None
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  2    0[COMRAM] int 
  8651 ;; Registers used:
  8652 ;;		wreg, status,2
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;Total ram usage:        4 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; This function calls:
  8665 ;;		Nothing
  8666 ;; This function is called by:
  8667 ;;		_ADC
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text43
  8672  00D92C                     __ptext43:
  8673                           	opt stack 0
  8674  00D92C                     _ReadADC:
  8675                           	opt stack 29
  8676                           
  8677                           ;incstack = 0
  8678  00D92C  50C4               	movf	4036,w,c	;volatile
  8679  00D92E  6E03               	movwf	??_ReadADC& (0+255),c
  8680  00D930  50C3               	movf	4035,w,c	;volatile
  8681  00D932  6E01               	movwf	?_ReadADC,c
  8682  00D934  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  8683  00D938  0012               	return	
  8684  00D93A                     __end_of_ReadADC:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           indf2	equ	0xFDF
  8697                           postinc2	equ	0xFDE
  8698                           postdec2	equ	0xFDD
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function _OpenADC *****************
  8704 ;; Defined at:
  8705 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcopen.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  config          1    wreg     unsigned char 
  8708 ;;  config2         1    0[COMRAM] unsigned char 
  8709 ;;  portconfig      1    1[COMRAM] unsigned char 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  config          1    4[COMRAM] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;		None               void
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;Total ram usage:        5 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_ADC
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text44
  8735  00DD9E                     __ptext44:
  8736                           	opt stack 0
  8737  00DD9E                     _OpenADC:
  8738                           	opt stack 29
  8739                           
  8740                           ;incstack = 0
  8741                           ;OpenADC@config stored from wreg
  8742  00DD9E  6E05               	movwf	OpenADC@config,c
  8743  00DDA0  0E00               	movlw	0
  8744  00DDA2  6EC2               	movwf	4034,c	;volatile
  8745  00DDA4  0E00               	movlw	0
  8746  00DDA6  6EC0               	movwf	4032,c	;volatile
  8747  00DDA8  90D8               	bcf	status,0,c
  8748  00DDAA  3001               	rrcf	OpenADC@config2,w,c
  8749  00DDAC  0B3C               	andlw	60
  8750  00DDAE  6EC2               	movwf	4034,c	;volatile
  8751  00DDB0  C001  F003         	movff	OpenADC@config2,??_OpenADC
  8752  00DDB4  3A03               	swapf	??_OpenADC,f,c
  8753  00DDB6  0EF0               	movlw	240
  8754  00DDB8  1603               	andwf	??_OpenADC,f,c
  8755  00DDBA  0E30               	movlw	48
  8756  00DDBC  1603               	andwf	??_OpenADC,f,c
  8757  00DDBE  5002               	movf	OpenADC@portconfig,w,c
  8758  00DDC0  0B0F               	andlw	15
  8759  00DDC2  1003               	iorwf	??_OpenADC,w,c
  8760  00DDC4  6EC1               	movwf	4033,c	;volatile
  8761  00DDC6  C005  F003         	movff	OpenADC@config,??_OpenADC
  8762  00DDCA  90D8               	bcf	status,0,c
  8763  00DDCC  3603               	rlcf	??_OpenADC,f,c
  8764  00DDCE  90D8               	bcf	status,0,c
  8765  00DDD0  3603               	rlcf	??_OpenADC,f,c
  8766  00DDD2  0E38               	movlw	56
  8767  00DDD4  1603               	andwf	??_OpenADC,f,c
  8768  00DDD6  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  8769  00DDDA  3A04               	swapf	??_OpenADC+1,f,c
  8770  00DDDC  0E0F               	movlw	15
  8771  00DDDE  1604               	andwf	??_OpenADC+1,f,c
  8772  00DDE0  0E07               	movlw	7
  8773  00DDE2  1604               	andwf	??_OpenADC+1,f,c
  8774  00DDE4  5005               	movf	OpenADC@config,w,c
  8775  00DDE6  0B80               	andlw	128
  8776  00DDE8  1004               	iorwf	??_OpenADC+1,w,c
  8777  00DDEA  1003               	iorwf	??_OpenADC,w,c
  8778  00DDEC  6EC0               	movwf	4032,c	;volatile
  8779  00DDEE  AE01               	btfss	OpenADC@config2,7,c
  8780  00DDF0  D003               	goto	l291
  8781  00DDF2  9C9E               	bcf	3998,6,c	;volatile
  8782  00DDF4  8C9D               	bsf	3997,6,c	;volatile
  8783  00DDF6  8CF2               	bsf	intcon,6,c	;volatile
  8784  00DDF8                     l291:
  8785  00DDF8  80C2               	bsf	4034,0,c	;volatile
  8786  00DDFA  0012               	return		;funcret
  8787  00DDFC                     __end_of_OpenADC:
  8788                           	opt stack 0
  8789                           tblptru	equ	0xFF8
  8790                           tblptrh	equ	0xFF7
  8791                           tblptrl	equ	0xFF6
  8792                           tablat	equ	0xFF5
  8793                           prodh	equ	0xFF4
  8794                           prodl	equ	0xFF3
  8795                           intcon	equ	0xFF2
  8796                           intcon2	equ	0xFF1
  8797                           postinc0	equ	0xFEE
  8798                           wreg	equ	0xFE8
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function _Delay10TCYx *****************
  8807 ;; Defined at:
  8808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\d10tcyx.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  unit            1    wreg     unsigned char 
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;  unit            1    0[COMRAM] unsigned char 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;		None               void
  8815 ;; Registers used:
  8816 ;;		wreg
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:        1 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_ADC
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text45
  8836  00D93A                     __ptext45:
  8837                           	opt stack 0
  8838  00D93A                     _Delay10TCYx:
  8839                           	opt stack 29
  8840                           
  8841                           ;incstack = 0
  8842                           ;Delay10TCYx@unit stored from wreg
  8843  00D93A  6E01               	movwf	Delay10TCYx@unit,c
  8844  00D93C  0E03               	movlw	3
  8845  00D93E                     u3537:
  8846  00D93E  2EE8               	decfsz	wreg,f,c
  8847  00D940  D7FE               	goto	u3537
  8848  00D942  F000               	nop	
  8849  00D944  2E01               	decfsz	Delay10TCYx@unit,f,c
  8850  00D946  D7FA               	goto	l2800
  8851  00D948  0012               	return	
  8852  00D94A                     __end_of_Delay10TCYx:
  8853                           	opt stack 0
  8854                           tblptru	equ	0xFF8
  8855                           tblptrh	equ	0xFF7
  8856                           tblptrl	equ	0xFF6
  8857                           tablat	equ	0xFF5
  8858                           prodh	equ	0xFF4
  8859                           prodl	equ	0xFF3
  8860                           intcon	equ	0xFF2
  8861                           intcon2	equ	0xFF1
  8862                           postinc0	equ	0xFEE
  8863                           wreg	equ	0xFE8
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _ConvertADC *****************
  8872 ;; Defined at:
  8873 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcconv.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		None
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_ADC
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text46
  8901  00D91C                     __ptext46:
  8902                           	opt stack 0
  8903  00D91C                     _ConvertADC:
  8904                           	opt stack 29
  8905                           
  8906                           ;incstack = 0
  8907  00D91C  82C2               	bsf	4034,1,c	;volatile
  8908  00D91E  0012               	return		;funcret
  8909  00D920                     __end_of_ConvertADC:
  8910                           	opt stack 0
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           postinc0	equ	0xFEE
  8920                           wreg	equ	0xFE8
  8921                           indf2	equ	0xFDF
  8922                           postinc2	equ	0xFDE
  8923                           postdec2	equ	0xFDD
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function _BusyADC *****************
  8929 ;; Defined at:
  8930 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcbusy.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      unsigned char 
  8937 ;; Registers used:
  8938 ;;		wreg
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;Total ram usage:        0 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_ADC
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text47
  8958  00D920                     __ptext47:
  8959                           	opt stack 0
  8960  00D920                     _BusyADC:
  8961                           	opt stack 29
  8962                           
  8963                           ;incstack = 0
  8964  00D920  A2C2               	btfss	4034,1,c	;volatile
  8965  00D922  D002               	goto	u2440
  8966  00D924  0E01               	movlw	1
  8967  00D926  0012               	return	
  8968  00D928                     u2440:
  8969  00D928  0E00               	movlw	0
  8970  00D92A  0012               	return	
  8971  00D92C                     __end_of_BusyADC:
  8972                           	opt stack 0
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           intcon	equ	0xFF2
  8980                           intcon2	equ	0xFF1
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           intcon2	equ	0xFF1
  8997                           postinc0	equ	0xFEE
  8998                           wreg	equ	0xFE8
  8999                           indf2	equ	0xFDF
  9000                           postinc2	equ	0xFDE
  9001                           postdec2	equ	0xFDD
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006                           	psect	rparam
  9007  0000                     tblptru	equ	0xFF8
  9008                           tblptrh	equ	0xFF7
  9009                           tblptrl	equ	0xFF6
  9010                           tablat	equ	0xFF5
  9011                           prodh	equ	0xFF4
  9012                           prodl	equ	0xFF3
  9013                           intcon	equ	0xFF2
  9014                           intcon2	equ	0xFF1
  9015                           postinc0	equ	0xFEE
  9016                           wreg	equ	0xFE8
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8


Data Sizes:
    Strings     391
    Constant    374
    Data        0
    BSS         174
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    119     127
    BANK0           128      0      38
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 128
		 -> Text(BANK1[128]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 128
		 -> Text(BANK1[128]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 108
		 -> STR_4(CODE[93]), STR_3(CODE[88]), STR_2(CODE[108]), STR_1(CODE[102]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 128
		 -> Text(BANK1[128]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    CalculateCRC@message	PTR unsigned char  size(2) Largest target is 13
		 -> RxPacket(BANK0[13]), TxPacket(BANK0[13]), 

    USARTOut@data	PTR unsigned char  size(2) Largest target is 128
		 -> Text(BANK1[128]), 

    PHYReceive@Strength	PTR unsigned char  size(2) Largest target is 2
		 -> Strength(COMRAM[2]), 

    PHYReceive@Data	PTR unsigned char  size(2) Largest target is 13
		 -> RxPacket(BANK0[13]), 

    PHYTransmit@Data	PTR unsigned char  size(2) Largest target is 13
		 -> TxPacket(BANK0[13]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _USARTOut->_strlen
    _SetChannel->_SetLongRAMAddr
    _PHYTransmit->_SetLongRAMAddr
    _PHYReceive->_GetLongRAMAddr
    _GetShortRAMAddr->_WriteSPI
    _GetLongRAMAddr->_WriteSPI
    _MRF24J40Init->_SetLongRAMAddr
    _SetShortRAMAddr->_WriteSPI
    _SetLongRAMAddr->_WriteSPI
    _Init_IO->_OpenSPI
    _Init_IO->_OpenUSART
    _ADC->_OpenADC

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   73733
                                            118 COMRAM     1     1      0
                                _ADC
                       _CalculateCRC
                            _Init_IO
                       _MRF24J40Init
                         _OpenTimer0
                         _PHYReceive
                        _PHYTransmit
                         _SetChannel
                           _USARTOut
                        _WriteTimer0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     282
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             58    37     21   44576
                                             68 COMRAM    50    29     21
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10437
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10239
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4585
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3732
                                             62 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3435
                                             50 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2323
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2747
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WriteTimer0                                          4     2      2     132
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTOut                                             8     5      3     496
                                              6 COMRAM     8     5      3
                         _WriteUSART
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _WriteUSART                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetChannel                                           1     1      0    3744
                                              8 COMRAM     1     1      0
                     _SetLongRAMAddr
                    _SetShortRAMAddr
 ---------------------------------------------------------------------------------
 (1) _PHYTransmit                                          4     1      3    4006
                                              8 COMRAM     4     1      3
                     _SetLongRAMAddr
                    _SetShortRAMAddr
 ---------------------------------------------------------------------------------
 (1) _PHYReceive                                           7     3      4    2075
                                              8 COMRAM     7     3      4
                     _GetLongRAMAddr
                    _GetShortRAMAddr
                    _SetShortRAMAddr
 ---------------------------------------------------------------------------------
 (2) _GetShortRAMAddr                                      3     3      0      92
                                              2 COMRAM     3     3      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _GetLongRAMAddr                                       6     4      2     370
                                              2 COMRAM     6     4      2
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              1     1      0       1
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenTimer0                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MRF24J40Init                                         3     3      0    3814
                                              8 COMRAM     2     2      0
                     _SetLongRAMAddr
                    _SetShortRAMAddr
 ---------------------------------------------------------------------------------
 (2) _SetShortRAMAddr                                      3     2      1    1306
                                              2 COMRAM     3     2      1
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _SetLongRAMAddr                                       6     3      3    2416
                                              2 COMRAM     6     3      3
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0     500
                            _OpenSPI
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenSPI                                              3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _CalculateCRC                                         7     4      3     392
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _ADC                                                  0     0      0     582
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _OpenADC
                            _ReadADC
                         _SetChanADC
 ---------------------------------------------------------------------------------
 (2) _SetChanADC                                           2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     538
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Delay10TCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC
     _BusyADC
     _ConvertADC
     _Delay10TCYx
     _OpenADC
     _ReadADC
     _SetChanADC
   _CalculateCRC
   _Init_IO
     _OpenSPI
     _OpenUSART
   _MRF24J40Init
     _SetLongRAMAddr
       _WriteSPI
     _SetShortRAMAddr
       _WriteSPI
   _OpenTimer0
   _PHYReceive
     _GetLongRAMAddr
       _ReadSPI
       _WriteSPI
     _GetShortRAMAddr
       _ReadSPI
       _WriteSPI
     _SetShortRAMAddr
       _WriteSPI
   _PHYTransmit
     _SetLongRAMAddr
       _WriteSPI
     _SetShortRAMAddr
       _WriteSPI
   _SetChannel
     _SetLongRAMAddr
       _WriteSPI
     _SetShortRAMAddr
       _WriteSPI
   _USARTOut
     _WriteUSART
     _strlen (ARG)
   _WriteTimer0
   ___ftadd
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      26       5       29.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     77      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     125      34        0.0%
DATA                 0      0     125       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Nov 16 13:32:37 2022

             _SSPSTATbits 000FC7                        l71 E66C              ___awdiv@sign 000C  
     ___wmul@multiplicand 0011               __CFG_BORV$3 000000             ?_MRF24J40Init 0001  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_OSC$HS 000000              ___ftadd@exp1 003E  
            ___ftadd@exp2 003D              ___ftadd@sign 003C                       l102 DB48  
                     l320 DCFC                       l322 DD00                       l402 DE1E  
                     l323 DD02                       l243 F9F0                       l326 DD1C  
                     l406 DE32                       l327 DD3A                       l407 DE34  
                     _ADC E142                       l328 DD22                       l408 DE3E  
                     l329 DD26                       l409 DE40                       l337 D954  
                     l354 D9A8                       l370 D9E8                       l291 DDF8  
                     l369 D9E6                       l709 EADE                       l718 EAFA  
                     l671 E26E                       l639 E87C                       l743 E9AE  
                     l736 E920                       l729 E342                       l737 E948  
                     l818 E01C                       l828 DEB0                       l694 EA04  
                     l768 DA26                       l698 EA2E              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000      __size_of_WriteTimer0 0012              ___awmod@sign 0006  
                     wreg 000FE8       SetLongRAMAddr@value 0005                      ?_ADC 0001  
            __CFG_LVP$OFF 000000              ___ftdiv@cntr 002D              ___ftdiv@sign 0032  
            __CFG_WDT$OFF 000000                      l3000 E86A                      l3002 E876  
                    l3020 E112                      l3110 DE7E                      l3016 E0E2  
                    l3008 DB94                      l3040 E494                      l3120 DD48  
                    l3210 DFA8                      l2410 E226                      l2402 E1F0  
                    l3026 E13E                      l3114 DEA2                      l3106 DE6E  
                    l3122 DD54                      l2500 EAAA                      l3108 DE7A  
                    l2414 E23C                      l2406 E1FE                      l3070 E52E  
                    l3062 E50A                      l2416 E25A                      l2408 E208  
                    l3072 E534                      l2600 E074                      l3320 F53C  
                    l3138 E65A                      l2418 E264                      l2514 EB16  
                    l2506 EACC                      l3058 E4FA                      l3090 DFDE  
                    l3402 F7DE                      l3314 F522                      l3156 E688  
                    l3148 E676                      l3180 E42E                      l3252 DB62  
                    l2524 EB46                      l2508 EAD6                      l3076 E54A  
                    l3068 E522                      l2612 E09A                      l2540 E5AC  
                    l3420 F8BA                      l3340 F5C2                      l3332 F59C  
                    l3086 DFCE                      l2534 E584                      l3422 F8BE  
                    l3406 F802                      l3334 F5B2                      l2800 D93C  
                    l3184 E454                      l2472 EA3C                      l3088 DFDA  
                    l2616 E0A8                      l2608 E090                      l2640 DEFC  
                    l2632 DEE2                      l3504 FBAA                      l3440 F91C  
                    l3416 F856                      l3352 F604                      l3344 F5C8  
                    l3328 F566                      l3282 E1C8                      l3274 E1A8  
                    l3266 E188                      l2730 DE20                      l2722 DE12  
                    l3194 DF54                      l2466 EA12                      l3098 E00E  
                    l2554 E5DE                      l3522 FC02                      l3506 FBAE  
                    l3450 F9B6                      l3434 F8F6                      l3362 F644  
                    l3346 F5F0                      l3338 F5BE                      l3292 DBF4  
                    l2900 E8E6                      l2652 DF28                      l2644 DF10  
                    l2636 DEF0                      l2628 DED6                      l2564 E606  
                    l3532 FC44                      l3540 FCDA                      l3198 DF78  
                    l2494 EA8E                      l2590 E052                      l2638 DEF8  
                    l2558 E5EE                      l3526 FC22                      l3518 FBE6  
                    l3470 FA16                      l3462 F9F4                      l3438 F916  
                    l3390 F75C                      l3542 FCF2                      l3550 DB12  
                    l3622 EDD2                      l3288 DBC8                      l2496 EA98  
                    l2488 EA6C                      l2584 E042                      l2648 DF1A  
                    l2568 E616                      l3536 FCC6                      l3456 F9CC  
                    l3448 F9AC                      l3392 F76C                      l3562 E2B6  
                    l2498 EAA2                      l2930 E974                      l2834 ED72  
                    l2826 ECB2                      l3538 FCCA                      l3474 FA66  
                    l3458 F9DA                      l3394 F79A                      l3386 F738  
                    l3378 F6D4                      l2772 DD06                      l2940 E99C  
                    l2596 E068                      l3492 FB64                      l3484 FB44  
                    l3396 F7AA                      l3548 DB0E                      l2950 E784  
                    l2942 E9A8                      l2934 E984                      l2598 E070  
                    l2854 F300                      l3486 FB4E                      l3494 FB6E  
                    l3670 F030                      l3654 EF6E                      l3662 EFF4  
                    l2776 DD2A                      l3568 E2DE                      l2872 F4F4  
                    l2848 F25C                      l3672 F03A                      l2786 D968  
                    l2970 E7E4                      l2866 F450                      l2858 F324  
                    l3682 F112                      l3658 EFD4                      l3588 E31C  
                    l2956 E7A2                      l2884 D9C4                      l3676 F0A0  
                    l3684 F122                      l2990 E842                      l2894 E8BA  
                    l2994 E852                      l2978 E814                      STR_1 FEE3  
                    STR_2 FE77                      STR_3 FFA6                      STR_4 FF49  
                    u2111 E594                      u3110 F67C                      u2305 DCE2  
                    u2306 DCE4                      u2091 E56C                      u3115 F672  
                    u2440 D928                      u2275 DC92                      u2276 DC94  
                    u2285 DA7E                      u3421 E29E                      u2541 E89E  
                    u2286 DA80                      u3270 F9EA                      u2295 DAA6  
                    u2296 DAA8                      u3441 E2C6                      u2561 E8CA  
                    u2751 E478                      u3537 D93E                      u1881 E9D0  
                    u2770 E4B2                      u1891 E9E4                      u2775 E4AA  
                    _Text 0100                      _main EDB2              ___ftpack@arg 0001  
            ___ftpack@exp 0004                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0000             __CFG_IESO$OFF 000000              _sprintf$2340 0060  
           __CFG_MCLRE$ON 000000              ___ftmul@cntr 0022              ___param_bank 000010  
            ___ftmul@sign 0023           __end_of_BusyADC D92C           __end_of_ReadADC D93A  
         __end_of_ReadSPI D95C           __end_of_Init_IO DC44                     ??_ADC 0006  
             _Delay10TCYx D93A           __end_of_OpenADC DDFC              ___fttol@exp1 0039  
         __end_of_OpenSPI DD42              ___fttol@lval 0035            ??_MRF24J40Init 0009  
                   ?_main 0001           __end_of___awdiv E0B2           __end_of___ftadd EB6C  
         __end_of___awmod DF32         PHYReceive@NoBytes 000E           __end_of___ftdiv E374  
         __end_of___ftneg DA34           __end_of___lldiv E02E           __end_of___ftmul E650  
                   _T0CON 000FD5           ___awdiv@divisor 0009           __end_of___llmod DEC2  
         __end_of___ftsub DBBE           __end_of___fttol E55C           ___awdiv@counter 000B  
                   _RCSTA 000FAB                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _SPBRG 000FAF                     _PORTA 000F80     GetLongRAMAddr@address 0003  
   __size_of_CalculateCRC 0042                     _TRISA 000F92                     _TRISB 000F93  
                   _TXREG 000FAD                     _TXSTA 000FAC             __CFG_PWRT$OFF 000000  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000                     _Light 0080              ___lltoft@exp 0011  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
             ?_PHYReceive 0009     SetLongRAMAddr@address 0003           __end_of_dpowers FE29  
                   _scale F128           __end_of_isdigit D9CC             ___ftpack@sign 0005  
        __end_of_USARTOut DB7E                _ConvertADC D91C              USARTOut@data 0007  
                   tablat 000FF5                     status 000FD8           __end_of_sprintf FD00  
        ?_SetShortRAMAddr 0003            __CFG_PBADEN$ON 000000            WriteUSART@data 0001  
         __initialization DAD6              __end_of_main F128         SetChannel@channel 0009  
            _CalculateCRC DBBE                    ??_main 0077             ___fttol@sign1 0034  
           __activetblptr 000002                _SetChanADC D980      __size_of__tdiv_to_l_ 0132  
              _SetChannel DAAC                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0          ___llmod@dividend 000E                    ?_scale 0024  
                  _ADRESH 000FC4                    _ADRESL 000FC3          ___awdiv@dividend 0007  
        __end_of___ftpack E28E          __end_of_WriteSPI D9AE          __end_of___lltoft DD9E  
              _OpenTimer0 D9CC          __end_of___lwtoft DA10            _GetLongRAMAddr DC96  
                  _SPBRGH 000FB0          ??_SetLongRAMAddr 0006                    _SSPBUF 000FC9  
               ??_BusyADC 0001                 ??_ReadADC 0003                 ??_ReadSPI 0001  
               ??_Init_IO 0004                 ??_OpenADC 0003                 ??_OpenSPI 0003  
          __CFG_XINST$OFF 000000          __end_of__powers_ FE77                    _Motion 0078  
      __size_of_OpenUSART 0060                    ___ftge E0B2             MRF24J40Init@j 0009  
                  ___wmul DA34                 ??___awdiv 000B                 ??___ftadd 0039  
          __CFG_STVREN$ON 000000                 ??___awmod 0005                 ??___ftdiv 002A  
               ??___ftneg 0004                 ??___lldiv 0009                 ??___ftmul 001B  
               ??___llmod 0016                 ??___ftsub 0045                 ??___fttol 002F  
        OpenTimer0@config 0001       __size_of_PHYReceive 007A        PHYReceive@Strength 000B  
                  _fround EB6C                    clear_0 DADC                    clear_1 DAE8  
                  clear_2 DAF4          ___awdiv@quotient 000D           ___awmod@divisor 0003  
         ___awmod@counter 0005           WriteSPI@TempVar 0001                    _strlen DB04  
   ___ftmul@f3_as_product 001F             USARTOut@bytes 0009                 ??_isdigit 0001  
  GetLongRAMAddr@toReturn 0007  __size_of_GetShortRAMAddr 002A              ?_PHYTransmit 0009  
            __mediumconst FD00                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_sprintf 005A    __end_of_GetLongRAMAddr DCE8  
             ?_ConvertADC 0001      __end_of_MRF24J40Init E766                __accesstop 0080  
 __end_of__initialization DAFA                ___ftadd@f1 0033                ___ftadd@f2 0036  
              ___ftge@ff1 0001                ___ftge@ff2 0004             ___rparam_used 000001  
              ___ftdiv@f1 0024                ___ftdiv@f2 0027                ___ftdiv@f3 002E  
              ___ftneg@f1 0001                ___ftmul@f1 0015                ___ftmul@f2 0018  
              ___ftsub@f1 003F                ___ftsub@f2 0042                ___fttol@f1 002B  
              _WriteUSART D95C            __pcstackCOMRAM 0001                ___lltoft@c 0009  
           __end_of_scale F518                 ?_USARTOut 0007                ___lwtoft@c 0009  
              __div_to_l_ E766               ?_SetChanADC 0001               ?_SetChannel 0001  
       __end_of_OpenUSART DE5C           __div_to_l_@exp1 000C           __div_to_l_@cntr 000B  
                 ??_scale 0027           __div_to_l_@quot 0007           ?_GetLongRAMAddr 0003  
              __pbssBANK0 0080                __pbssBANK1 0100               ?_OpenTimer0 0001  
           __div_to_l_@f1 0001             __div_to_l_@f2 0004   GetShortRAMAddr@toReturn 0004  
              _code_Table FD01                   ?___ftge 0001              ?_Delay10TCYx 0001  
                 ?___wmul 000F          WriteTimer0@timer 0003             ??_WriteTimer0 0003  
                 ?_fround 0024       __size_of_ConvertADC 0004                ??_USARTOut 000A  
               ?___ftpack 0001                 ?_WriteSPI 0001                 ?___lltoft 0009  
                 ?_strlen 0001                 ?___lwtoft 0009           CalculateCRC@crc 0007  
            ??_PHYReceive 000D                   _SSPCON1 000FC6                   _SSPSTAT 000FC7  
       ??_GetShortRAMAddr 0003                   _BusyADC D920                 USARTOut@i 000D  
                 _ReadADC D92C                   _ReadSPI D94A                   _Init_IO DC00  
                 _OpenADC DD9E         __end_of__npowers_ FE50                   _OpenSPI DCE8  
                 __Hparam 0000       __size_of_SetChanADC 0016                _scale$2339 0027  
                 __Lparam 0000       __size_of_SetChannel 002A               ?_WriteUSART 0001  
         __size_of___ftge 0090                   ___awdiv E02E                   ___ftadd E9C0  
                 ___awmod DEC2                   ___ftdiv E28E                   ___ftneg DA10  
                 ___lldiv DFAC           __size_of___wmul 0026                   ___ftmul E55C  
                 ___llmod DE5C                   ___ftsub DB7E                   ___fttol E468  
      __end_of_PHYReceive DFAC               _Temperature 0083                   __pcinit DAD6  
              ??___ftpack 0006           __size_of_fround 0246           Delay10TCYx@unit 0001  
                 __ramtop 1000                ??_WriteSPI 0001       __size_of_OpenTimer0 0020  
              ??___lltoft 000D                   __ptext0 EDB2                   __ptext1 DB04  
                 __ptext2 F518                   __ptext3 F128                   __ptext4 D9AE  
                 __ptext5 EB6C                   __ptext6 DA34                   __ptext7 E55C  
                 __ptext8 DEC2                   __ptext9 E02E                ??___lwtoft 000C  
               _T0CONbits 000FD5              __size_of_ADC 009E      SetShortRAMAddr@value 0003  
         __size_of_strlen 003A               ?__div_to_l_ 0001                   _dpowers FE01  
                 _isdigit D9AE          ___awmod@dividend 0001       __end_of_WriteTimer0 D980  
   __size_of_MRF24J40Init 0116      __size_of_PHYTransmit 00F4            OpenADC@config2 0001  
                 _sprintf F518      end_of_initialization DAFA   GetLongRAMAddr@tmpINT0IE 0008  
           __Lmediumconst FD00               PHYReceive@i 000F           ___lldiv@divisor 0005  
         ___lldiv@counter 000D                 _RCSTAbits 000FAB                   postdec2 000FDD  
        WriteSPI@data_out 0002                   postinc0 000FEE                   postinc2 000FDE  
          __tdiv_to_l_@f1 0001            __tdiv_to_l_@f2 0004  __size_of_SetShortRAMAddr 0028  
                 strlen@s 0001             ??__tdiv_to_l_ 0007              _MRF24J40Init E650  
               _PORTCbits 000F82   SetLongRAMAddr@tmpINT0IE 0008                 _TRISAbits 000F92  
               _TRISCbits 000F94        PHYTransmit@NoBytes 000B       __size_of_WriteUSART 0012  
            ??_ConvertADC 0001               ___ftdiv@exp 0031                 _TXSTAbits 000FAC  
     __size_of__div_to_l_ 0128               ___ftmul@exp 001E            __end_of___ftge E142  
          __end_of___wmul DA5A      __size_of_Delay10TCYx 0010               _WriteTimer0 D96E  
      __end_of_ConvertADC D920            __end_of_fround EDB2          OpenSPI@smp_phase 0002  
            ??_SetChanADC 0001         __size_of_USARTOut 0040            __end_of_strlen DB3E  
        ??_GetLongRAMAddr 0005              ??_SetChannel 0009       start_initialization DAD6  
             __end_of_ADC E1E0            ReadSPI@TempVar 0001       __end_of__tdiv_to_l_ E9C0  
        OpenSPI@sync_mode 0003              ??_OpenTimer0 0001                 _OpenUSART DDFC  
         ___llmod@divisor 0012           ___llmod@counter 0016        __end_of_SetChanADC D996  
                ??___ftge 0007        __end_of_SetChannel DAD6                  ??___wmul 0013  
 __size_of_SetLongRAMAddr 0052          __CFG_LPT1OSC$OFF 000000                  ??_fround 0027  
           sprintf@tmpval 006D                  ??_strlen 0003        __end_of_OpenTimer0 D9EC  
         _GetShortRAMAddr DA82                fround@prec 002D         __size_of___ftpack 00AE  
       __size_of_WriteSPI 0018         __size_of___lltoft 005C         ??_SetShortRAMAddr 0004  
             __pbssCOMRAM 0078         __size_of___lwtoft 0024            PHYReceive@Data 0009  
            _isdigit$1980 0002    GetShortRAMAddr@address 0003                ?_OpenUSART 0001  
             sprintf@flag 0065               sprintf@fval 0073               sprintf@prec 0071  
                ?_BusyADC 0001                  ?_ReadADC 0001  GetShortRAMAddr@tmpINT0IE 0005  
                ?_ReadSPI 0001                  ?_Init_IO 0001         OpenADC@portconfig 0002  
                ?_OpenADC 0001                  ?_OpenSPI 0001         __CFG_CCP2MX$PORTC 000000  
            ??_WriteUSART 0001    SetShortRAMAddr@address 0004             __pmediumconst FD00  
                ?___awdiv 0007                  ?___ftadd 0033                  ?___awmod 0001  
           ?_CalculateCRC 0001                  ?___ftdiv 0024                  ?___ftneg 0001  
                ?___lldiv 0001                  ?___ftmul 0015                  ?___llmod 000E  
                ?___ftsub 003F                 __npowers_ FE29                  ?___fttol 002B  
             __tdiv_to_l_ E88E              ??__div_to_l_ 0007         WriteTimer0@timer0 0001  
                ?_isdigit 0001                  ?_sprintf 0045            __size_of_scale 03F0  
      __end_of_WriteUSART D96E                  _CRCRight 007B            ___wmul@product 0013  
           OpenADC@config 0005                  _PIE1bits 000F9D                  _PIR1bits 000F9E  
      __end_of__div_to_l_ E88E                  _RCONbits 000FD0          __CFG_WDTPS$32768 000000  
          ??_CalculateCRC 0004   __end_of_GetShortRAMAddr DAAC                  _USARTOut DB3E  
         OpenSPI@bus_mode 0001                _ADCON0bits 000FC2         ___wmul@multiplier 000F  
SetShortRAMAddr@tmpINT0IE 0005             ??_PHYTransmit 000C        __end_of_code_Table FE01  
             _INTCON2bits 000FF1               ??_OpenUSART 0003           OpenUSART@config 0003  
        __size_of_BusyADC 000C          __size_of_ReadADC 000E          __size_of_ReadSPI 0012  
        __size_of_Init_IO 0044                  __Hrparam 0000                  _RxPacket 008A  
        __size_of_OpenADC 005E                  __Lrparam 0000          __size_of_OpenSPI 005A  
     CalculateCRC@message 0001                  _TxPacket 0097        __CFG_BOREN$SBORDIS 000000  
          _SetLongRAMAddr DC44          __size_of___awdiv 0084          __size_of___ftadd 01AC  
        __size_of___awmod 0070          __size_of___ftdiv 00E6          __size_of___ftneg 0024  
        __size_of___lldiv 0082          __size_of___ftmul 00F4          __size_of___llmod 0066  
        __size_of___ftsub 0040          __size_of___fttol 00F4              ?_WriteTimer0 0001  
                _Strength 007E                  ___ftpack E1E0                  _WriteSPI D996  
             _fround$2337 002A               _fround$2338 0027                  ___lltoft DD42  
              _ADCresult1 0086                _ADCresult2 00A4                _ADCresult3 0088  
                ___lwtoft D9EC                sprintf@exp 006B                sprintf@val 0067  
        __size_of_isdigit 001E                  __ptext10 E88E                  __ptext11 E766  
                __ptext20 D9EC                  __ptext12 DD42                  __ptext21 E28E  
                __ptext13 DE5C                  __ptext30 DC96                  __ptext22 E1E0  
                __ptext14 DFAC                  __ptext31 D94A                  __ptext23 D96E  
                __ptext15 E468                  __ptext40 DBBE                  __ptext32 D9CC  
                __ptext24 DB3E                  __ptext16 DB7E                  __ptext41 E142  
                __ptext33 E650                  __ptext25 D95C                  __ptext17 E9C0  
                __ptext42 D980                  __ptext34 DA5A                  __ptext26 DAAC  
                __ptext18 DA10                  __ptext43 D92C                  __ptext35 DC44  
                __ptext27 E374                  __ptext19 E0B2                  __ptext44 DD9E  
                __ptext36 D996                  __ptext28 DF32                  __ptext45 D93A  
                __ptext37 DC00                  __ptext29 DA82                  __ptext46 D91C  
                __ptext38 DDFC                  __ptext47 D920                  __ptext39 DCE8  
                __powers_ FE50             CalculateCRC@i 0006          __size_of_sprintf 07E8  
     __end_of_PHYTransmit E468             __size_of_main 0376    __end_of_SetLongRAMAddr DC96  
           ??_Delay10TCYx 0001           _SetShortRAMAddr DA5A          ?_GetShortRAMAddr 0001  
              _INTCONbits 000FF2            OpenUSART@spbrg 0001        CalculateCRC@length 0003  
                isdigit@c 0003                  scale@scl 002A      __end_of_CalculateCRC DC00  
               sprintf@ap 0063          __tdiv_to_l_@exp1 000F                 sprintf@sp 0045  
        __tdiv_to_l_@cntr 000E          __tdiv_to_l_@quot 000A          ___lldiv@dividend 0001  
       SetChanADC@channel 0002                _OSCCONbits 000FD3           ?_SetLongRAMAddr 0003  
         PHYTransmit@Data 0009              ?__tdiv_to_l_ 0001       __end_of_Delay10TCYx D94A  
                sprintf@c 0076                  sprintf@f 0047          ___lldiv@quotient 0009  
                strlen@cp 0005               _PHYTransmit E374               _SSPCON1bits 000FC6  
              _PHYReceive DF32   __size_of_GetLongRAMAddr 0052   __end_of_SetShortRAMAddr DA82  
            PHYTransmit@i 000C              _USART_Status 007D  
