

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Nov 15 14:17:30 2022

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	smallconst
    43  001000                     __psmallconst:
    44                           	opt stack 0
    45  001000  00                 	db	0
    46  001001                     _dpowers:
    47                           	opt stack 0
    48  001001  0001               	dw	1
    49  001003  0000               	dw	0
    50  001005  000A               	dw	10
    51  001007  0000               	dw	0
    52  001009  0064               	dw	100
    53  00100B  0000               	dw	0
    54  00100D  03E8               	dw	1000
    55  00100F  0000               	dw	0
    56  001011  2710               	dw	10000
    57  001013  0000               	dw	0
    58  001015  86A0               	dw	34464
    59  001017  0001               	dw	1
    60  001019  4240               	dw	16960
    61  00101B  000F               	dw	15
    62  00101D  9680               	dw	38528
    63  00101F  0098               	dw	152
    64  001021  E100               	dw	57600
    65  001023  05F5               	dw	1525
    66  001025  CA00               	dw	51712
    67  001027  3B9A               	dw	15258
    68  001029                     __end_of_dpowers:
    69                           	opt stack 0
    70  001029                     __npowers_:
    71                           	opt stack 0
    72  001029  00                 	db	0
    73  00102A  80                 	db	128
    74  00102B  3F                 	db	63
    75  00102C  CD                 	db	205
    76  00102D  CC                 	db	204
    77  00102E  3D                 	db	61
    78  00102F  D7                 	db	215
    79  001030  23                 	db	35
    80  001031  3C                 	db	60
    81  001032  12                 	db	18
    82  001033  83                 	db	131
    83  001034  3A                 	db	58
    84  001035  B7                 	db	183
    85  001036  D1                 	db	209
    86  001037  38                 	db	56
    87  001038  C6                 	db	198
    88  001039  27                 	db	39
    89  00103A  37                 	db	55
    90  00103B  38                 	db	56
    91  00103C  86                 	db	134
    92  00103D  35                 	db	53
    93  00103E  C0                 	db	192
    94  00103F  D6                 	db	214
    95  001040  33                 	db	51
    96  001041  CC                 	db	204
    97  001042  2B                 	db	43
    98  001043  32                 	db	50
    99  001044  70                 	db	112
   100  001045  89                 	db	137
   101  001046  30                 	db	48
   102  001047  E7                 	db	231
   103  001048  DB                 	db	219
   104  001049  2E                 	db	46
   105  00104A  E5                 	db	229
   106  00104B  3C                 	db	60
   107  00104C  1E                 	db	30
   108  00104D  42                 	db	66
   109  00104E  A2                 	db	162
   110  00104F  0D                 	db	13
   111  001050                     __end_of__npowers_:
   112                           	opt stack 0
   113  001050                     __powers_:
   114                           	opt stack 0
   115  001050  00                 	db	0
   116  001051  80                 	db	128
   117  001052  3F                 	db	63
   118  001053  00                 	db	0
   119  001054  20                 	db	32
   120  001055  41                 	db	65
   121  001056  00                 	db	0
   122  001057  C8                 	db	200
   123  001058  42                 	db	66
   124  001059  00                 	db	0
   125  00105A  7A                 	db	122
   126  00105B  44                 	db	68
   127  00105C  40                 	db	64
   128  00105D  1C                 	db	28
   129  00105E  46                 	db	70
   130  00105F  50                 	db	80
   131  001060  C3                 	db	195
   132  001061  47                 	db	71
   133  001062  24                 	db	36
   134  001063  74                 	db	116
   135  001064  49                 	db	73
   136  001065  97                 	db	151
   137  001066  18                 	db	24
   138  001067  4B                 	db	75
   139  001068  BC                 	db	188
   140  001069  BE                 	db	190
   141  00106A  4C                 	db	76
   142  00106B  6B                 	db	107
   143  00106C  6E                 	db	110
   144  00106D  4E                 	db	78
   145  00106E  03                 	db	3
   146  00106F  15                 	db	21
   147  001070  50                 	db	80
   148  001071  79                 	db	121
   149  001072  AD                 	db	173
   150  001073  60                 	db	96
   151  001074  F3                 	db	243
   152  001075  49                 	db	73
   153  001076  71                 	db	113
   154  001077                     __end_of__powers_:
   155                           	opt stack 0
   156  0000                     _ADCON0	set	4034
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON1	set	4033
   159  0000                     _ADCON2	set	4032
   160  0000                     _ADRESH	set	4036
   161  0000                     _ADRESL	set	4035
   162  0000                     _INTCONbits	set	4082
   163  0000                     _PIE1bits	set	3997
   164  0000                     _PIR1bits	set	3998
   165  0000                     _RCSTA	set	4011
   166  0000                     _RCSTAbits	set	4011
   167  0000                     _SPBRG	set	4015
   168  0000                     _SPBRGH	set	4016
   169  0000                     _TRISCbits	set	3988
   170  0000                     _TXREG	set	4013
   171  0000                     _TXSTA	set	4012
   172  0000                     _TXSTAbits	set	4012
   173  001077                     STR_1:
   174  001077  25                 	db	37
   175  001078  66                 	db	102	;'f'
   176  001079  20                 	db	32
   177  00107A  00                 	db	0
   178                           
   179                           ; #config settings
   180  00107B  00                 	db	0	; dummy byte at the end
   181  0000                     
   182                           	psect	cinit
   183  002906                     __pcinit:
   184                           	opt stack 0
   185  002906                     start_initialization:
   186                           	opt stack 0
   187  002906                     __initialization:
   188                           	opt stack 0
   189                           
   190                           ; Clear objects allocated to COMRAM (1 bytes)
   191  002906  6A67               	clrf	__pbssCOMRAM& (0+255),c
   192  002908                     end_of_initialization:
   193                           	opt stack 0
   194  002908                     __end_of__initialization:
   195                           	opt stack 0
   196  002908  0E00               	movlw	low (__Lmediumconst shr (0+16))
   197  00290A  6EF8               	movwf	tblptru,c
   198  00290C  0100               	movlb	0
   199  00290E  EFB1  F011         	goto	_main	;jump to C main() function
   200                           tblptru	equ	0xFF8
   201                           
   202                           	psect	bssCOMRAM
   203  000067                     __pbssCOMRAM:
   204                           	opt stack 0
   205  000067                     _USART_Status:
   206                           	opt stack 0
   207  000067                     	ds	1
   208                           tblptru	equ	0xFF8
   209                           
   210                           	psect	cstackCOMRAM
   211  000001                     __pcstackCOMRAM:
   212                           	opt stack 0
   213  000001                     ??_SetChanADC:
   214  000001                     ??_Delay10KTCYx:
   215  000001                     ?_ReadADC:
   216                           	opt stack 0
   217  000001                     ?_strlen:
   218                           	opt stack 0
   219  000001                     ?___awmod:
   220                           	opt stack 0
   221  000001                     ?___ftpack:
   222                           	opt stack 0
   223  000001                     ?___ftneg:
   224                           	opt stack 0
   225  000001                     ?__tdiv_to_l_:
   226                           	opt stack 0
   227  000001                     ?__div_to_l_:
   228                           	opt stack 0
   229  000001                     ?___lldiv:
   230                           	opt stack 0
   231  000001                     ?___llmod:
   232                           	opt stack 0
   233  000001                     OpenADC@config2:
   234                           	opt stack 0
   235  000001                     WriteUSART@data:
   236                           	opt stack 0
   237  000001                     OpenUSART@spbrg:
   238                           	opt stack 0
   239  000001                     ___awmod@dividend:
   240                           	opt stack 0
   241  000001                     strlen@s:
   242                           	opt stack 0
   243  000001                     __div_to_l_@f1:
   244                           	opt stack 0
   245  000001                     ___ftpack@arg:
   246                           	opt stack 0
   247  000001                     __tdiv_to_l_@f1:
   248                           	opt stack 0
   249  000001                     ___ftge@ff1:
   250                           	opt stack 0
   251  000001                     ___ftneg@f1:
   252                           	opt stack 0
   253  000001                     ___lldiv@dividend:
   254                           	opt stack 0
   255  000001                     ___llmod@dividend:
   256                           	opt stack 0
   257                           
   258                           ; 4 bytes @ 0x0
   259  000001                     	ds	1
   260  000002                     OpenADC@portconfig:
   261                           	opt stack 0
   262  000002                     SetChanADC@channel:
   263                           	opt stack 0
   264  000002                     Delay10KTCYx@unit:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x1
   268  000002                     	ds	1
   269  000003                     ??_OpenADC:
   270  000003                     ??_ReadADC:
   271  000003                     ??_strlen:
   272  000003                     OpenUSART@config:
   273                           	opt stack 0
   274  000003                     ___awmod@divisor:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x2
   278  000003                     	ds	1
   279  000004                     ___ftpack@exp:
   280                           	opt stack 0
   281  000004                     __div_to_l_@f2:
   282                           	opt stack 0
   283  000004                     __tdiv_to_l_@f2:
   284                           	opt stack 0
   285  000004                     ___ftge@ff2:
   286                           	opt stack 0
   287                           
   288                           ; 3 bytes @ 0x3
   289  000004                     	ds	1
   290  000005                     OpenADC@config:
   291                           	opt stack 0
   292  000005                     ___awmod@counter:
   293                           	opt stack 0
   294  000005                     ___ftpack@sign:
   295                           	opt stack 0
   296  000005                     strlen@cp:
   297                           	opt stack 0
   298  000005                     ___lldiv@divisor:
   299                           	opt stack 0
   300  000005                     ___llmod@divisor:
   301                           	opt stack 0
   302                           
   303                           ; 4 bytes @ 0x4
   304  000005                     	ds	1
   305  000006                     ??___ftpack:
   306  000006                     ___awmod@sign:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x5
   310  000006                     	ds	1
   311  000007                     ??__tdiv_to_l_:
   312  000007                     ??___ftge:
   313  000007                     ?___awdiv:
   314                           	opt stack 0
   315  000007                     USARTOut@data:
   316                           	opt stack 0
   317  000007                     ___awdiv@dividend:
   318                           	opt stack 0
   319  000007                     __div_to_l_@quot:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x6
   323  000007                     	ds	2
   324  000009                     ?___awtoft:
   325                           	opt stack 0
   326  000009                     ?___lltoft:
   327                           	opt stack 0
   328  000009                     USARTOut@bytes:
   329                           	opt stack 0
   330  000009                     ___llmod@counter:
   331                           	opt stack 0
   332  000009                     ___awdiv@divisor:
   333                           	opt stack 0
   334  000009                     ___awtoft@c:
   335                           	opt stack 0
   336  000009                     ___lldiv@quotient:
   337                           	opt stack 0
   338  000009                     ___lltoft@c:
   339                           	opt stack 0
   340                           
   341                           ; 4 bytes @ 0x8
   342  000009                     	ds	1
   343  00000A                     ??_USARTOut:
   344  00000A                     __tdiv_to_l_@quot:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x9
   348  00000A                     	ds	1
   349  00000B                     ___awdiv@counter:
   350                           	opt stack 0
   351  00000B                     __div_to_l_@cntr:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0xA
   355  00000B                     	ds	1
   356  00000C                     ___awdiv@sign:
   357                           	opt stack 0
   358  00000C                     ___awtoft@sign:
   359                           	opt stack 0
   360  00000C                     __div_to_l_@exp1:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0xB
   364  00000C                     	ds	1
   365  00000D                     ??___lltoft:
   366  00000D                     ___lldiv@counter:
   367                           	opt stack 0
   368  00000D                     USARTOut@i:
   369                           	opt stack 0
   370  00000D                     ___awdiv@quotient:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0xC
   374  00000D                     	ds	1
   375  00000E                     __tdiv_to_l_@cntr:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0xD
   379  00000E                     	ds	1
   380  00000F                     ?___wmul:
   381                           	opt stack 0
   382  00000F                     __tdiv_to_l_@exp1:
   383                           	opt stack 0
   384  00000F                     ___wmul@multiplier:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0xE
   388  00000F                     	ds	2
   389  000011                     ___lltoft@exp:
   390                           	opt stack 0
   391  000011                     ___wmul@multiplicand:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x10
   395  000011                     	ds	2
   396  000013                     ___wmul@product:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x12
   400  000013                     	ds	2
   401  000015                     ?___ftmul:
   402                           	opt stack 0
   403  000015                     ___ftmul@f1:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x14
   407  000015                     	ds	3
   408  000018                     ___ftmul@f2:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0x17
   412  000018                     	ds	3
   413  00001B                     ??___ftmul:
   414                           
   415                           ; 0 bytes @ 0x1A
   416  00001B                     	ds	3
   417  00001E                     ___ftmul@exp:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x1D
   421  00001E                     	ds	1
   422  00001F                     ___ftmul@f3_as_product:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x1E
   426  00001F                     	ds	3
   427  000022                     ___ftmul@cntr:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x21
   431  000022                     	ds	1
   432  000023                     ___ftmul@sign:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x22
   436  000023                     	ds	1
   437  000024                     ?_fround:
   438                           	opt stack 0
   439  000024                     ?_scale:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x23
   443  000024                     	ds	3
   444  000027                     _fround$1439:
   445                           	opt stack 0
   446  000027                     _scale$1440:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x26
   450  000027                     	ds	3
   451  00002A                     scale@scl:
   452                           	opt stack 0
   453  00002A                     _fround$1438:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0x29
   457  00002A                     	ds	1
   458  00002B                     ?___fttol:
   459                           	opt stack 0
   460  00002B                     ___fttol@f1:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x2A
   464  00002B                     	ds	2
   465  00002D                     fround@prec:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x2C
   469  00002D                     	ds	1
   470  00002E                     ?___ftadd:
   471                           	opt stack 0
   472  00002E                     ___ftadd@f1:
   473                           	opt stack 0
   474                           
   475                           ; 3 bytes @ 0x2D
   476  00002E                     	ds	1
   477  00002F                     ??___fttol:
   478                           
   479                           ; 0 bytes @ 0x2E
   480  00002F                     	ds	2
   481  000031                     ___ftadd@f2:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x30
   485  000031                     	ds	3
   486  000034                     ??___ftadd:
   487  000034                     ___fttol@sign1:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x33
   491  000034                     	ds	1
   492  000035                     ___fttol@lval:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x34
   496  000035                     	ds	2
   497  000037                     ___ftadd@sign:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x36
   501  000037                     	ds	1
   502  000038                     ___ftadd@exp2:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x37
   506  000038                     	ds	1
   507  000039                     ___ftadd@exp1:
   508                           	opt stack 0
   509  000039                     ___fttol@exp1:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x38
   513  000039                     	ds	1
   514  00003A                     ?___ftsub:
   515                           	opt stack 0
   516  00003A                     ___ftsub@f1:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x39
   520  00003A                     	ds	3
   521  00003D                     ___ftsub@f2:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x3C
   525  00003D                     	ds	3
   526  000040                     ?_sprintf:
   527                           	opt stack 0
   528  000040                     sprintf@sp:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x3F
   532  000040                     	ds	2
   533  000042                     sprintf@f:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x41
   537  000042                     	ds	5
   538  000047                     ??_sprintf:
   539                           
   540                           ; 0 bytes @ 0x46
   541  000047                     	ds	6
   542  00004D                     _sprintf$1441:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x4C
   546  00004D                     	ds	3
   547  000050                     sprintf@ap:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x4F
   551  000050                     	ds	2
   552  000052                     sprintf@flag:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x51
   556  000052                     	ds	2
   557  000054                     sprintf@prec:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x53
   561  000054                     	ds	2
   562  000056                     sprintf@val:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x55
   566  000056                     	ds	4
   567  00005A                     sprintf@exp:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x59
   571  00005A                     	ds	2
   572  00005C                     sprintf@tmpval:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x5B
   576  00005C                     	ds	4
   577  000060                     sprintf@fval:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x5F
   581  000060                     	ds	3
   582  000063                     sprintf@c:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x62
   586  000063                     	ds	1
   587  000064                     main@str:
   588                           	opt stack 0
   589  000064                     main@ADCresult1:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x63
   593  000064                     	ds	3
   594                           tblptru	equ	0xFF8
   595                           
   596 ;;
   597 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   598 ;;
   599 ;; *************** function _main *****************
   600 ;; Defined at:
   601 ;;		line 71 in file "motion.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  ADCresult1      3   99[COMRAM] float 
   606 ;;  str             0   99[COMRAM] unsigned char [0]
   607 ;; Return value:  Size  Location     Type
   608 ;;		None               void
   609 ;; Registers used:
   610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   619 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;Total ram usage:        3 bytes
   621 ;; Hardware stack levels required when called:    4
   622 ;; This function calls:
   623 ;;		_BusyADC
   624 ;;		_ConvertADC
   625 ;;		_Delay10KTCYx
   626 ;;		_OpenADC
   627 ;;		_OpenUSART
   628 ;;		_ReadADC
   629 ;;		_SetChanADC
   630 ;;		_USARTOut
   631 ;;		___awtoft
   632 ;;		_sprintf
   633 ;;		_strlen
   634 ;; This function is called by:
   635 ;;		Startup code after reset
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text0
   640  002362                     __ptext0:
   641                           	opt stack 0
   642  002362                     _main:
   643                           	opt stack 27
   644                           
   645                           ;motion.c: 73: float ADCresult1;
   646                           ;motion.c: 74: char str[];
   647                           ;motion.c: 76: OpenADC( 0b10101111 & 0b11111111 & 0b11111001, 0b10001111 & 0b01111111 & 
      +                          0b11111100,0);
   648                           
   649                           ;incstack = 0
   650  002362  0E0C               	movlw	12
   651  002364  6E01               	movwf	OpenADC@config2,c
   652  002366  0E00               	movlw	0
   653  002368  6E02               	movwf	OpenADC@portconfig,c
   654  00236A  0EA9               	movlw	169
   655  00236C  EC62  F013         	call	_OpenADC
   656                           
   657                           ;motion.c: 80: OpenUSART( 0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111
      +                           & 0b11111111,25);
   658  002370  0E00               	movlw	0
   659  002372  6E02               	movwf	OpenUSART@spbrg+1,c
   660  002374  0E19               	movlw	25
   661  002376  6E01               	movwf	OpenUSART@spbrg,c
   662  002378  0E3C               	movlw	60
   663  00237A  EC32  F013         	call	_OpenUSART
   664  00237E                     l2552:
   665                           
   666                           ;motion.c: 82: {
   667                           ;motion.c: 84: SetChanADC(0b10001111);
   668  00237E  0E8F               	movlw	143
   669  002380  EC5D  F014         	call	_SetChanADC
   670                           
   671                           ;motion.c: 85: Delay10KTCYx(5);
   672  002384  0E05               	movlw	5
   673  002386  EC68  F014         	call	_Delay10KTCYx
   674                           
   675                           ;motion.c: 86: ConvertADC();
   676  00238A  EC8F  F014         	call	_ConvertADC	;wreg free
   677  00238E                     l2558:
   678  00238E  EC89  F014         	call	_BusyADC	;wreg free
   679  002392  0900               	iorlw	0
   680  002394  A4D8               	btfss	status,2,c
   681  002396  D7FB               	goto	l2558
   682                           
   683                           ;motion.c: 88: ADCresult1 = ReadADC();
   684  002398  EC7C  F014         	call	_ReadADC	;wreg free
   685  00239C  C001  F009         	movff	?_ReadADC,___awtoft@c
   686  0023A0  C002  F00A         	movff	?_ReadADC+1,___awtoft@c+1
   687  0023A4  EC1C  F014         	call	___awtoft	;wreg free
   688  0023A8  C009  F064         	movff	?___awtoft,main@ADCresult1
   689  0023AC  C00A  F065         	movff	?___awtoft+1,main@ADCresult1+1
   690  0023B0  C00B  F066         	movff	?___awtoft+2,main@ADCresult1+2
   691                           
   692                           ;motion.c: 90: sprintf(str, "%f ", ADCresult1);
   693  0023B4  0E64               	movlw	low main@str
   694  0023B6  6E40               	movwf	sprintf@sp,c
   695  0023B8  0E00               	movlw	high main@str
   696  0023BA  6E41               	movwf	sprintf@sp+1,c
   697  0023BC  0E77               	movlw	low STR_1
   698  0023BE  6E42               	movwf	sprintf@f,c
   699  0023C0  0E10               	movlw	high STR_1
   700  0023C2  6E43               	movwf	sprintf@f+1,c
   701  0023C4  C064  F044         	movff	main@ADCresult1,?_sprintf+4
   702  0023C8  C065  F045         	movff	main@ADCresult1+1,?_sprintf+5
   703  0023CC  C066  F046         	movff	main@ADCresult1+2,?_sprintf+6
   704  0023D0  EC3E  F008         	call	_sprintf	;wreg free
   705                           
   706                           ;motion.c: 91: USARTOut(str,strlen(str));
   707  0023D4  0E64               	movlw	low main@str
   708  0023D6  6E07               	movwf	USARTOut@data,c
   709  0023D8  0E00               	movlw	high main@str
   710  0023DA  6E08               	movwf	USARTOut@data+1,c
   711  0023DC  0E64               	movlw	low main@str
   712  0023DE  6E01               	movwf	strlen@s,c
   713  0023E0  0E00               	movlw	high main@str
   714  0023E2  6E02               	movwf	strlen@s+1,c
   715  0023E4  ECFF  F013         	call	_strlen	;wreg free
   716  0023E8  5001               	movf	?_strlen,w,c
   717  0023EA  6E09               	movwf	USARTOut@bytes,c
   718  0023EC  ECDF  F013         	call	_USARTOut	;wreg free
   719                           
   720                           ;motion.c: 101: Delay10KTCYx(50);
   721  0023F0  0E32               	movlw	50
   722  0023F2  EC68  F014         	call	_Delay10KTCYx
   723  0023F6  D7C3               	goto	l2552
   724  0023F8                     __end_of_main:
   725                           	opt stack 0
   726                           tblptru	equ	0xFF8
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _strlen *****************
   730 ;; Defined at:
   731 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strlen.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  s               2    0[COMRAM] PTR const unsigned char 
   734 ;;		 -> main@str(0), 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  cp              2    4[COMRAM] PTR const unsigned char 
   737 ;;		 -> main@str(0), 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  2    0[COMRAM] unsigned int 
   740 ;; Registers used:
   741 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;Total ram usage:        6 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text1
   761  0027FE                     __ptext1:
   762                           	opt stack 0
   763  0027FE                     _strlen:
   764                           	opt stack 30
   765                           
   766                           ;incstack = 0
   767  0027FE  C001  F005         	movff	strlen@s,strlen@cp
   768  002802  C002  F006         	movff	strlen@s+1,strlen@cp+1
   769  002806  D002               	goto	l2530
   770  002808                     l2528:
   771  002808  4A05               	infsnz	strlen@cp,f,c
   772  00280A  2A06               	incf	strlen@cp+1,f,c
   773  00280C                     l2530:
   774  00280C  C005  FFD9         	movff	strlen@cp,fsr2l
   775  002810  C006  FFDA         	movff	strlen@cp+1,fsr2h
   776  002814  50DF               	movf	indf2,w,c
   777  002816  A4D8               	btfss	status,2,c
   778  002818  D7F7               	goto	l2528
   779  00281A  C001  F003         	movff	strlen@s,??_strlen
   780  00281E  C002  F004         	movff	strlen@s+1,??_strlen+1
   781  002822  1E03               	comf	??_strlen,f,c
   782  002824  1E04               	comf	??_strlen+1,f,c
   783  002826  4A03               	infsnz	??_strlen,f,c
   784  002828  2A04               	incf	??_strlen+1,f,c
   785  00282A  5005               	movf	strlen@cp,w,c
   786  00282C  2403               	addwf	??_strlen,w,c
   787  00282E  6E01               	movwf	?_strlen,c
   788  002830  5006               	movf	strlen@cp+1,w,c
   789  002832  2004               	addwfc	??_strlen+1,w,c
   790  002834  6E02               	movwf	?_strlen+1,c
   791  002836  0012               	return	
   792  002838                     __end_of_strlen:
   793                           	opt stack 0
   794                           tblptru	equ	0xFF8
   795                           indf2	equ	0xFDF
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _sprintf *****************
   801 ;; Defined at:
   802 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  sp              2   63[COMRAM] PTR unsigned char 
   805 ;;		 -> main@str(0), 
   806 ;;  f               2   65[COMRAM] PTR const unsigned char 
   807 ;;		 -> STR_1(4), 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  tmpval          4   91[COMRAM] struct .
   810 ;;  val             4   85[COMRAM] unsigned long 
   811 ;;  fval            3   95[COMRAM] unsigned long 
   812 ;;  cp              3    0        PTR const unsigned char 
   813 ;;  exp             2   89[COMRAM] int 
   814 ;;  prec            2   83[COMRAM] int 
   815 ;;  flag            2   81[COMRAM] unsigned short 
   816 ;;  ap              2   79[COMRAM] PTR void [1]
   817 ;;		 -> ?_sprintf(2), 
   818 ;;  len             2    0        unsigned int 
   819 ;;  width           2    0        int 
   820 ;;  c               1   98[COMRAM] char 
   821 ;;  d               1    0        unsigned char 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  2   63[COMRAM] int 
   824 ;; Registers used:
   825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   831 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;Total ram usage:       36 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    3
   838 ;; This function calls:
   839 ;;		___awdiv
   840 ;;		___ftadd
   841 ;;		___ftge
   842 ;;		___ftmul
   843 ;;		___ftneg
   844 ;;		___ftsub
   845 ;;		___fttol
   846 ;;		___lldiv
   847 ;;		___llmod
   848 ;;		___lltoft
   849 ;;		___wmul
   850 ;;		__div_to_l_
   851 ;;		__tdiv_to_l_
   852 ;;		_fround
   853 ;;		_scale
   854 ;; This function is called by:
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text2
   860  00107C                     __ptext2:
   861                           	opt stack 0
   862  00107C                     _sprintf:
   863                           	opt stack 27
   864                           
   865                           ;doprnt.c: 494: va_list ap;
   866                           ;doprnt.c: 499: signed char c;
   867                           ;doprnt.c: 501: int width;
   868                           ;doprnt.c: 504: int prec;
   869                           ;doprnt.c: 508: unsigned short flag;
   870                           ;doprnt.c: 515: char d;
   871                           ;doprnt.c: 516: double fval;
   872                           ;doprnt.c: 517: int exp;
   873                           ;doprnt.c: 523: union {
   874                           ;doprnt.c: 524: unsigned long vd;
   875                           ;doprnt.c: 525: double integ;
   876                           ;doprnt.c: 526: } tmpval;
   877                           ;doprnt.c: 528: unsigned long val;
   878                           ;doprnt.c: 529: unsigned len;
   879                           ;doprnt.c: 530: const char * cp;
   880                           ;doprnt.c: 533: *ap = __va_start();
   881                           
   882                           ;incstack = 0
   883  00107C  0E44               	movlw	low (?_sprintf+4)
   884  00107E  6E50               	movwf	sprintf@ap,c
   885  001080  0E00               	movlw	high (?_sprintf+4)
   886  001082  6E51               	movwf	sprintf@ap+1,c
   887                           
   888                           ;doprnt.c: 536: while(c = *f++) {
   889  001084  D2F2               	goto	l2520
   890  001086                     l2354:
   891                           
   892                           ;doprnt.c: 538: if(c != '%')
   893  001086  0E25               	movlw	37
   894  001088  1863               	xorwf	sprintf@c,w,c
   895  00108A  B4D8               	btfsc	status,2,c
   896  00108C  D007               	goto	l2360
   897                           
   898                           ;doprnt.c: 540: {
   899                           ;doprnt.c: 541: ((*sp++ = (c)));
   900  00108E  C040  FFD9         	movff	sprintf@sp,fsr2l
   901  001092  C041  FFDA         	movff	sprintf@sp+1,fsr2h
   902  001096  C063  FFDF         	movff	sprintf@c,indf2
   903  00109A  D2E5               	goto	l2518
   904  00109C                     l2360:
   905                           
   906                           ;doprnt.c: 543: }
   907                           ;doprnt.c: 548: flag = 0;
   908  00109C  0E00               	movlw	0
   909  00109E  6E53               	movwf	sprintf@flag+1,c
   910  0010A0  0E00               	movlw	0
   911  0010A2  6E52               	movwf	sprintf@flag,c
   912                           
   913                           ;doprnt.c: 635: switch(c = *f++) {
   914  0010A4  D002               	goto	l2366
   915  0010A6                     l2362:
   916                           
   917                           ;doprnt.c: 663: flag |= 0x400;
   918  0010A6  8453               	bsf	sprintf@flag+1,2,c
   919                           
   920                           ;doprnt.c: 664: break;
   921  0010A8  D011               	goto	l2368
   922  0010AA                     l2366:
   923  0010AA  C042  FFF6         	movff	sprintf@f,tblptrl
   924  0010AE  C043  FFF7         	movff	sprintf@f+1,tblptrh
   925  0010B2  4A42               	infsnz	sprintf@f,f,c
   926  0010B4  2A43               	incf	sprintf@f+1,f,c
   927  0010B6                     	if	0	;tblptru may be non-zero
   928  0010B6                     	endif
   929  0010B6                     	if	0	;tblptru may be non-zero
   930  0010B6                     	endif
   931  0010B6  0008               	tblrd		*
   932  0010B8  CFF5 F063          	movff	tablat,sprintf@c
   933  0010BC  5063               	movf	sprintf@c,w,c
   934                           
   935                           ; Switch size 1, requested type "space"
   936                           ; Number of cases is 2, Range of values is 0 to 102
   937                           ; switch strategies available:
   938                           ; Name         Instructions Cycles
   939                           ; simple_byte            7     4 (average)
   940                           ;	Chosen strategy is simple_byte
   941  0010BE  0A00               	xorlw	0	; case 0
   942  0010C0  B4D8               	btfsc	status,2,c
   943  0010C2  D2DF               	goto	l2522
   944  0010C4  0A66               	xorlw	102	; case 102
   945  0010C6  B4D8               	btfsc	status,2,c
   946  0010C8  D7EE               	goto	l2362
   947  0010CA  D2CF               	goto	l2520
   948  0010CC                     l2368:
   949                           
   950                           ;doprnt.c: 825: if(flag & (0x700)) {
   951  0010CC  0E07               	movlw	7
   952  0010CE  1453               	andwf	sprintf@flag+1,w,c
   953  0010D0  B4D8               	btfsc	status,2,c
   954  0010D2  D2B9               	goto	l2514
   955                           
   956                           ;doprnt.c: 829: prec = 6;
   957  0010D4  0E00               	movlw	0
   958  0010D6  6E55               	movwf	sprintf@prec+1,c
   959  0010D8  0E06               	movlw	6
   960  0010DA  6E54               	movwf	sprintf@prec,c
   961                           
   962                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
   963  0010DC  C050  FFD9         	movff	sprintf@ap,fsr2l
   964  0010E0  C051  FFDA         	movff	sprintf@ap+1,fsr2h
   965  0010E4  CFDE F060          	movff	postinc2,sprintf@fval
   966  0010E8  CFDE F061          	movff	postinc2,sprintf@fval+1
   967  0010EC  CFDD F062          	movff	postdec2,sprintf@fval+2
   968  0010F0  0E03               	movlw	3
   969  0010F2  2650               	addwf	sprintf@ap,f,c
   970  0010F4  0E00               	movlw	0
   971  0010F6  2251               	addwfc	sprintf@ap+1,f,c
   972                           
   973                           ;doprnt.c: 831: if(fval < 0.0) {
   974  0010F8  AE62               	btfss	sprintf@fval+2,7,c
   975  0010FA  D010               	goto	l2382
   976                           
   977                           ;doprnt.c: 832: fval = -fval;
   978  0010FC  C060  F001         	movff	sprintf@fval,___ftneg@f1
   979  001100  C061  F002         	movff	sprintf@fval+1,___ftneg@f1+1
   980  001104  C062  F003         	movff	sprintf@fval+2,___ftneg@f1+2
   981  001108  EC4B  F014         	call	___ftneg	;wreg free
   982  00110C  C001  F060         	movff	?___ftneg,sprintf@fval
   983  001110  C002  F061         	movff	?___ftneg+1,sprintf@fval+1
   984  001114  C003  F062         	movff	?___ftneg+2,sprintf@fval+2
   985                           
   986                           ;doprnt.c: 833: flag |= 0x03;
   987  001118  0E03               	movlw	3
   988  00111A  1252               	iorwf	sprintf@flag,f,c
   989  00111C                     l2382:
   990                           
   991                           ;doprnt.c: 834: }
   992                           ;doprnt.c: 835: exp = 0;
   993  00111C  0E00               	movlw	0
   994  00111E  6E5B               	movwf	sprintf@exp+1,c
   995  001120  0E00               	movlw	0
   996  001122  6E5A               	movwf	sprintf@exp,c
   997                           
   998                           ;doprnt.c: 836: if( fval!=0) {
   999  001124  5060               	movf	sprintf@fval,w,c
  1000  001126  1061               	iorwf	sprintf@fval+1,w,c
  1001  001128  1062               	iorwf	sprintf@fval+2,w,c
  1002  00112A  B4D8               	btfsc	status,2,c
  1003  00112C  D083               	goto	l2410
  1004                           
  1005                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1006  00112E  0E82               	movlw	130
  1007  001130  6E47               	movwf	??_sprintf& (0+255),c
  1008  001132  0EFF               	movlw	255
  1009  001134  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1010  001136  C060  F049         	movff	sprintf@fval,??_sprintf+2
  1011  00113A  C061  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1012  00113E  C062  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1013  001142  C063  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1014  001146  0E10               	movlw	16
  1015  001148  D005               	goto	u2430
  1016  00114A                     u2435:
  1017  00114A  90D8               	bcf	status,0,c
  1018  00114C  324C               	rrcf	??_sprintf+5,f,c
  1019  00114E  324B               	rrcf	??_sprintf+4,f,c
  1020  001150  324A               	rrcf	??_sprintf+3,f,c
  1021  001152  3249               	rrcf	??_sprintf+2,f,c
  1022  001154                     u2430:
  1023  001154  2EE8               	decfsz	wreg,f,c
  1024  001156  D7F9               	goto	u2435
  1025  001158  5049               	movf	??_sprintf+2,w,c
  1026  00115A  2447               	addwf	??_sprintf,w,c
  1027  00115C  6E5A               	movwf	sprintf@exp,c
  1028  00115E  0E00               	movlw	0
  1029  001160  2048               	addwfc	??_sprintf+1,w,c
  1030  001162  6E5B               	movwf	sprintf@exp+1,c
  1031                           
  1032                           ;doprnt.c: 838: exp--;
  1033  001164  065A               	decf	sprintf@exp,f,c
  1034  001166  A0D8               	btfss	status,0,c
  1035  001168  065B               	decf	sprintf@exp+1,f,c
  1036                           
  1037                           ;doprnt.c: 839: exp *= 3;
  1038  00116A  C05A  F00F         	movff	sprintf@exp,___wmul@multiplier
  1039  00116E  C05B  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1040  001172  0E00               	movlw	0
  1041  001174  6E12               	movwf	___wmul@multiplicand+1,c
  1042  001176  0E03               	movlw	3
  1043  001178  6E11               	movwf	___wmul@multiplicand,c
  1044  00117A  EC38  F014         	call	___wmul	;wreg free
  1045  00117E  C00F  F05A         	movff	?___wmul,sprintf@exp
  1046  001182  C010  F05B         	movff	?___wmul+1,sprintf@exp+1
  1047                           
  1048                           ;doprnt.c: 840: exp /= 10;
  1049  001186  C05A  F007         	movff	sprintf@exp,___awdiv@dividend
  1050  00118A  C05B  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1051  00118E  0E00               	movlw	0
  1052  001190  6E0A               	movwf	___awdiv@divisor+1,c
  1053  001192  0E0A               	movlw	10
  1054  001194  6E09               	movwf	___awdiv@divisor,c
  1055  001196  EC44  F012         	call	___awdiv	;wreg free
  1056  00119A  C007  F05A         	movff	?___awdiv,sprintf@exp
  1057  00119E  C008  F05B         	movff	?___awdiv+1,sprintf@exp+1
  1058                           
  1059                           ;doprnt.c: 841: if(exp < 0)
  1060  0011A2  AE5B               	btfss	sprintf@exp+1,7,c
  1061  0011A4  D003               	goto	l2398
  1062                           
  1063                           ;doprnt.c: 842: exp--;
  1064  0011A6  065A               	decf	sprintf@exp,f,c
  1065  0011A8  A0D8               	btfss	status,0,c
  1066  0011AA  065B               	decf	sprintf@exp+1,f,c
  1067  0011AC                     l2398:
  1068                           
  1069                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1070  0011AC  505A               	movf	sprintf@exp,w,c
  1071  0011AE  0800               	sublw	0
  1072  0011B0  EC48  F00B         	call	_scale
  1073  0011B4  C024  F05C         	movff	?_scale,sprintf@tmpval
  1074  0011B8  C025  F05D         	movff	?_scale+1,sprintf@tmpval+1
  1075  0011BC  C026  F05E         	movff	?_scale+2,sprintf@tmpval+2
  1076                           
  1077                           ;doprnt.c: 847: tmpval.integ *= fval;
  1078  0011C0  C05C  F015         	movff	sprintf@tmpval,___ftmul@f1
  1079  0011C4  C05D  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1080  0011C8  C05E  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1081  0011CC  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1082  0011D0  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1083  0011D4  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1084  0011D8  EC66  F010         	call	___ftmul	;wreg free
  1085  0011DC  C015  F05C         	movff	?___ftmul,sprintf@tmpval
  1086  0011E0  C016  F05D         	movff	?___ftmul+1,sprintf@tmpval+1
  1087  0011E4  C017  F05E         	movff	?___ftmul+2,sprintf@tmpval+2
  1088                           
  1089                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1090  0011E8  C05C  F001         	movff	sprintf@tmpval,___ftge@ff1
  1091  0011EC  C05D  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1092  0011F0  C05E  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1093  0011F4  0E00               	movlw	0
  1094  0011F6  6E04               	movwf	___ftge@ff2,c
  1095  0011F8  0E80               	movlw	128
  1096  0011FA  6E05               	movwf	___ftge@ff2+1,c
  1097  0011FC  0E3F               	movlw	63
  1098  0011FE  6E06               	movwf	___ftge@ff2+2,c
  1099  001200  ECFC  F011         	call	___ftge	;wreg free
  1100  001204  B0D8               	btfsc	status,0,c
  1101  001206  D004               	goto	l2406
  1102                           
  1103                           ;doprnt.c: 849: exp--;
  1104  001208  065A               	decf	sprintf@exp,f,c
  1105  00120A  A0D8               	btfss	status,0,c
  1106  00120C  065B               	decf	sprintf@exp+1,f,c
  1107  00120E  D012               	goto	l2410
  1108  001210                     l2406:
  1109                           
  1110                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1111  001210  C05C  F001         	movff	sprintf@tmpval,___ftge@ff1
  1112  001214  C05D  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1113  001218  C05E  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1114  00121C  0E00               	movlw	0
  1115  00121E  6E04               	movwf	___ftge@ff2,c
  1116  001220  0E20               	movlw	32
  1117  001222  6E05               	movwf	___ftge@ff2+1,c
  1118  001224  0E41               	movlw	65
  1119  001226  6E06               	movwf	___ftge@ff2+2,c
  1120  001228  ECFC  F011         	call	___ftge	;wreg free
  1121  00122C  A0D8               	btfss	status,0,c
  1122  00122E  D002               	goto	l2410
  1123                           
  1124                           ;doprnt.c: 851: exp++;
  1125  001230  4A5A               	infsnz	sprintf@exp,f,c
  1126  001232  2A5B               	incf	sprintf@exp+1,f,c
  1127  001234                     l2410:
  1128                           
  1129                           ;doprnt.c: 852: }
  1130                           ;doprnt.c: 1112: if(prec <= 12)
  1131  001234  BE55               	btfsc	sprintf@prec+1,7,c
  1132  001236  D006               	goto	l2412
  1133  001238  5055               	movf	sprintf@prec+1,w,c
  1134  00123A  E11B               	bnz	l2414
  1135  00123C  0E0D               	movlw	13
  1136  00123E  5C54               	subwf	sprintf@prec,w,c
  1137  001240  B0D8               	btfsc	status,0,c
  1138  001242  D017               	goto	l2414
  1139  001244                     l2412:
  1140                           
  1141                           ;doprnt.c: 1113: fval += fround(prec);
  1142  001244  C060  F02E         	movff	sprintf@fval,___ftadd@f1
  1143  001248  C061  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1144  00124C  C062  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1145  001250  5054               	movf	sprintf@prec,w,c
  1146  001252  EC40  F00D         	call	_fround
  1147  001256  C024  F031         	movff	?_fround,___ftadd@f2
  1148  00125A  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1149  00125E  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1150  001262  EC63  F00E         	call	___ftadd	;wreg free
  1151  001266  C02E  F060         	movff	?___ftadd,sprintf@fval
  1152  00126A  C02F  F061         	movff	?___ftadd+1,sprintf@fval+1
  1153  00126E  C030  F062         	movff	?___ftadd+2,sprintf@fval+2
  1154  001272                     l2414:
  1155                           
  1156                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1157  001272  BE5B               	btfsc	sprintf@exp+1,7,c
  1158  001274  D006               	goto	l2416
  1159  001276  505B               	movf	sprintf@exp+1,w,c
  1160  001278  E11E               	bnz	l2422
  1161  00127A  0E0A               	movlw	10
  1162  00127C  5C5A               	subwf	sprintf@exp,w,c
  1163  00127E  B0D8               	btfsc	status,0,c
  1164  001280  D01A               	goto	l2422
  1165  001282                     l2416:
  1166  001282  5060               	movf	sprintf@fval,w,c
  1167  001284  1061               	iorwf	sprintf@fval+1,w,c
  1168  001286  1062               	iorwf	sprintf@fval+2,w,c
  1169  001288  B4D8               	btfsc	status,2,c
  1170  00128A  D051               	goto	l2436
  1171  00128C  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1172  001290  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1173  001294  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1174  001298  ECE0  F010         	call	___fttol	;wreg free
  1175  00129C  502B               	movf	?___fttol,w,c
  1176  00129E  102C               	iorwf	?___fttol+1,w,c
  1177  0012A0  102D               	iorwf	?___fttol+2,w,c
  1178  0012A2  102E               	iorwf	?___fttol+3,w,c
  1179  0012A4  B4D8               	btfsc	status,2,c
  1180  0012A6  BE5B               	btfsc	sprintf@exp+1,7,c
  1181  0012A8  D042               	goto	l2436
  1182  0012AA  505B               	movf	sprintf@exp+1,w,c
  1183  0012AC  E104               	bnz	l2422
  1184  0012AE  0E02               	movlw	2
  1185  0012B0  5C5A               	subwf	sprintf@exp,w,c
  1186  0012B2  A0D8               	btfss	status,0,c
  1187  0012B4  D03C               	goto	l2436
  1188  0012B6                     l2422:
  1189                           
  1190                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1191  0012B6  C05C  F001         	movff	sprintf@tmpval,___ftge@ff1
  1192  0012BA  C05D  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1193  0012BE  C05E  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1194  0012C2  0E70               	movlw	112
  1195  0012C4  6E04               	movwf	___ftge@ff2,c
  1196  0012C6  0E89               	movlw	137
  1197  0012C8  6E05               	movwf	___ftge@ff2+1,c
  1198  0012CA  0E40               	movlw	64
  1199  0012CC  6E06               	movwf	___ftge@ff2+2,c
  1200  0012CE  ECFC  F011         	call	___ftge	;wreg free
  1201  0012D2  B0D8               	btfsc	status,0,c
  1202  0012D4  D002               	goto	l2426
  1203                           
  1204                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1205  0012D6  0EF7               	movlw	247
  1206  0012D8  D001               	goto	L1
  1207  0012DA                     l2426:
  1208                           
  1209                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1210  0012DA  0EF8               	movlw	248
  1211  0012DC                     L1:
  1212  0012DC  265A               	addwf	sprintf@exp,f,c
  1213  0012DE  0EFF               	movlw	255
  1214  0012E0  225B               	addwfc	sprintf@exp+1,f,c
  1215                           
  1216                           ;doprnt.c: 1124: }
  1217                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1218  0012E2  505A               	movf	sprintf@exp,w,c
  1219  0012E4  EC48  F00B         	call	_scale
  1220  0012E8  C024  F05C         	movff	?_scale,sprintf@tmpval
  1221  0012EC  C025  F05D         	movff	?_scale+1,sprintf@tmpval+1
  1222  0012F0  C026  F05E         	movff	?_scale+2,sprintf@tmpval+2
  1223                           
  1224                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1225  0012F4  C060  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1226  0012F8  C061  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1227  0012FC  C062  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1228  001300  C05C  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1229  001304  C05D  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1230  001308  C05E  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1231  00130C  EC39  F00F         	call	__tdiv_to_l_	;wreg free
  1232  001310  C001  F056         	movff	?__tdiv_to_l_,sprintf@val
  1233  001314  C002  F057         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1234  001318  C003  F058         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1235  00131C  C004  F059         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1236                           
  1237                           ;doprnt.c: 1129: fval = 0.0;
  1238  001320  0E00               	movlw	0
  1239  001322  6E60               	movwf	sprintf@fval,c
  1240  001324  0E00               	movlw	0
  1241  001326  6E61               	movwf	sprintf@fval+1,c
  1242  001328  0E00               	movlw	0
  1243  00132A  6E62               	movwf	sprintf@fval+2,c
  1244                           
  1245                           ;doprnt.c: 1130: } else {
  1246  00132C  D032               	goto	l2440
  1247  00132E                     l2436:
  1248                           
  1249                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1250  00132E  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1251  001332  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1252  001336  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1253  00133A  ECE0  F010         	call	___fttol	;wreg free
  1254  00133E  C02B  F056         	movff	?___fttol,sprintf@val
  1255  001342  C02C  F057         	movff	?___fttol+1,sprintf@val+1
  1256  001346  C02D  F058         	movff	?___fttol+2,sprintf@val+2
  1257  00134A  C02E  F059         	movff	?___fttol+3,sprintf@val+3
  1258                           
  1259                           ;doprnt.c: 1132: fval -= (double)val;
  1260  00134E  C060  F03A         	movff	sprintf@fval,___ftsub@f1
  1261  001352  C061  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1262  001356  C062  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1263  00135A  C056  F009         	movff	sprintf@val,___lltoft@c
  1264  00135E  C057  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1265  001362  C058  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1266  001366  C059  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1267  00136A  EC91  F013         	call	___lltoft	;wreg free
  1268  00136E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1269  001372  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1270  001376  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1271  00137A  ECBF  F013         	call	___ftsub	;wreg free
  1272  00137E  C03A  F060         	movff	?___ftsub,sprintf@fval
  1273  001382  C03B  F061         	movff	?___ftsub+1,sprintf@fval+1
  1274  001386  C03C  F062         	movff	?___ftsub+2,sprintf@fval+2
  1275                           
  1276                           ;doprnt.c: 1133: exp = 0;
  1277  00138A  0E00               	movlw	0
  1278  00138C  6E5B               	movwf	sprintf@exp+1,c
  1279  00138E  0E00               	movlw	0
  1280  001390  6E5A               	movwf	sprintf@exp,c
  1281  001392                     l2440:
  1282                           
  1283                           ;doprnt.c: 1134: }
  1284                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1285  001392  0E01               	movlw	1
  1286  001394  6E63               	movwf	sprintf@c,c
  1287  001396                     l2442:
  1288  001396  0E0A               	movlw	10
  1289  001398  1863               	xorwf	sprintf@c,w,c
  1290  00139A  B4D8               	btfsc	status,2,c
  1291  00139C  D018               	goto	l2454
  1292                           
  1293                           ;doprnt.c: 1137: if(val < dpowers[c])
  1294  00139E  5063               	movf	sprintf@c,w,c
  1295  0013A0  0D04               	mullw	4
  1296  0013A2  0E01               	movlw	low _dpowers
  1297  0013A4  24F3               	addwf	prodl,w,c
  1298  0013A6  6EF6               	movwf	tblptrl,c
  1299  0013A8  0E10               	movlw	high _dpowers
  1300  0013AA  20F4               	addwfc	prodh,w,c
  1301  0013AC  6EF7               	movwf	tblptrh,c
  1302  0013AE                     	if	0	;There are less than 3 active tblptr bytes
  1303  0013AE                     	endif
  1304  0013AE  0009               	tblrd		*+
  1305  0013B0  50F5               	movf	tablat,w,c
  1306  0013B2  5C56               	subwf	sprintf@val,w,c
  1307  0013B4  0009               	tblrd		*+
  1308  0013B6  50F5               	movf	tablat,w,c
  1309  0013B8  5857               	subwfb	sprintf@val+1,w,c
  1310  0013BA  0009               	tblrd		*+
  1311  0013BC  50F5               	movf	tablat,w,c
  1312  0013BE  5858               	subwfb	sprintf@val+2,w,c
  1313  0013C0  0009               	tblrd		*+
  1314  0013C2  50F5               	movf	tablat,w,c
  1315  0013C4  5859               	subwfb	sprintf@val+3,w,c
  1316  0013C6  A0D8               	btfss	status,0,c
  1317  0013C8  D002               	goto	l2454
  1318                           
  1319                           ;doprnt.c: 1138: break;
  1320  0013CA  2A63               	incf	sprintf@c,f,c
  1321  0013CC  D7E4               	goto	l2442
  1322  0013CE                     l2454:
  1323                           
  1324                           ;doprnt.c: 1175: {
  1325                           ;doprnt.c: 1188: if(flag & 0x03)
  1326  0013CE  0E03               	movlw	3
  1327  0013D0  1452               	andwf	sprintf@flag,w,c
  1328  0013D2  6E47               	movwf	??_sprintf& (0+255),c
  1329  0013D4  0E00               	movlw	0
  1330  0013D6  1453               	andwf	sprintf@flag+1,w,c
  1331  0013D8  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1332  0013DA  5047               	movf	??_sprintf,w,c
  1333  0013DC  1048               	iorwf	??_sprintf+1,w,c
  1334  0013DE  B4D8               	btfsc	status,2,c
  1335  0013E0  D051               	goto	l2468
  1336                           
  1337                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1338  0013E2  C040  FFD9         	movff	sprintf@sp,fsr2l
  1339  0013E6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1340  0013EA  0E2D               	movlw	45
  1341  0013EC  D049               	goto	L2
  1342  0013EE                     l2458:
  1343  0013EE  4A40               	infsnz	sprintf@sp,f,c
  1344  0013F0  2A41               	incf	sprintf@sp+1,f,c
  1345                           
  1346                           ;doprnt.c: 1195: }
  1347                           ;doprnt.c: 1196: while(c--) {
  1348  0013F2  D048               	goto	l2468
  1349  0013F4                     l2460:
  1350                           
  1351                           ;doprnt.c: 1200: {
  1352                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1353  0013F4  C056  F001         	movff	sprintf@val,___lldiv@dividend
  1354  0013F8  C057  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1355  0013FC  C058  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1356  001400  C059  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1357  001404  5063               	movf	sprintf@c,w,c
  1358  001406  0D04               	mullw	4
  1359  001408  0E01               	movlw	low _dpowers
  1360  00140A  24F3               	addwf	prodl,w,c
  1361  00140C  6EF6               	movwf	tblptrl,c
  1362  00140E  0E10               	movlw	high _dpowers
  1363  001410  20F4               	addwfc	prodh,w,c
  1364  001412  6EF7               	movwf	tblptrh,c
  1365  001414                     	if	0	;There are less than 3 active tblptr bytes
  1366  001414                     	endif
  1367  001414  0009               	tblrd		*+
  1368  001416  CFF5 F005          	movff	tablat,___lldiv@divisor
  1369  00141A  0009               	tblrd		*+
  1370  00141C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1371  001420  0009               	tblrd		*+
  1372  001422  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1373  001426  000A               	tblrd		*-
  1374  001428  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1375  00142C  EC86  F012         	call	___lldiv	;wreg free
  1376  001430  C001  F05C         	movff	?___lldiv,sprintf@tmpval
  1377  001434  C002  F05D         	movff	?___lldiv+1,sprintf@tmpval+1
  1378  001438  C003  F05E         	movff	?___lldiv+2,sprintf@tmpval+2
  1379  00143C  C004  F05F         	movff	?___lldiv+3,sprintf@tmpval+3
  1380                           
  1381                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1382  001440  C05C  F001         	movff	sprintf@tmpval,___llmod@dividend
  1383  001444  C05D  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1384  001448  C05E  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1385  00144C  C05F  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1386  001450  0E0A               	movlw	10
  1387  001452  6E05               	movwf	___llmod@divisor,c
  1388  001454  0E00               	movlw	0
  1389  001456  6E06               	movwf	___llmod@divisor+1,c
  1390  001458  0E00               	movlw	0
  1391  00145A  6E07               	movwf	___llmod@divisor+2,c
  1392  00145C  0E00               	movlw	0
  1393  00145E  6E08               	movwf	___llmod@divisor+3,c
  1394  001460  ECFF  F012         	call	___llmod	;wreg free
  1395  001464  C001  F05C         	movff	?___llmod,sprintf@tmpval
  1396  001468  C002  F05D         	movff	?___llmod+1,sprintf@tmpval+1
  1397  00146C  C003  F05E         	movff	?___llmod+2,sprintf@tmpval+2
  1398  001470  C004  F05F         	movff	?___llmod+3,sprintf@tmpval+3
  1399                           
  1400                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1401  001474  505C               	movf	sprintf@tmpval,w,c
  1402  001476  0F30               	addlw	48
  1403  001478  C040  FFD9         	movff	sprintf@sp,fsr2l
  1404  00147C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1405  001480                     L2:
  1406  001480  6EDF               	movwf	indf2,c
  1407  001482  D7B5               	goto	l2458
  1408  001484                     l2468:
  1409  001484  0663               	decf	sprintf@c,f,c
  1410  001486  2863               	incf	sprintf@c,w,c
  1411  001488  B4D8               	btfsc	status,2,c
  1412  00148A  D00C               	goto	l2476
  1413  00148C  D7B3               	goto	l2460
  1414  00148E                     l2470:
  1415                           
  1416                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1417  00148E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1418  001492  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1419  001496  0E30               	movlw	48
  1420  001498  6EDF               	movwf	indf2,c
  1421  00149A  4A40               	infsnz	sprintf@sp,f,c
  1422  00149C  2A41               	incf	sprintf@sp+1,f,c
  1423                           
  1424                           ;doprnt.c: 1209: exp--;
  1425  00149E  065A               	decf	sprintf@exp,f,c
  1426  0014A0  A0D8               	btfss	status,0,c
  1427  0014A2  065B               	decf	sprintf@exp+1,f,c
  1428  0014A4                     l2476:
  1429  0014A4  BE5B               	btfsc	sprintf@exp+1,7,c
  1430  0014A6  D005               	goto	l2478
  1431  0014A8  505B               	movf	sprintf@exp+1,w,c
  1432  0014AA  E1F1               	bnz	l2470
  1433  0014AC  045A               	decf	sprintf@exp,w,c
  1434  0014AE  B0D8               	btfsc	status,0,c
  1435  0014B0  D7EE               	goto	l2470
  1436  0014B2                     l2478:
  1437                           
  1438                           ;doprnt.c: 1210: }
  1439                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1440  0014B2  BE55               	btfsc	sprintf@prec+1,7,c
  1441  0014B4  D009               	goto	l110
  1442  0014B6  5055               	movf	sprintf@prec+1,w,c
  1443  0014B8  E104               	bnz	u2590
  1444  0014BA  0E09               	movlw	9
  1445  0014BC  5C54               	subwf	sprintf@prec,w,c
  1446  0014BE  A0D8               	btfss	status,0,c
  1447  0014C0  D003               	goto	l110
  1448  0014C2                     u2590:
  1449                           
  1450                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1451  0014C2  0E08               	movlw	8
  1452  0014C4  6E63               	movwf	sprintf@c,c
  1453  0014C6  D002               	goto	l2482
  1454  0014C8                     l110:
  1455                           
  1456                           ;doprnt.c: 1213: else
  1457                           ;doprnt.c: 1214: c = prec;
  1458  0014C8  C054  F063         	movff	sprintf@prec,sprintf@c
  1459  0014CC                     l2482:
  1460                           
  1461                           ;doprnt.c: 1215: prec -= c;
  1462  0014CC  5063               	movf	sprintf@c,w,c
  1463  0014CE  5E54               	subwf	sprintf@prec,f,c
  1464  0014D0  0E00               	movlw	0
  1465  0014D2  BE63               	btfsc	sprintf@c,7,c
  1466  0014D4  0EFF               	movlw	255
  1467  0014D6  5A55               	subwfb	sprintf@prec+1,f,c
  1468                           
  1469                           ;doprnt.c: 1219: if(c)
  1470  0014D8  5063               	movf	sprintf@c,w,c
  1471  0014DA  B4D8               	btfsc	status,2,c
  1472  0014DC  D008               	goto	l2490
  1473                           
  1474                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1475  0014DE  C040  FFD9         	movff	sprintf@sp,fsr2l
  1476  0014E2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1477  0014E6  0E2E               	movlw	46
  1478  0014E8  6EDF               	movwf	indf2,c
  1479  0014EA  4A40               	infsnz	sprintf@sp,f,c
  1480  0014EC  2A41               	incf	sprintf@sp+1,f,c
  1481  0014EE                     l2490:
  1482                           
  1483                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1484  0014EE  5063               	movf	sprintf@c,w,c
  1485  0014F0  EC48  F00B         	call	_scale
  1486  0014F4  C024  F04D         	movff	?_scale,_sprintf$1441
  1487  0014F8  C025  F04E         	movff	?_scale+1,_sprintf$1441+1
  1488  0014FC  C026  F04F         	movff	?_scale+2,_sprintf$1441+2
  1489                           
  1490                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1491  001500  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1492  001504  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1493  001508  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1494  00150C  C04D  F015         	movff	_sprintf$1441,___ftmul@f1
  1495  001510  C04E  F016         	movff	_sprintf$1441+1,___ftmul@f1+1
  1496  001514  C04F  F017         	movff	_sprintf$1441+2,___ftmul@f1+2
  1497  001518  EC66  F010         	call	___ftmul	;wreg free
  1498  00151C  C015  F02B         	movff	?___ftmul,___fttol@f1
  1499  001520  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1500  001524  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1501  001528  ECE0  F010         	call	___fttol	;wreg free
  1502  00152C  C02B  F056         	movff	?___fttol,sprintf@val
  1503  001530  C02C  F057         	movff	?___fttol+1,sprintf@val+1
  1504  001534  C02D  F058         	movff	?___fttol+2,sprintf@val+2
  1505  001538  C02E  F059         	movff	?___fttol+3,sprintf@val+3
  1506                           
  1507                           ;doprnt.c: 1228: while(c--) {
  1508  00153C  D06F               	goto	l2504
  1509  00153E                     l2494:
  1510                           
  1511                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1512  00153E  C056  F001         	movff	sprintf@val,___lldiv@dividend
  1513  001542  C057  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1514  001546  C058  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1515  00154A  C059  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1516  00154E  5063               	movf	sprintf@c,w,c
  1517  001550  0D04               	mullw	4
  1518  001552  0E01               	movlw	low _dpowers
  1519  001554  24F3               	addwf	prodl,w,c
  1520  001556  6EF6               	movwf	tblptrl,c
  1521  001558  0E10               	movlw	high _dpowers
  1522  00155A  20F4               	addwfc	prodh,w,c
  1523  00155C  6EF7               	movwf	tblptrh,c
  1524  00155E                     	if	0	;There are less than 3 active tblptr bytes
  1525  00155E                     	endif
  1526  00155E  0009               	tblrd		*+
  1527  001560  CFF5 F005          	movff	tablat,___lldiv@divisor
  1528  001564  0009               	tblrd		*+
  1529  001566  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1530  00156A  0009               	tblrd		*+
  1531  00156C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1532  001570  000A               	tblrd		*-
  1533  001572  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1534  001576  EC86  F012         	call	___lldiv	;wreg free
  1535  00157A  C001  F05C         	movff	?___lldiv,sprintf@tmpval
  1536  00157E  C002  F05D         	movff	?___lldiv+1,sprintf@tmpval+1
  1537  001582  C003  F05E         	movff	?___lldiv+2,sprintf@tmpval+2
  1538  001586  C004  F05F         	movff	?___lldiv+3,sprintf@tmpval+3
  1539                           
  1540                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1541  00158A  C05C  F001         	movff	sprintf@tmpval,___llmod@dividend
  1542  00158E  C05D  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1543  001592  C05E  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1544  001596  C05F  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1545  00159A  0E0A               	movlw	10
  1546  00159C  6E05               	movwf	___llmod@divisor,c
  1547  00159E  0E00               	movlw	0
  1548  0015A0  6E06               	movwf	___llmod@divisor+1,c
  1549  0015A2  0E00               	movlw	0
  1550  0015A4  6E07               	movwf	___llmod@divisor+2,c
  1551  0015A6  0E00               	movlw	0
  1552  0015A8  6E08               	movwf	___llmod@divisor+3,c
  1553  0015AA  ECFF  F012         	call	___llmod	;wreg free
  1554  0015AE  C001  F05C         	movff	?___llmod,sprintf@tmpval
  1555  0015B2  C002  F05D         	movff	?___llmod+1,sprintf@tmpval+1
  1556  0015B6  C003  F05E         	movff	?___llmod+2,sprintf@tmpval+2
  1557  0015BA  C004  F05F         	movff	?___llmod+3,sprintf@tmpval+3
  1558                           
  1559                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1560  0015BE  505C               	movf	sprintf@tmpval,w,c
  1561  0015C0  0F30               	addlw	48
  1562  0015C2  C040  FFD9         	movff	sprintf@sp,fsr2l
  1563  0015C6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1564  0015CA  6EDF               	movwf	indf2,c
  1565  0015CC  4A40               	infsnz	sprintf@sp,f,c
  1566  0015CE  2A41               	incf	sprintf@sp+1,f,c
  1567                           
  1568                           ;doprnt.c: 1232: val %= dpowers[c];
  1569  0015D0  C056  F001         	movff	sprintf@val,___llmod@dividend
  1570  0015D4  C057  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1571  0015D8  C058  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1572  0015DC  C059  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1573  0015E0  5063               	movf	sprintf@c,w,c
  1574  0015E2  0D04               	mullw	4
  1575  0015E4  0E01               	movlw	low _dpowers
  1576  0015E6  24F3               	addwf	prodl,w,c
  1577  0015E8  6EF6               	movwf	tblptrl,c
  1578  0015EA  0E10               	movlw	high _dpowers
  1579  0015EC  20F4               	addwfc	prodh,w,c
  1580  0015EE  6EF7               	movwf	tblptrh,c
  1581  0015F0                     	if	0	;There are less than 3 active tblptr bytes
  1582  0015F0                     	endif
  1583  0015F0  0009               	tblrd		*+
  1584  0015F2  CFF5 F005          	movff	tablat,___llmod@divisor
  1585  0015F6  0009               	tblrd		*+
  1586  0015F8  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1587  0015FC  0009               	tblrd		*+
  1588  0015FE  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1589  001602  000A               	tblrd		*-
  1590  001604  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1591  001608  ECFF  F012         	call	___llmod	;wreg free
  1592  00160C  C001  F056         	movff	?___llmod,sprintf@val
  1593  001610  C002  F057         	movff	?___llmod+1,sprintf@val+1
  1594  001614  C003  F058         	movff	?___llmod+2,sprintf@val+2
  1595  001618  C004  F059         	movff	?___llmod+3,sprintf@val+3
  1596  00161C                     l2504:
  1597  00161C  0663               	decf	sprintf@c,f,c
  1598  00161E  2863               	incf	sprintf@c,w,c
  1599  001620  B4D8               	btfsc	status,2,c
  1600  001622  D00C               	goto	l2512
  1601  001624  D78C               	goto	l2494
  1602  001626                     l2506:
  1603                           
  1604                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1605  001626  C040  FFD9         	movff	sprintf@sp,fsr2l
  1606  00162A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1607  00162E  0E30               	movlw	48
  1608  001630  6EDF               	movwf	indf2,c
  1609  001632  4A40               	infsnz	sprintf@sp,f,c
  1610  001634  2A41               	incf	sprintf@sp+1,f,c
  1611                           
  1612                           ;doprnt.c: 1237: prec--;
  1613  001636  0654               	decf	sprintf@prec,f,c
  1614  001638  A0D8               	btfss	status,0,c
  1615  00163A  0655               	decf	sprintf@prec+1,f,c
  1616  00163C                     l2512:
  1617  00163C  5054               	movf	sprintf@prec,w,c
  1618  00163E  1055               	iorwf	sprintf@prec+1,w,c
  1619  001640  B4D8               	btfsc	status,2,c
  1620  001642  D013               	goto	l2520
  1621  001644  D7F0               	goto	l2506
  1622  001646                     l2514:
  1623                           
  1624                           ;doprnt.c: 1246: }
  1625                           ;doprnt.c: 1422: {
  1626                           ;doprnt.c: 1438: if(flag & 0x03)
  1627  001646  0E03               	movlw	3
  1628  001648  1452               	andwf	sprintf@flag,w,c
  1629  00164A  6E47               	movwf	??_sprintf& (0+255),c
  1630  00164C  0E00               	movlw	0
  1631  00164E  1453               	andwf	sprintf@flag+1,w,c
  1632  001650  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1633  001652  5047               	movf	??_sprintf,w,c
  1634  001654  1048               	iorwf	??_sprintf+1,w,c
  1635  001656  B4D8               	btfsc	status,2,c
  1636  001658  D008               	goto	l2520
  1637                           
  1638                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1639  00165A  C040  FFD9         	movff	sprintf@sp,fsr2l
  1640  00165E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1641  001662  0E2D               	movlw	45
  1642  001664  6EDF               	movwf	indf2,c
  1643  001666                     l2518:
  1644  001666  4A40               	infsnz	sprintf@sp,f,c
  1645  001668  2A41               	incf	sprintf@sp+1,f,c
  1646  00166A                     l2520:
  1647  00166A  C042  FFF6         	movff	sprintf@f,tblptrl
  1648  00166E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1649  001672  4A42               	infsnz	sprintf@f,f,c
  1650  001674  2A43               	incf	sprintf@f+1,f,c
  1651  001676                     	if	0	;tblptru may be non-zero
  1652  001676                     	endif
  1653  001676                     	if	0	;tblptru may be non-zero
  1654  001676                     	endif
  1655  001676  0008               	tblrd		*
  1656  001678  CFF5 F063          	movff	tablat,sprintf@c
  1657  00167C  5063               	movf	sprintf@c,w,c
  1658  00167E  A4D8               	btfss	status,2,c
  1659  001680  D502               	goto	l2354
  1660  001682                     l2522:
  1661                           
  1662                           ;doprnt.c: 1538: *sp = 0;
  1663  001682  C040  FFD9         	movff	sprintf@sp,fsr2l
  1664  001686  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1665  00168A  0E00               	movlw	0
  1666  00168C  6EDF               	movwf	indf2,c
  1667  00168E  0012               	return	
  1668  001690                     __end_of_sprintf:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           tblptrh	equ	0xFF7
  1672                           tblptrl	equ	0xFF6
  1673                           tablat	equ	0xFF5
  1674                           prodh	equ	0xFF4
  1675                           prodl	equ	0xFF3
  1676                           wreg	equ	0xFE8
  1677                           indf2	equ	0xFDF
  1678                           postinc2	equ	0xFDE
  1679                           postdec2	equ	0xFDD
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _scale *****************
  1685 ;; Defined at:
  1686 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  scl             1    wreg     char 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  scl             1   41[COMRAM] char 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  3   35[COMRAM] char 
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1700 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;Total ram usage:        7 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    2
  1707 ;; This function calls:
  1708 ;;		___awdiv
  1709 ;;		___awmod
  1710 ;;		___ftmul
  1711 ;;		___wmul
  1712 ;; This function is called by:
  1713 ;;		_sprintf
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text3
  1718  001690                     __ptext3:
  1719                           	opt stack 0
  1720  001690                     _scale:
  1721                           	opt stack 27
  1722                           
  1723                           ;incstack = 0
  1724                           ;scale@scl stored from wreg
  1725  001690  6E2A               	movwf	scale@scl,c
  1726                           
  1727                           ;doprnt.c: 428: if(scl < 0) {
  1728  001692  AE2A               	btfss	scale@scl,7,c
  1729  001694  D0FB               	goto	l2020
  1730                           
  1731                           ;doprnt.c: 429: scl = -scl;
  1732  001696  6C2A               	negf	scale@scl,c
  1733                           
  1734                           ;doprnt.c: 430: if(scl>=110)
  1735  001698  502A               	movf	scale@scl,w,c
  1736  00169A  0A80               	xorlw	128
  1737  00169C  0F12               	addlw	-238
  1738  00169E  A0D8               	btfss	status,0,c
  1739  0016A0  D091               	goto	l2010
  1740                           
  1741                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1742  0016A2  0E00               	movlw	0
  1743  0016A4  6E12               	movwf	___wmul@multiplicand+1,c
  1744  0016A6  0E03               	movlw	3
  1745  0016A8  6E11               	movwf	___wmul@multiplicand,c
  1746  0016AA  0E00               	movlw	0
  1747  0016AC  6E0A               	movwf	___awdiv@divisor+1,c
  1748  0016AE  0E0A               	movlw	10
  1749  0016B0  6E09               	movwf	___awdiv@divisor,c
  1750  0016B2  0E00               	movlw	0
  1751  0016B4  6E04               	movwf	___awmod@divisor+1,c
  1752  0016B6  0E64               	movlw	100
  1753  0016B8  6E03               	movwf	___awmod@divisor,c
  1754  0016BA  502A               	movf	scale@scl,w,c
  1755  0016BC  6E01               	movwf	___awmod@dividend,c
  1756  0016BE  6A02               	clrf	___awmod@dividend+1,c
  1757  0016C0  BE01               	btfsc	___awmod@dividend,7,c
  1758  0016C2  0602               	decf	___awmod@dividend+1,f,c
  1759  0016C4  ECC7  F012         	call	___awmod	;wreg free
  1760  0016C8  C001  F007         	movff	?___awmod,___awdiv@dividend
  1761  0016CC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1762  0016D0  EC44  F012         	call	___awdiv	;wreg free
  1763  0016D4  0E09               	movlw	9
  1764  0016D6  2407               	addwf	?___awdiv,w,c
  1765  0016D8  6E0F               	movwf	___wmul@multiplier,c
  1766  0016DA  0E00               	movlw	0
  1767  0016DC  2008               	addwfc	?___awdiv+1,w,c
  1768  0016DE  6E10               	movwf	___wmul@multiplier+1,c
  1769  0016E0  EC38  F014         	call	___wmul	;wreg free
  1770  0016E4  0E29               	movlw	low __npowers_
  1771  0016E6  240F               	addwf	?___wmul,w,c
  1772  0016E8  6EF6               	movwf	tblptrl,c
  1773  0016EA  0E10               	movlw	high __npowers_
  1774  0016EC  2010               	addwfc	?___wmul+1,w,c
  1775  0016EE  6EF7               	movwf	tblptrh,c
  1776  0016F0                     	if	0	;There are less than 3 active tblptr bytes
  1777  0016F0                     	endif
  1778  0016F0  0009               	tblrd		*+
  1779  0016F2  CFF5 F018          	movff	tablat,___ftmul@f2
  1780  0016F6  0009               	tblrd		*+
  1781  0016F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1782  0016FC  000A               	tblrd		*-
  1783  0016FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1784  001702  0E00               	movlw	0
  1785  001704  6E0A               	movwf	___awdiv@divisor+1,c
  1786  001706  0E64               	movlw	100
  1787  001708  6E09               	movwf	___awdiv@divisor,c
  1788  00170A  502A               	movf	scale@scl,w,c
  1789  00170C  6E07               	movwf	___awdiv@dividend,c
  1790  00170E  6A08               	clrf	___awdiv@dividend+1,c
  1791  001710  BE07               	btfsc	___awdiv@dividend,7,c
  1792  001712  0608               	decf	___awdiv@dividend+1,f,c
  1793  001714  EC44  F012         	call	___awdiv	;wreg free
  1794  001718  0E12               	movlw	18
  1795  00171A  2407               	addwf	?___awdiv,w,c
  1796  00171C  6E0F               	movwf	___wmul@multiplier,c
  1797  00171E  0E00               	movlw	0
  1798  001720  2008               	addwfc	?___awdiv+1,w,c
  1799  001722  6E10               	movwf	___wmul@multiplier+1,c
  1800  001724  0E00               	movlw	0
  1801  001726  6E12               	movwf	___wmul@multiplicand+1,c
  1802  001728  0E03               	movlw	3
  1803  00172A  6E11               	movwf	___wmul@multiplicand,c
  1804  00172C  EC38  F014         	call	___wmul	;wreg free
  1805  001730  0E29               	movlw	low __npowers_
  1806  001732  240F               	addwf	?___wmul,w,c
  1807  001734  6EF6               	movwf	tblptrl,c
  1808  001736  0E10               	movlw	high __npowers_
  1809  001738  2010               	addwfc	?___wmul+1,w,c
  1810  00173A  6EF7               	movwf	tblptrh,c
  1811  00173C                     	if	0	;There are less than 3 active tblptr bytes
  1812  00173C                     	endif
  1813  00173C  0009               	tblrd		*+
  1814  00173E  CFF5 F015          	movff	tablat,___ftmul@f1
  1815  001742  0009               	tblrd		*+
  1816  001744  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1817  001748  000A               	tblrd		*-
  1818  00174A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1819  00174E  EC66  F010         	call	___ftmul	;wreg free
  1820  001752  C015  F027         	movff	?___ftmul,_scale$1440
  1821  001756  C016  F028         	movff	?___ftmul+1,_scale$1440+1
  1822  00175A  C017  F029         	movff	?___ftmul+2,_scale$1440+2
  1823                           
  1824                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1825  00175E  C027  F015         	movff	_scale$1440,___ftmul@f1
  1826  001762  C028  F016         	movff	_scale$1440+1,___ftmul@f1+1
  1827  001766  C029  F017         	movff	_scale$1440+2,___ftmul@f1+2
  1828  00176A  0E00               	movlw	0
  1829  00176C  6E12               	movwf	___wmul@multiplicand+1,c
  1830  00176E  0E03               	movlw	3
  1831  001770  6E11               	movwf	___wmul@multiplicand,c
  1832  001772  0E00               	movlw	0
  1833  001774  6E04               	movwf	___awmod@divisor+1,c
  1834  001776  0E0A               	movlw	10
  1835  001778  6E03               	movwf	___awmod@divisor,c
  1836  00177A  502A               	movf	scale@scl,w,c
  1837  00177C  6E01               	movwf	___awmod@dividend,c
  1838  00177E  6A02               	clrf	___awmod@dividend+1,c
  1839  001780  BE01               	btfsc	___awmod@dividend,7,c
  1840  001782  0602               	decf	___awmod@dividend+1,f,c
  1841  001784  ECC7  F012         	call	___awmod	;wreg free
  1842  001788  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1843  00178C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1844  001790  EC38  F014         	call	___wmul	;wreg free
  1845  001794  0E29               	movlw	low __npowers_
  1846  001796  240F               	addwf	?___wmul,w,c
  1847  001798  6EF6               	movwf	tblptrl,c
  1848  00179A  0E10               	movlw	high __npowers_
  1849  00179C  2010               	addwfc	?___wmul+1,w,c
  1850  00179E  6EF7               	movwf	tblptrh,c
  1851  0017A0                     	if	0	;There are less than 3 active tblptr bytes
  1852  0017A0                     	endif
  1853  0017A0  0009               	tblrd		*+
  1854  0017A2  CFF5 F018          	movff	tablat,___ftmul@f2
  1855  0017A6  0009               	tblrd		*+
  1856  0017A8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1857  0017AC  000A               	tblrd		*-
  1858  0017AE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1859  0017B2  EC66  F010         	call	___ftmul	;wreg free
  1860  0017B6  C015  F024         	movff	?___ftmul,?_scale
  1861  0017BA  C016  F025         	movff	?___ftmul+1,?_scale+1
  1862  0017BE  C017  F026         	movff	?___ftmul+2,?_scale+2
  1863  0017C2  0012               	return	
  1864  0017C4                     l2010:
  1865                           
  1866                           ;doprnt.c: 432: else if(scl > 10)
  1867  0017C4  502A               	movf	scale@scl,w,c
  1868  0017C6  0A80               	xorlw	128
  1869  0017C8  0F75               	addlw	-139
  1870  0017CA  A0D8               	btfss	status,0,c
  1871  0017CC  D04D               	goto	l2016
  1872                           
  1873                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1874  0017CE  0E00               	movlw	0
  1875  0017D0  6E0A               	movwf	___awdiv@divisor+1,c
  1876  0017D2  0E0A               	movlw	10
  1877  0017D4  6E09               	movwf	___awdiv@divisor,c
  1878  0017D6  502A               	movf	scale@scl,w,c
  1879  0017D8  6E07               	movwf	___awdiv@dividend,c
  1880  0017DA  6A08               	clrf	___awdiv@dividend+1,c
  1881  0017DC  BE07               	btfsc	___awdiv@dividend,7,c
  1882  0017DE  0608               	decf	___awdiv@dividend+1,f,c
  1883  0017E0  EC44  F012         	call	___awdiv	;wreg free
  1884  0017E4  0E09               	movlw	9
  1885  0017E6  2407               	addwf	?___awdiv,w,c
  1886  0017E8  6E0F               	movwf	___wmul@multiplier,c
  1887  0017EA  0E00               	movlw	0
  1888  0017EC  2008               	addwfc	?___awdiv+1,w,c
  1889  0017EE  6E10               	movwf	___wmul@multiplier+1,c
  1890  0017F0  0E00               	movlw	0
  1891  0017F2  6E12               	movwf	___wmul@multiplicand+1,c
  1892  0017F4  0E03               	movlw	3
  1893  0017F6  6E11               	movwf	___wmul@multiplicand,c
  1894  0017F8  EC38  F014         	call	___wmul	;wreg free
  1895  0017FC  0E29               	movlw	low __npowers_
  1896  0017FE  240F               	addwf	?___wmul,w,c
  1897  001800  6EF6               	movwf	tblptrl,c
  1898  001802  0E10               	movlw	high __npowers_
  1899  001804  2010               	addwfc	?___wmul+1,w,c
  1900  001806  6EF7               	movwf	tblptrh,c
  1901  001808                     	if	0	;There are less than 3 active tblptr bytes
  1902  001808                     	endif
  1903  001808  0009               	tblrd		*+
  1904  00180A  CFF5 F015          	movff	tablat,___ftmul@f1
  1905  00180E  0009               	tblrd		*+
  1906  001810  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1907  001814  000A               	tblrd		*-
  1908  001816  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1909  00181A  0E00               	movlw	0
  1910  00181C  6E12               	movwf	___wmul@multiplicand+1,c
  1911  00181E  0E03               	movlw	3
  1912  001820  6E11               	movwf	___wmul@multiplicand,c
  1913  001822  0E00               	movlw	0
  1914  001824  6E04               	movwf	___awmod@divisor+1,c
  1915  001826  0E0A               	movlw	10
  1916  001828  6E03               	movwf	___awmod@divisor,c
  1917  00182A  502A               	movf	scale@scl,w,c
  1918  00182C  6E01               	movwf	___awmod@dividend,c
  1919  00182E  6A02               	clrf	___awmod@dividend+1,c
  1920  001830  BE01               	btfsc	___awmod@dividend,7,c
  1921  001832  0602               	decf	___awmod@dividend+1,f,c
  1922  001834  ECC7  F012         	call	___awmod	;wreg free
  1923  001838  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1924  00183C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1925  001840  EC38  F014         	call	___wmul	;wreg free
  1926  001844  0E29               	movlw	low __npowers_
  1927  001846  240F               	addwf	?___wmul,w,c
  1928  001848  6EF6               	movwf	tblptrl,c
  1929  00184A  0E10               	movlw	high __npowers_
  1930  00184C  2010               	addwfc	?___wmul+1,w,c
  1931  00184E  6EF7               	movwf	tblptrh,c
  1932  001850                     	if	0	;There are less than 3 active tblptr bytes
  1933  001850                     	endif
  1934  001850  0009               	tblrd		*+
  1935  001852  CFF5 F018          	movff	tablat,___ftmul@f2
  1936  001856  0009               	tblrd		*+
  1937  001858  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1938  00185C  000A               	tblrd		*-
  1939  00185E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1940  001862  EC66  F010         	call	___ftmul	;wreg free
  1941  001866  D7A7               	goto	L3
  1942  001868                     l2016:
  1943                           
  1944                           ;doprnt.c: 434: return _npowers_[scl];
  1945  001868  502A               	movf	scale@scl,w,c
  1946  00186A  0D03               	mullw	3
  1947  00186C  0E29               	movlw	low __npowers_
  1948  00186E  24F3               	addwf	prodl,w,c
  1949  001870  6EF6               	movwf	tblptrl,c
  1950  001872  0E10               	movlw	high __npowers_
  1951  001874  20F4               	addwfc	prodh,w,c
  1952  001876  6EF7               	movwf	tblptrh,c
  1953  001878                     	if	0	;There are less than 3 active tblptr bytes
  1954  001878                     	endif
  1955  001878  0009               	tblrd		*+
  1956  00187A  CFF5 F024          	movff	tablat,?_scale
  1957  00187E  0009               	tblrd		*+
  1958  001880  CFF5 F025          	movff	tablat,?_scale+1
  1959  001884  000A               	tblrd		*-
  1960  001886  CFF5 F026          	movff	tablat,?_scale+2
  1961  00188A  0012               	return	
  1962  00188C                     l2020:
  1963                           
  1964                           ;doprnt.c: 435: }
  1965                           ;doprnt.c: 436: if(scl>=110)
  1966  00188C  502A               	movf	scale@scl,w,c
  1967  00188E  0A80               	xorlw	128
  1968  001890  0F12               	addlw	-238
  1969  001892  A0D8               	btfss	status,0,c
  1970  001894  D091               	goto	l2028
  1971                           
  1972                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  1973  001896  0E00               	movlw	0
  1974  001898  6E12               	movwf	___wmul@multiplicand+1,c
  1975  00189A  0E03               	movlw	3
  1976  00189C  6E11               	movwf	___wmul@multiplicand,c
  1977  00189E  0E00               	movlw	0
  1978  0018A0  6E0A               	movwf	___awdiv@divisor+1,c
  1979  0018A2  0E0A               	movlw	10
  1980  0018A4  6E09               	movwf	___awdiv@divisor,c
  1981  0018A6  0E00               	movlw	0
  1982  0018A8  6E04               	movwf	___awmod@divisor+1,c
  1983  0018AA  0E64               	movlw	100
  1984  0018AC  6E03               	movwf	___awmod@divisor,c
  1985  0018AE  502A               	movf	scale@scl,w,c
  1986  0018B0  6E01               	movwf	___awmod@dividend,c
  1987  0018B2  6A02               	clrf	___awmod@dividend+1,c
  1988  0018B4  BE01               	btfsc	___awmod@dividend,7,c
  1989  0018B6  0602               	decf	___awmod@dividend+1,f,c
  1990  0018B8  ECC7  F012         	call	___awmod	;wreg free
  1991  0018BC  C001  F007         	movff	?___awmod,___awdiv@dividend
  1992  0018C0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1993  0018C4  EC44  F012         	call	___awdiv	;wreg free
  1994  0018C8  0E09               	movlw	9
  1995  0018CA  2407               	addwf	?___awdiv,w,c
  1996  0018CC  6E0F               	movwf	___wmul@multiplier,c
  1997  0018CE  0E00               	movlw	0
  1998  0018D0  2008               	addwfc	?___awdiv+1,w,c
  1999  0018D2  6E10               	movwf	___wmul@multiplier+1,c
  2000  0018D4  EC38  F014         	call	___wmul	;wreg free
  2001  0018D8  0E50               	movlw	low __powers_
  2002  0018DA  240F               	addwf	?___wmul,w,c
  2003  0018DC  6EF6               	movwf	tblptrl,c
  2004  0018DE  0E10               	movlw	high __powers_
  2005  0018E0  2010               	addwfc	?___wmul+1,w,c
  2006  0018E2  6EF7               	movwf	tblptrh,c
  2007  0018E4                     	if	0	;There are less than 3 active tblptr bytes
  2008  0018E4                     	endif
  2009  0018E4  0009               	tblrd		*+
  2010  0018E6  CFF5 F018          	movff	tablat,___ftmul@f2
  2011  0018EA  0009               	tblrd		*+
  2012  0018EC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2013  0018F0  000A               	tblrd		*-
  2014  0018F2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2015  0018F6  0E00               	movlw	0
  2016  0018F8  6E0A               	movwf	___awdiv@divisor+1,c
  2017  0018FA  0E64               	movlw	100
  2018  0018FC  6E09               	movwf	___awdiv@divisor,c
  2019  0018FE  502A               	movf	scale@scl,w,c
  2020  001900  6E07               	movwf	___awdiv@dividend,c
  2021  001902  6A08               	clrf	___awdiv@dividend+1,c
  2022  001904  BE07               	btfsc	___awdiv@dividend,7,c
  2023  001906  0608               	decf	___awdiv@dividend+1,f,c
  2024  001908  EC44  F012         	call	___awdiv	;wreg free
  2025  00190C  0E12               	movlw	18
  2026  00190E  2407               	addwf	?___awdiv,w,c
  2027  001910  6E0F               	movwf	___wmul@multiplier,c
  2028  001912  0E00               	movlw	0
  2029  001914  2008               	addwfc	?___awdiv+1,w,c
  2030  001916  6E10               	movwf	___wmul@multiplier+1,c
  2031  001918  0E00               	movlw	0
  2032  00191A  6E12               	movwf	___wmul@multiplicand+1,c
  2033  00191C  0E03               	movlw	3
  2034  00191E  6E11               	movwf	___wmul@multiplicand,c
  2035  001920  EC38  F014         	call	___wmul	;wreg free
  2036  001924  0E50               	movlw	low __powers_
  2037  001926  240F               	addwf	?___wmul,w,c
  2038  001928  6EF6               	movwf	tblptrl,c
  2039  00192A  0E10               	movlw	high __powers_
  2040  00192C  2010               	addwfc	?___wmul+1,w,c
  2041  00192E  6EF7               	movwf	tblptrh,c
  2042  001930                     	if	0	;There are less than 3 active tblptr bytes
  2043  001930                     	endif
  2044  001930  0009               	tblrd		*+
  2045  001932  CFF5 F015          	movff	tablat,___ftmul@f1
  2046  001936  0009               	tblrd		*+
  2047  001938  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2048  00193C  000A               	tblrd		*-
  2049  00193E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2050  001942  EC66  F010         	call	___ftmul	;wreg free
  2051  001946  C015  F027         	movff	?___ftmul,_scale$1440
  2052  00194A  C016  F028         	movff	?___ftmul+1,_scale$1440+1
  2053  00194E  C017  F029         	movff	?___ftmul+2,_scale$1440+2
  2054                           
  2055                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2056  001952  C027  F015         	movff	_scale$1440,___ftmul@f1
  2057  001956  C028  F016         	movff	_scale$1440+1,___ftmul@f1+1
  2058  00195A  C029  F017         	movff	_scale$1440+2,___ftmul@f1+2
  2059  00195E  0E00               	movlw	0
  2060  001960  6E12               	movwf	___wmul@multiplicand+1,c
  2061  001962  0E03               	movlw	3
  2062  001964  6E11               	movwf	___wmul@multiplicand,c
  2063  001966  0E00               	movlw	0
  2064  001968  6E04               	movwf	___awmod@divisor+1,c
  2065  00196A  0E0A               	movlw	10
  2066  00196C  6E03               	movwf	___awmod@divisor,c
  2067  00196E  502A               	movf	scale@scl,w,c
  2068  001970  6E01               	movwf	___awmod@dividend,c
  2069  001972  6A02               	clrf	___awmod@dividend+1,c
  2070  001974  BE01               	btfsc	___awmod@dividend,7,c
  2071  001976  0602               	decf	___awmod@dividend+1,f,c
  2072  001978  ECC7  F012         	call	___awmod	;wreg free
  2073  00197C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2074  001980  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2075  001984  EC38  F014         	call	___wmul	;wreg free
  2076  001988  0E50               	movlw	low __powers_
  2077  00198A  240F               	addwf	?___wmul,w,c
  2078  00198C  6EF6               	movwf	tblptrl,c
  2079  00198E  0E10               	movlw	high __powers_
  2080  001990  2010               	addwfc	?___wmul+1,w,c
  2081  001992  6EF7               	movwf	tblptrh,c
  2082  001994                     	if	0	;There are less than 3 active tblptr bytes
  2083  001994                     	endif
  2084  001994  0009               	tblrd		*+
  2085  001996  CFF5 F018          	movff	tablat,___ftmul@f2
  2086  00199A  0009               	tblrd		*+
  2087  00199C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2088  0019A0  000A               	tblrd		*-
  2089  0019A2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2090  0019A6  EC66  F010         	call	___ftmul	;wreg free
  2091  0019AA  C015  F024         	movff	?___ftmul,?_scale
  2092  0019AE  C016  F025         	movff	?___ftmul+1,?_scale+1
  2093  0019B2  C017  F026         	movff	?___ftmul+2,?_scale+2
  2094  0019B6  0012               	return	
  2095  0019B8                     l2028:
  2096                           
  2097                           ;doprnt.c: 438: else if(scl > 10)
  2098  0019B8  502A               	movf	scale@scl,w,c
  2099  0019BA  0A80               	xorlw	128
  2100  0019BC  0F75               	addlw	-139
  2101  0019BE  A0D8               	btfss	status,0,c
  2102  0019C0  D04D               	goto	l2034
  2103                           
  2104                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2105  0019C2  0E00               	movlw	0
  2106  0019C4  6E0A               	movwf	___awdiv@divisor+1,c
  2107  0019C6  0E0A               	movlw	10
  2108  0019C8  6E09               	movwf	___awdiv@divisor,c
  2109  0019CA  502A               	movf	scale@scl,w,c
  2110  0019CC  6E07               	movwf	___awdiv@dividend,c
  2111  0019CE  6A08               	clrf	___awdiv@dividend+1,c
  2112  0019D0  BE07               	btfsc	___awdiv@dividend,7,c
  2113  0019D2  0608               	decf	___awdiv@dividend+1,f,c
  2114  0019D4  EC44  F012         	call	___awdiv	;wreg free
  2115  0019D8  0E09               	movlw	9
  2116  0019DA  2407               	addwf	?___awdiv,w,c
  2117  0019DC  6E0F               	movwf	___wmul@multiplier,c
  2118  0019DE  0E00               	movlw	0
  2119  0019E0  2008               	addwfc	?___awdiv+1,w,c
  2120  0019E2  6E10               	movwf	___wmul@multiplier+1,c
  2121  0019E4  0E00               	movlw	0
  2122  0019E6  6E12               	movwf	___wmul@multiplicand+1,c
  2123  0019E8  0E03               	movlw	3
  2124  0019EA  6E11               	movwf	___wmul@multiplicand,c
  2125  0019EC  EC38  F014         	call	___wmul	;wreg free
  2126  0019F0  0E50               	movlw	low __powers_
  2127  0019F2  240F               	addwf	?___wmul,w,c
  2128  0019F4  6EF6               	movwf	tblptrl,c
  2129  0019F6  0E10               	movlw	high __powers_
  2130  0019F8  2010               	addwfc	?___wmul+1,w,c
  2131  0019FA  6EF7               	movwf	tblptrh,c
  2132  0019FC                     	if	0	;There are less than 3 active tblptr bytes
  2133  0019FC                     	endif
  2134  0019FC  0009               	tblrd		*+
  2135  0019FE  CFF5 F015          	movff	tablat,___ftmul@f1
  2136  001A02  0009               	tblrd		*+
  2137  001A04  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2138  001A08  000A               	tblrd		*-
  2139  001A0A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2140  001A0E  0E00               	movlw	0
  2141  001A10  6E12               	movwf	___wmul@multiplicand+1,c
  2142  001A12  0E03               	movlw	3
  2143  001A14  6E11               	movwf	___wmul@multiplicand,c
  2144  001A16  0E00               	movlw	0
  2145  001A18  6E04               	movwf	___awmod@divisor+1,c
  2146  001A1A  0E0A               	movlw	10
  2147  001A1C  6E03               	movwf	___awmod@divisor,c
  2148  001A1E  502A               	movf	scale@scl,w,c
  2149  001A20  6E01               	movwf	___awmod@dividend,c
  2150  001A22  6A02               	clrf	___awmod@dividend+1,c
  2151  001A24  BE01               	btfsc	___awmod@dividend,7,c
  2152  001A26  0602               	decf	___awmod@dividend+1,f,c
  2153  001A28  ECC7  F012         	call	___awmod	;wreg free
  2154  001A2C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2155  001A30  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2156  001A34  EC38  F014         	call	___wmul	;wreg free
  2157  001A38  0E50               	movlw	low __powers_
  2158  001A3A  240F               	addwf	?___wmul,w,c
  2159  001A3C  6EF6               	movwf	tblptrl,c
  2160  001A3E  0E10               	movlw	high __powers_
  2161  001A40  2010               	addwfc	?___wmul+1,w,c
  2162  001A42  6EF7               	movwf	tblptrh,c
  2163  001A44                     	if	0	;There are less than 3 active tblptr bytes
  2164  001A44                     	endif
  2165  001A44  0009               	tblrd		*+
  2166  001A46  CFF5 F018          	movff	tablat,___ftmul@f2
  2167  001A4A  0009               	tblrd		*+
  2168  001A4C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2169  001A50  000A               	tblrd		*-
  2170  001A52  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2171  001A56  EC66  F010         	call	___ftmul	;wreg free
  2172  001A5A  D7A7               	goto	L4
  2173  001A5C                     l2034:
  2174                           
  2175                           ;doprnt.c: 440: return _powers_[scl];
  2176  001A5C  502A               	movf	scale@scl,w,c
  2177  001A5E  0D03               	mullw	3
  2178  001A60  0E50               	movlw	low __powers_
  2179  001A62  24F3               	addwf	prodl,w,c
  2180  001A64  6EF6               	movwf	tblptrl,c
  2181  001A66  0E10               	movlw	high __powers_
  2182  001A68  20F4               	addwfc	prodh,w,c
  2183  001A6A  6EF7               	movwf	tblptrh,c
  2184  001A6C                     	if	0	;There are less than 3 active tblptr bytes
  2185  001A6C                     	endif
  2186  001A6C  0009               	tblrd		*+
  2187  001A6E  CFF5 F024          	movff	tablat,?_scale
  2188  001A72  0009               	tblrd		*+
  2189  001A74  CFF5 F025          	movff	tablat,?_scale+1
  2190  001A78  000A               	tblrd		*-
  2191  001A7A  CFF5 F026          	movff	tablat,?_scale+2
  2192  001A7E  0012               	return	
  2193  001A80                     __end_of_scale:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           prodh	equ	0xFF4
  2200                           prodl	equ	0xFF3
  2201                           wreg	equ	0xFE8
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _fround *****************
  2210 ;; Defined at:
  2211 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  prec            1    wreg     unsigned char 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  prec            1   44[COMRAM] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  3   35[COMRAM] unsigned char 
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;Total ram usage:       10 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    2
  2232 ;; This function calls:
  2233 ;;		___awdiv
  2234 ;;		___awmod
  2235 ;;		___ftmul
  2236 ;;		___wmul
  2237 ;; This function is called by:
  2238 ;;		_sprintf
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text4
  2243  001A80                     __ptext4:
  2244                           	opt stack 0
  2245  001A80                     _fround:
  2246                           	opt stack 27
  2247                           
  2248                           ;incstack = 0
  2249                           ;fround@prec stored from wreg
  2250  001A80  6E2D               	movwf	fround@prec,c
  2251                           
  2252                           ;doprnt.c: 413: if(prec>=110)
  2253  001A82  0E6D               	movlw	109
  2254  001A84  642D               	cpfsgt	fround@prec,c
  2255  001A86  D09F               	goto	l1988
  2256                           
  2257                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2258  001A88  0E00               	movlw	0
  2259  001A8A  6E12               	movwf	___wmul@multiplicand+1,c
  2260  001A8C  0E03               	movlw	3
  2261  001A8E  6E11               	movwf	___wmul@multiplicand,c
  2262  001A90  0E00               	movlw	0
  2263  001A92  6E0A               	movwf	___awdiv@divisor+1,c
  2264  001A94  0E0A               	movlw	10
  2265  001A96  6E09               	movwf	___awdiv@divisor,c
  2266  001A98  0E00               	movlw	0
  2267  001A9A  6E04               	movwf	___awmod@divisor+1,c
  2268  001A9C  0E64               	movlw	100
  2269  001A9E  6E03               	movwf	___awmod@divisor,c
  2270  001AA0  C02D  F001         	movff	fround@prec,___awmod@dividend
  2271  001AA4  6A02               	clrf	___awmod@dividend+1,c
  2272  001AA6  ECC7  F012         	call	___awmod	;wreg free
  2273  001AAA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2274  001AAE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2275  001AB2  EC44  F012         	call	___awdiv	;wreg free
  2276  001AB6  0E09               	movlw	9
  2277  001AB8  2407               	addwf	?___awdiv,w,c
  2278  001ABA  6E0F               	movwf	___wmul@multiplier,c
  2279  001ABC  0E00               	movlw	0
  2280  001ABE  2008               	addwfc	?___awdiv+1,w,c
  2281  001AC0  6E10               	movwf	___wmul@multiplier+1,c
  2282  001AC2  EC38  F014         	call	___wmul	;wreg free
  2283  001AC6  0E29               	movlw	low __npowers_
  2284  001AC8  240F               	addwf	?___wmul,w,c
  2285  001ACA  6EF6               	movwf	tblptrl,c
  2286  001ACC  0E10               	movlw	high __npowers_
  2287  001ACE  2010               	addwfc	?___wmul+1,w,c
  2288  001AD0  6EF7               	movwf	tblptrh,c
  2289  001AD2                     	if	0	;There are less than 3 active tblptr bytes
  2290  001AD2                     	endif
  2291  001AD2  0009               	tblrd		*+
  2292  001AD4  CFF5 F018          	movff	tablat,___ftmul@f2
  2293  001AD8  0009               	tblrd		*+
  2294  001ADA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2295  001ADE  000A               	tblrd		*-
  2296  001AE0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2297  001AE4  0E00               	movlw	0
  2298  001AE6  6E0A               	movwf	___awdiv@divisor+1,c
  2299  001AE8  0E64               	movlw	100
  2300  001AEA  6E09               	movwf	___awdiv@divisor,c
  2301  001AEC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2302  001AF0  6A08               	clrf	___awdiv@dividend+1,c
  2303  001AF2  EC44  F012         	call	___awdiv	;wreg free
  2304  001AF6  0E12               	movlw	18
  2305  001AF8  2407               	addwf	?___awdiv,w,c
  2306  001AFA  6E0F               	movwf	___wmul@multiplier,c
  2307  001AFC  0E00               	movlw	0
  2308  001AFE  2008               	addwfc	?___awdiv+1,w,c
  2309  001B00  6E10               	movwf	___wmul@multiplier+1,c
  2310  001B02  0E00               	movlw	0
  2311  001B04  6E12               	movwf	___wmul@multiplicand+1,c
  2312  001B06  0E03               	movlw	3
  2313  001B08  6E11               	movwf	___wmul@multiplicand,c
  2314  001B0A  EC38  F014         	call	___wmul	;wreg free
  2315  001B0E  0E29               	movlw	low __npowers_
  2316  001B10  240F               	addwf	?___wmul,w,c
  2317  001B12  6EF6               	movwf	tblptrl,c
  2318  001B14  0E10               	movlw	high __npowers_
  2319  001B16  2010               	addwfc	?___wmul+1,w,c
  2320  001B18  6EF7               	movwf	tblptrh,c
  2321  001B1A                     	if	0	;There are less than 3 active tblptr bytes
  2322  001B1A                     	endif
  2323  001B1A  0009               	tblrd		*+
  2324  001B1C  CFF5 F015          	movff	tablat,___ftmul@f1
  2325  001B20  0009               	tblrd		*+
  2326  001B22  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2327  001B26  000A               	tblrd		*-
  2328  001B28  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2329  001B2C  EC66  F010         	call	___ftmul	;wreg free
  2330  001B30  C015  F02A         	movff	?___ftmul,_fround$1438
  2331  001B34  C016  F02B         	movff	?___ftmul+1,_fround$1438+1
  2332  001B38  C017  F02C         	movff	?___ftmul+2,_fround$1438+2
  2333                           
  2334                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2335  001B3C  0E00               	movlw	0
  2336  001B3E  6E12               	movwf	___wmul@multiplicand+1,c
  2337  001B40  0E03               	movlw	3
  2338  001B42  6E11               	movwf	___wmul@multiplicand,c
  2339  001B44  0E00               	movlw	0
  2340  001B46  6E04               	movwf	___awmod@divisor+1,c
  2341  001B48  0E0A               	movlw	10
  2342  001B4A  6E03               	movwf	___awmod@divisor,c
  2343  001B4C  C02D  F001         	movff	fround@prec,___awmod@dividend
  2344  001B50  6A02               	clrf	___awmod@dividend+1,c
  2345  001B52  ECC7  F012         	call	___awmod	;wreg free
  2346  001B56  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2347  001B5A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2348  001B5E  EC38  F014         	call	___wmul	;wreg free
  2349  001B62  0E29               	movlw	low __npowers_
  2350  001B64  240F               	addwf	?___wmul,w,c
  2351  001B66  6EF6               	movwf	tblptrl,c
  2352  001B68  0E10               	movlw	high __npowers_
  2353  001B6A  2010               	addwfc	?___wmul+1,w,c
  2354  001B6C  6EF7               	movwf	tblptrh,c
  2355  001B6E                     	if	0	;There are less than 3 active tblptr bytes
  2356  001B6E                     	endif
  2357  001B6E  0009               	tblrd		*+
  2358  001B70  CFF5 F018          	movff	tablat,___ftmul@f2
  2359  001B74  0009               	tblrd		*+
  2360  001B76  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2361  001B7A  000A               	tblrd		*-
  2362  001B7C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2363  001B80  C02A  F015         	movff	_fround$1438,___ftmul@f1
  2364  001B84  C02B  F016         	movff	_fround$1438+1,___ftmul@f1+1
  2365  001B88  C02C  F017         	movff	_fround$1438+2,___ftmul@f1+2
  2366  001B8C  EC66  F010         	call	___ftmul	;wreg free
  2367  001B90  C015  F027         	movff	?___ftmul,_fround$1439
  2368  001B94  C016  F028         	movff	?___ftmul+1,_fround$1439+1
  2369  001B98  C017  F029         	movff	?___ftmul+2,_fround$1439+2
  2370                           
  2371                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2372  001B9C  C027  F015         	movff	_fround$1439,___ftmul@f1
  2373  001BA0  C028  F016         	movff	_fround$1439+1,___ftmul@f1+1
  2374  001BA4  C029  F017         	movff	_fround$1439+2,___ftmul@f1+2
  2375  001BA8  0E00               	movlw	0
  2376  001BAA  6E18               	movwf	___ftmul@f2,c
  2377  001BAC  0E00               	movlw	0
  2378  001BAE  6E19               	movwf	___ftmul@f2+1,c
  2379  001BB0  0E3F               	movlw	63
  2380  001BB2  6E1A               	movwf	___ftmul@f2+2,c
  2381  001BB4  EC66  F010         	call	___ftmul	;wreg free
  2382  001BB8  C015  F024         	movff	?___ftmul,?_fround
  2383  001BBC  C016  F025         	movff	?___ftmul+1,?_fround+1
  2384  001BC0  C017  F026         	movff	?___ftmul+2,?_fround+2
  2385  001BC4  0012               	return	
  2386  001BC6                     l1988:
  2387                           
  2388                           ;doprnt.c: 415: else if(prec > 10)
  2389  001BC6  0E0A               	movlw	10
  2390  001BC8  642D               	cpfsgt	fround@prec,c
  2391  001BCA  D05D               	goto	l1996
  2392                           
  2393                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2394  001BCC  0E00               	movlw	0
  2395  001BCE  6E12               	movwf	___wmul@multiplicand+1,c
  2396  001BD0  0E03               	movlw	3
  2397  001BD2  6E11               	movwf	___wmul@multiplicand,c
  2398  001BD4  0E00               	movlw	0
  2399  001BD6  6E04               	movwf	___awmod@divisor+1,c
  2400  001BD8  0E0A               	movlw	10
  2401  001BDA  6E03               	movwf	___awmod@divisor,c
  2402  001BDC  C02D  F001         	movff	fround@prec,___awmod@dividend
  2403  001BE0  6A02               	clrf	___awmod@dividend+1,c
  2404  001BE2  ECC7  F012         	call	___awmod	;wreg free
  2405  001BE6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2406  001BEA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2407  001BEE  EC38  F014         	call	___wmul	;wreg free
  2408  001BF2  0E29               	movlw	low __npowers_
  2409  001BF4  240F               	addwf	?___wmul,w,c
  2410  001BF6  6EF6               	movwf	tblptrl,c
  2411  001BF8  0E10               	movlw	high __npowers_
  2412  001BFA  2010               	addwfc	?___wmul+1,w,c
  2413  001BFC  6EF7               	movwf	tblptrh,c
  2414  001BFE                     	if	0	;There are less than 3 active tblptr bytes
  2415  001BFE                     	endif
  2416  001BFE  0009               	tblrd		*+
  2417  001C00  CFF5 F018          	movff	tablat,___ftmul@f2
  2418  001C04  0009               	tblrd		*+
  2419  001C06  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2420  001C0A  000A               	tblrd		*-
  2421  001C0C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2422  001C10  0E00               	movlw	0
  2423  001C12  6E0A               	movwf	___awdiv@divisor+1,c
  2424  001C14  0E0A               	movlw	10
  2425  001C16  6E09               	movwf	___awdiv@divisor,c
  2426  001C18  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2427  001C1C  6A08               	clrf	___awdiv@dividend+1,c
  2428  001C1E  EC44  F012         	call	___awdiv	;wreg free
  2429  001C22  0E09               	movlw	9
  2430  001C24  2407               	addwf	?___awdiv,w,c
  2431  001C26  6E0F               	movwf	___wmul@multiplier,c
  2432  001C28  0E00               	movlw	0
  2433  001C2A  2008               	addwfc	?___awdiv+1,w,c
  2434  001C2C  6E10               	movwf	___wmul@multiplier+1,c
  2435  001C2E  0E00               	movlw	0
  2436  001C30  6E12               	movwf	___wmul@multiplicand+1,c
  2437  001C32  0E03               	movlw	3
  2438  001C34  6E11               	movwf	___wmul@multiplicand,c
  2439  001C36  EC38  F014         	call	___wmul	;wreg free
  2440  001C3A  0E29               	movlw	low __npowers_
  2441  001C3C  240F               	addwf	?___wmul,w,c
  2442  001C3E  6EF6               	movwf	tblptrl,c
  2443  001C40  0E10               	movlw	high __npowers_
  2444  001C42  2010               	addwfc	?___wmul+1,w,c
  2445  001C44  6EF7               	movwf	tblptrh,c
  2446  001C46                     	if	0	;There are less than 3 active tblptr bytes
  2447  001C46                     	endif
  2448  001C46  0009               	tblrd		*+
  2449  001C48  CFF5 F015          	movff	tablat,___ftmul@f1
  2450  001C4C  0009               	tblrd		*+
  2451  001C4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2452  001C52  000A               	tblrd		*-
  2453  001C54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2454  001C58  EC66  F010         	call	___ftmul	;wreg free
  2455  001C5C  C015  F02A         	movff	?___ftmul,_fround$1438
  2456  001C60  C016  F02B         	movff	?___ftmul+1,_fround$1438+1
  2457  001C64  C017  F02C         	movff	?___ftmul+2,_fround$1438+2
  2458                           
  2459                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2460  001C68  C02A  F015         	movff	_fround$1438,___ftmul@f1
  2461  001C6C  C02B  F016         	movff	_fround$1438+1,___ftmul@f1+1
  2462  001C70  C02C  F017         	movff	_fround$1438+2,___ftmul@f1+2
  2463  001C74  0E00               	movlw	0
  2464  001C76  6E18               	movwf	___ftmul@f2,c
  2465  001C78  0E00               	movlw	0
  2466  001C7A  6E19               	movwf	___ftmul@f2+1,c
  2467  001C7C  0E3F               	movlw	63
  2468  001C7E  6E1A               	movwf	___ftmul@f2+2,c
  2469  001C80  EC66  F010         	call	___ftmul	;wreg free
  2470  001C84  D799               	goto	L5
  2471  001C86                     l1996:
  2472                           
  2473                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2474  001C86  502D               	movf	fround@prec,w,c
  2475  001C88  0D03               	mullw	3
  2476  001C8A  0E29               	movlw	low __npowers_
  2477  001C8C  24F3               	addwf	prodl,w,c
  2478  001C8E  6EF6               	movwf	tblptrl,c
  2479  001C90  0E10               	movlw	high __npowers_
  2480  001C92  20F4               	addwfc	prodh,w,c
  2481  001C94  6EF7               	movwf	tblptrh,c
  2482  001C96                     	if	0	;There are less than 3 active tblptr bytes
  2483  001C96                     	endif
  2484  001C96  0009               	tblrd		*+
  2485  001C98  CFF5 F015          	movff	tablat,___ftmul@f1
  2486  001C9C  0009               	tblrd		*+
  2487  001C9E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2488  001CA2  000A               	tblrd		*-
  2489  001CA4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2490  001CA8  0E00               	movlw	0
  2491  001CAA  6E18               	movwf	___ftmul@f2,c
  2492  001CAC  0E00               	movlw	0
  2493  001CAE  6E19               	movwf	___ftmul@f2+1,c
  2494  001CB0  0E3F               	movlw	63
  2495  001CB2  6E1A               	movwf	___ftmul@f2+2,c
  2496  001CB4  EC66  F010         	call	___ftmul	;wreg free
  2497  001CB8  C015  F024         	movff	?___ftmul,?_fround
  2498  001CBC  C016  F025         	movff	?___ftmul+1,?_fround+1
  2499  001CC0  C017  F026         	movff	?___ftmul+2,?_fround+2
  2500  001CC4  0012               	return	
  2501  001CC6                     __end_of_fround:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           wreg	equ	0xFE8
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function ___wmul *****************
  2518 ;; Defined at:
  2519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  multiplier      2   14[COMRAM] unsigned int 
  2522 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  product         2   18[COMRAM] unsigned int 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  2   14[COMRAM] unsigned int 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, prodl, prodh
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2534 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;Total ram usage:        6 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_fround
  2544 ;;		_scale
  2545 ;;		_sprintf
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text5
  2550  002870                     __ptext5:
  2551                           	opt stack 0
  2552  002870                     ___wmul:
  2553                           	opt stack 28
  2554                           
  2555                           ;incstack = 0
  2556  002870  500F               	movf	___wmul@multiplier,w,c
  2557  002872  0211               	mulwf	___wmul@multiplicand,c
  2558  002874  CFF3 F013          	movff	prodl,___wmul@product
  2559  002878  CFF4 F014          	movff	prodh,___wmul@product+1
  2560  00287C  500F               	movf	___wmul@multiplier,w,c
  2561  00287E  0212               	mulwf	___wmul@multiplicand+1,c
  2562  002880  50F3               	movf	prodl,w,c
  2563  002882  2614               	addwf	___wmul@product+1,f,c
  2564  002884  5010               	movf	___wmul@multiplier+1,w,c
  2565  002886  0211               	mulwf	___wmul@multiplicand,c
  2566  002888  50F3               	movf	prodl,w,c
  2567  00288A  2614               	addwf	___wmul@product+1,f,c
  2568  00288C  C013  F00F         	movff	___wmul@product,?___wmul
  2569  002890  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2570  002894  0012               	return	
  2571  002896                     __end_of___wmul:
  2572                           	opt stack 0
  2573                           tblptru	equ	0xFF8
  2574                           tblptrh	equ	0xFF7
  2575                           tblptrl	equ	0xFF6
  2576                           tablat	equ	0xFF5
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           wreg	equ	0xFE8
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function ___ftmul *****************
  2588 ;; Defined at:
  2589 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  f1              3   20[COMRAM] float 
  2592 ;;  f2              3   23[COMRAM] float 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  2595 ;;  sign            1   34[COMRAM] unsigned char 
  2596 ;;  cntr            1   33[COMRAM] unsigned char 
  2597 ;;  exp             1   29[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  3   20[COMRAM] float 
  2600 ;; Registers used:
  2601 ;;		wreg, status,2, status,0, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2607 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;Total ram usage:       15 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    1
  2614 ;; This function calls:
  2615 ;;		___ftpack
  2616 ;; This function is called by:
  2617 ;;		_fround
  2618 ;;		_scale
  2619 ;;		_sprintf
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text6
  2624  0020CC                     __ptext6:
  2625                           	opt stack 0
  2626  0020CC                     ___ftmul:
  2627                           	opt stack 27
  2628                           
  2629                           ;incstack = 0
  2630  0020CC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  2631  0020D0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2632  0020D2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2633  0020D4  3416               	rlcf	___ftmul@f1+1,w,c
  2634  0020D6  361B               	rlcf	??___ftmul& (0+255),f,c
  2635  0020D8  E301               	bnc	u1651
  2636  0020DA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2637  0020DC                     u1651:
  2638  0020DC  501B               	movf	??___ftmul,w,c
  2639  0020DE  6E1E               	movwf	___ftmul@exp,c
  2640  0020E0  501E               	movf	___ftmul@exp,w,c
  2641  0020E2  A4D8               	btfss	status,2,c
  2642  0020E4  D007               	goto	l1856
  2643  0020E6  0E00               	movlw	0
  2644  0020E8  6E15               	movwf	?___ftmul,c
  2645  0020EA  0E00               	movlw	0
  2646  0020EC  6E16               	movwf	?___ftmul+1,c
  2647  0020EE  0E00               	movlw	0
  2648  0020F0  6E17               	movwf	?___ftmul+2,c
  2649  0020F2  0012               	return	
  2650  0020F4                     l1856:
  2651  0020F4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  2652  0020F8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2653  0020FA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2654  0020FC  3419               	rlcf	___ftmul@f2+1,w,c
  2655  0020FE  361B               	rlcf	??___ftmul& (0+255),f,c
  2656  002100  E301               	bnc	u1671
  2657  002102  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2658  002104                     u1671:
  2659  002104  501B               	movf	??___ftmul,w,c
  2660  002106  6E23               	movwf	___ftmul@sign,c
  2661  002108  5023               	movf	___ftmul@sign,w,c
  2662  00210A  A4D8               	btfss	status,2,c
  2663  00210C  D007               	goto	l1862
  2664  00210E  0E00               	movlw	0
  2665  002110  6E15               	movwf	?___ftmul,c
  2666  002112  0E00               	movlw	0
  2667  002114  6E16               	movwf	?___ftmul+1,c
  2668  002116  0E00               	movlw	0
  2669  002118  6E17               	movwf	?___ftmul+2,c
  2670  00211A  0012               	return	
  2671  00211C                     l1862:
  2672  00211C  5023               	movf	___ftmul@sign,w,c
  2673  00211E  0F7B               	addlw	123
  2674  002120  261E               	addwf	___ftmul@exp,f,c
  2675  002122  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  2676  002126  501A               	movf	___ftmul@f2+2,w,c
  2677  002128  1A23               	xorwf	___ftmul@sign,f,c
  2678  00212A  0E80               	movlw	128
  2679  00212C  1623               	andwf	___ftmul@sign,f,c
  2680  00212E  8E16               	bsf	___ftmul@f1+1,7,c
  2681  002130  8E19               	bsf	___ftmul@f2+1,7,c
  2682  002132  0EFF               	movlw	255
  2683  002134  1618               	andwf	___ftmul@f2,f,c
  2684  002136  0EFF               	movlw	255
  2685  002138  1619               	andwf	___ftmul@f2+1,f,c
  2686  00213A  0E00               	movlw	0
  2687  00213C  161A               	andwf	___ftmul@f2+2,f,c
  2688  00213E  0E00               	movlw	0
  2689  002140  6E1F               	movwf	___ftmul@f3_as_product,c
  2690  002142  0E00               	movlw	0
  2691  002144  6E20               	movwf	___ftmul@f3_as_product+1,c
  2692  002146  0E00               	movlw	0
  2693  002148  6E21               	movwf	___ftmul@f3_as_product+2,c
  2694  00214A  0E07               	movlw	7
  2695  00214C  6E22               	movwf	___ftmul@cntr,c
  2696  00214E                     l1876:
  2697  00214E  A015               	btfss	___ftmul@f1,0,c
  2698  002150  D006               	goto	l1880
  2699  002152  5018               	movf	___ftmul@f2,w,c
  2700  002154  261F               	addwf	___ftmul@f3_as_product,f,c
  2701  002156  5019               	movf	___ftmul@f2+1,w,c
  2702  002158  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2703  00215A  501A               	movf	___ftmul@f2+2,w,c
  2704  00215C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2705  00215E                     l1880:
  2706  00215E  90D8               	bcf	status,0,c
  2707  002160  3217               	rrcf	___ftmul@f1+2,f,c
  2708  002162  3216               	rrcf	___ftmul@f1+1,f,c
  2709  002164  3215               	rrcf	___ftmul@f1,f,c
  2710  002166  90D8               	bcf	status,0,c
  2711  002168  3618               	rlcf	___ftmul@f2,f,c
  2712  00216A  3619               	rlcf	___ftmul@f2+1,f,c
  2713  00216C  361A               	rlcf	___ftmul@f2+2,f,c
  2714  00216E  2E22               	decfsz	___ftmul@cntr,f,c
  2715  002170  D7EE               	goto	l1876
  2716  002172  0E09               	movlw	9
  2717  002174  6E22               	movwf	___ftmul@cntr,c
  2718  002176                     l1886:
  2719  002176  A015               	btfss	___ftmul@f1,0,c
  2720  002178  D006               	goto	l1890
  2721  00217A  5018               	movf	___ftmul@f2,w,c
  2722  00217C  261F               	addwf	___ftmul@f3_as_product,f,c
  2723  00217E  5019               	movf	___ftmul@f2+1,w,c
  2724  002180  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2725  002182  501A               	movf	___ftmul@f2+2,w,c
  2726  002184  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2727  002186                     l1890:
  2728  002186  90D8               	bcf	status,0,c
  2729  002188  3217               	rrcf	___ftmul@f1+2,f,c
  2730  00218A  3216               	rrcf	___ftmul@f1+1,f,c
  2731  00218C  3215               	rrcf	___ftmul@f1,f,c
  2732  00218E  90D8               	bcf	status,0,c
  2733  002190  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  2734  002192  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  2735  002194  321F               	rrcf	___ftmul@f3_as_product,f,c
  2736  002196  2E22               	decfsz	___ftmul@cntr,f,c
  2737  002198  D7EE               	goto	l1886
  2738  00219A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2739  00219E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2740  0021A2  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2741  0021A6  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  2742  0021AA  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  2743  0021AE  EC5A  F011         	call	___ftpack	;wreg free
  2744  0021B2  C001  F015         	movff	?___ftpack,?___ftmul
  2745  0021B6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  2746  0021BA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  2747  0021BE  0012               	return	
  2748  0021C0                     __end_of___ftmul:
  2749                           	opt stack 0
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           prodh	equ	0xFF4
  2755                           prodl	equ	0xFF3
  2756                           wreg	equ	0xFE8
  2757                           indf2	equ	0xFDF
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function ___awmod *****************
  2765 ;; Defined at:
  2766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  dividend        2    0[COMRAM] int 
  2769 ;;  divisor         2    2[COMRAM] int 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  sign            1    5[COMRAM] unsigned char 
  2772 ;;  counter         1    4[COMRAM] unsigned char 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  2    0[COMRAM] int 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;Total ram usage:        6 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_fround
  2792 ;;		_scale
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text7
  2797  00258E                     __ptext7:
  2798                           	opt stack 0
  2799  00258E                     ___awmod:
  2800                           	opt stack 28
  2801                           
  2802                           ;incstack = 0
  2803  00258E  0E00               	movlw	0
  2804  002590  6E06               	movwf	___awmod@sign,c
  2805  002592  AE02               	btfss	___awmod@dividend+1,7,c
  2806  002594  D006               	goto	l1950
  2807  002596  6C01               	negf	___awmod@dividend,c
  2808  002598  1E02               	comf	___awmod@dividend+1,f,c
  2809  00259A  B0D8               	btfsc	status,0,c
  2810  00259C  2A02               	incf	___awmod@dividend+1,f,c
  2811  00259E  0E01               	movlw	1
  2812  0025A0  6E06               	movwf	___awmod@sign,c
  2813  0025A2                     l1950:
  2814  0025A2  AE04               	btfss	___awmod@divisor+1,7,c
  2815  0025A4  D004               	goto	l1954
  2816  0025A6  6C03               	negf	___awmod@divisor,c
  2817  0025A8  1E04               	comf	___awmod@divisor+1,f,c
  2818  0025AA  B0D8               	btfsc	status,0,c
  2819  0025AC  2A04               	incf	___awmod@divisor+1,f,c
  2820  0025AE                     l1954:
  2821  0025AE  5003               	movf	___awmod@divisor,w,c
  2822  0025B0  1004               	iorwf	___awmod@divisor+1,w,c
  2823  0025B2  B4D8               	btfsc	status,2,c
  2824  0025B4  D018               	goto	l1970
  2825  0025B6  0E01               	movlw	1
  2826  0025B8  6E05               	movwf	___awmod@counter,c
  2827  0025BA  D004               	goto	l1960
  2828  0025BC                     l1958:
  2829  0025BC  90D8               	bcf	status,0,c
  2830  0025BE  3603               	rlcf	___awmod@divisor,f,c
  2831  0025C0  3604               	rlcf	___awmod@divisor+1,f,c
  2832  0025C2  2A05               	incf	___awmod@counter,f,c
  2833  0025C4                     l1960:
  2834  0025C4  AE04               	btfss	___awmod@divisor+1,7,c
  2835  0025C6  D7FA               	goto	l1958
  2836  0025C8                     l1962:
  2837  0025C8  5003               	movf	___awmod@divisor,w,c
  2838  0025CA  5C01               	subwf	___awmod@dividend,w,c
  2839  0025CC  5004               	movf	___awmod@divisor+1,w,c
  2840  0025CE  5802               	subwfb	___awmod@dividend+1,w,c
  2841  0025D0  A0D8               	btfss	status,0,c
  2842  0025D2  D004               	goto	l1966
  2843  0025D4  5003               	movf	___awmod@divisor,w,c
  2844  0025D6  5E01               	subwf	___awmod@dividend,f,c
  2845  0025D8  5004               	movf	___awmod@divisor+1,w,c
  2846  0025DA  5A02               	subwfb	___awmod@dividend+1,f,c
  2847  0025DC                     l1966:
  2848  0025DC  90D8               	bcf	status,0,c
  2849  0025DE  3204               	rrcf	___awmod@divisor+1,f,c
  2850  0025E0  3203               	rrcf	___awmod@divisor,f,c
  2851  0025E2  2E05               	decfsz	___awmod@counter,f,c
  2852  0025E4  D7F1               	goto	l1962
  2853  0025E6                     l1970:
  2854  0025E6  5006               	movf	___awmod@sign,w,c
  2855  0025E8  B4D8               	btfsc	status,2,c
  2856  0025EA  D004               	goto	l1974
  2857  0025EC  6C01               	negf	___awmod@dividend,c
  2858  0025EE  1E02               	comf	___awmod@dividend+1,f,c
  2859  0025F0  B0D8               	btfsc	status,0,c
  2860  0025F2  2A02               	incf	___awmod@dividend+1,f,c
  2861  0025F4                     l1974:
  2862  0025F4  C001  F001         	movff	___awmod@dividend,?___awmod
  2863  0025F8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2864  0025FC  0012               	return	
  2865  0025FE                     __end_of___awmod:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           wreg	equ	0xFE8
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function ___awdiv *****************
  2882 ;; Defined at:
  2883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  dividend        2    6[COMRAM] int 
  2886 ;;  divisor         2    8[COMRAM] int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  quotient        2   12[COMRAM] int 
  2889 ;;  sign            1   11[COMRAM] unsigned char 
  2890 ;;  counter         1   10[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2    6[COMRAM] int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:        8 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_fround
  2910 ;;		_scale
  2911 ;;		_sprintf
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text8
  2916  002488                     __ptext8:
  2917                           	opt stack 0
  2918  002488                     ___awdiv:
  2919                           	opt stack 28
  2920                           
  2921                           ;incstack = 0
  2922  002488  0E00               	movlw	0
  2923  00248A  6E0C               	movwf	___awdiv@sign,c
  2924  00248C  AE0A               	btfss	___awdiv@divisor+1,7,c
  2925  00248E  D006               	goto	l1906
  2926  002490  6C09               	negf	___awdiv@divisor,c
  2927  002492  1E0A               	comf	___awdiv@divisor+1,f,c
  2928  002494  B0D8               	btfsc	status,0,c
  2929  002496  2A0A               	incf	___awdiv@divisor+1,f,c
  2930  002498  0E01               	movlw	1
  2931  00249A  6E0C               	movwf	___awdiv@sign,c
  2932  00249C                     l1906:
  2933  00249C  AE08               	btfss	___awdiv@dividend+1,7,c
  2934  00249E  D006               	goto	l1912
  2935  0024A0  6C07               	negf	___awdiv@dividend,c
  2936  0024A2  1E08               	comf	___awdiv@dividend+1,f,c
  2937  0024A4  B0D8               	btfsc	status,0,c
  2938  0024A6  2A08               	incf	___awdiv@dividend+1,f,c
  2939  0024A8  0E01               	movlw	1
  2940  0024AA  1A0C               	xorwf	___awdiv@sign,f,c
  2941  0024AC                     l1912:
  2942  0024AC  0E00               	movlw	0
  2943  0024AE  6E0E               	movwf	___awdiv@quotient+1,c
  2944  0024B0  0E00               	movlw	0
  2945  0024B2  6E0D               	movwf	___awdiv@quotient,c
  2946  0024B4  5009               	movf	___awdiv@divisor,w,c
  2947  0024B6  100A               	iorwf	___awdiv@divisor+1,w,c
  2948  0024B8  B4D8               	btfsc	status,2,c
  2949  0024BA  D01C               	goto	l1934
  2950  0024BC  0E01               	movlw	1
  2951  0024BE  6E0B               	movwf	___awdiv@counter,c
  2952  0024C0  D004               	goto	l1920
  2953  0024C2                     l1918:
  2954  0024C2  90D8               	bcf	status,0,c
  2955  0024C4  3609               	rlcf	___awdiv@divisor,f,c
  2956  0024C6  360A               	rlcf	___awdiv@divisor+1,f,c
  2957  0024C8  2A0B               	incf	___awdiv@counter,f,c
  2958  0024CA                     l1920:
  2959  0024CA  AE0A               	btfss	___awdiv@divisor+1,7,c
  2960  0024CC  D7FA               	goto	l1918
  2961  0024CE                     l1922:
  2962  0024CE  90D8               	bcf	status,0,c
  2963  0024D0  360D               	rlcf	___awdiv@quotient,f,c
  2964  0024D2  360E               	rlcf	___awdiv@quotient+1,f,c
  2965  0024D4  5009               	movf	___awdiv@divisor,w,c
  2966  0024D6  5C07               	subwf	___awdiv@dividend,w,c
  2967  0024D8  500A               	movf	___awdiv@divisor+1,w,c
  2968  0024DA  5808               	subwfb	___awdiv@dividend+1,w,c
  2969  0024DC  A0D8               	btfss	status,0,c
  2970  0024DE  D005               	goto	l1930
  2971  0024E0  5009               	movf	___awdiv@divisor,w,c
  2972  0024E2  5E07               	subwf	___awdiv@dividend,f,c
  2973  0024E4  500A               	movf	___awdiv@divisor+1,w,c
  2974  0024E6  5A08               	subwfb	___awdiv@dividend+1,f,c
  2975  0024E8  800D               	bsf	___awdiv@quotient,0,c
  2976  0024EA                     l1930:
  2977  0024EA  90D8               	bcf	status,0,c
  2978  0024EC  320A               	rrcf	___awdiv@divisor+1,f,c
  2979  0024EE  3209               	rrcf	___awdiv@divisor,f,c
  2980  0024F0  2E0B               	decfsz	___awdiv@counter,f,c
  2981  0024F2  D7ED               	goto	l1922
  2982  0024F4                     l1934:
  2983  0024F4  500C               	movf	___awdiv@sign,w,c
  2984  0024F6  B4D8               	btfsc	status,2,c
  2985  0024F8  D004               	goto	l1938
  2986  0024FA  6C0D               	negf	___awdiv@quotient,c
  2987  0024FC  1E0E               	comf	___awdiv@quotient+1,f,c
  2988  0024FE  B0D8               	btfsc	status,0,c
  2989  002500  2A0E               	incf	___awdiv@quotient+1,f,c
  2990  002502                     l1938:
  2991  002502  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2992  002506  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2993  00250A  0012               	return	
  2994  00250C                     __end_of___awdiv:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           wreg	equ	0xFE8
  3003                           indf2	equ	0xFDF
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function __tdiv_to_l_ *****************
  3011 ;; Defined at:
  3012 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  f1              3    0[COMRAM] float 
  3015 ;;  f2              3    3[COMRAM] float 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  quot            4    9[COMRAM] unsigned long 
  3018 ;;  exp1            1   14[COMRAM] unsigned char 
  3019 ;;  cntr            1   13[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  4    0[COMRAM] unsigned long 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3029 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;Total ram usage:       15 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_sprintf
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text9
  3043  001E72                     __ptext9:
  3044                           	opt stack 0
  3045  001E72                     __tdiv_to_l_:
  3046                           	opt stack 29
  3047                           
  3048                           ;incstack = 0
  3049  001E72  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3050  001E76  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3051  001E78  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3052  001E7A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3053  001E7C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3054  001E7E  E301               	bnc	u1901
  3055  001E80  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3056  001E82                     u1901:
  3057  001E82  5007               	movf	??__tdiv_to_l_,w,c
  3058  001E84  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3059  001E86  500F               	movf	__tdiv_to_l_@exp1,w,c
  3060  001E88  A4D8               	btfss	status,2,c
  3061  001E8A  D009               	goto	l2044
  3062  001E8C  0E00               	movlw	0
  3063  001E8E  6E01               	movwf	?__tdiv_to_l_,c
  3064  001E90  0E00               	movlw	0
  3065  001E92  6E02               	movwf	?__tdiv_to_l_+1,c
  3066  001E94  0E00               	movlw	0
  3067  001E96  6E03               	movwf	?__tdiv_to_l_+2,c
  3068  001E98  0E00               	movlw	0
  3069  001E9A  6E04               	movwf	?__tdiv_to_l_+3,c
  3070  001E9C  0012               	return	
  3071  001E9E                     l2044:
  3072  001E9E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3073  001EA2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3074  001EA4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3075  001EA6  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3076  001EA8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3077  001EAA  E301               	bnc	u1921
  3078  001EAC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3079  001EAE                     u1921:
  3080  001EAE  5007               	movf	??__tdiv_to_l_,w,c
  3081  001EB0  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3082  001EB2  500E               	movf	__tdiv_to_l_@cntr,w,c
  3083  001EB4  A4D8               	btfss	status,2,c
  3084  001EB6  D009               	goto	l2050
  3085  001EB8  0E00               	movlw	0
  3086  001EBA  6E01               	movwf	?__tdiv_to_l_,c
  3087  001EBC  0E00               	movlw	0
  3088  001EBE  6E02               	movwf	?__tdiv_to_l_+1,c
  3089  001EC0  0E00               	movlw	0
  3090  001EC2  6E03               	movwf	?__tdiv_to_l_+2,c
  3091  001EC4  0E00               	movlw	0
  3092  001EC6  6E04               	movwf	?__tdiv_to_l_+3,c
  3093  001EC8  0012               	return	
  3094  001ECA                     l2050:
  3095  001ECA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3096  001ECC  0EFF               	movlw	255
  3097  001ECE  1601               	andwf	__tdiv_to_l_@f1,f,c
  3098  001ED0  0EFF               	movlw	255
  3099  001ED2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3100  001ED4  0E00               	movlw	0
  3101  001ED6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3102  001ED8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3103  001EDA  0EFF               	movlw	255
  3104  001EDC  1604               	andwf	__tdiv_to_l_@f2,f,c
  3105  001EDE  0EFF               	movlw	255
  3106  001EE0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3107  001EE2  0E00               	movlw	0
  3108  001EE4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3109  001EE6  0E00               	movlw	0
  3110  001EE8  6E0A               	movwf	__tdiv_to_l_@quot,c
  3111  001EEA  0E00               	movlw	0
  3112  001EEC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3113  001EEE  0E00               	movlw	0
  3114  001EF0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3115  001EF2  0E00               	movlw	0
  3116  001EF4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3117  001EF6  0E7F               	movlw	127
  3118  001EF8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3119  001EFA  500E               	movf	__tdiv_to_l_@cntr,w,c
  3120  001EFC  0F98               	addlw	152
  3121  001EFE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3122  001F00  0E18               	movlw	24
  3123  001F02  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3124  001F04                     l519:
  3125  001F04  90D8               	bcf	status,0,c
  3126  001F06  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3127  001F08  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3128  001F0A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3129  001F0C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3130  001F0E  5004               	movf	__tdiv_to_l_@f2,w,c
  3131  001F10  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3132  001F12  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3133  001F14  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3134  001F16  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3135  001F18  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3136  001F1A  A0D8               	btfss	status,0,c
  3137  001F1C  D007               	goto	l520
  3138  001F1E  5004               	movf	__tdiv_to_l_@f2,w,c
  3139  001F20  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3140  001F22  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3141  001F24  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3142  001F26  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3143  001F28  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3144  001F2A  800A               	bsf	__tdiv_to_l_@quot,0,c
  3145  001F2C                     l520:
  3146  001F2C  90D8               	bcf	status,0,c
  3147  001F2E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3148  001F30  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3149  001F32  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3150  001F34  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3151  001F36  D7E6               	goto	l519
  3152  001F38  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3153  001F3A  D016               	goto	l2084
  3154  001F3C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3155  001F3E  0A80               	xorlw	128
  3156  001F40  0F97               	addlw	151
  3157  001F42  B0D8               	btfsc	status,0,c
  3158  001F44  D009               	goto	l2080
  3159  001F46  0E00               	movlw	0
  3160  001F48  6E01               	movwf	?__tdiv_to_l_,c
  3161  001F4A  0E00               	movlw	0
  3162  001F4C  6E02               	movwf	?__tdiv_to_l_+1,c
  3163  001F4E  0E00               	movlw	0
  3164  001F50  6E03               	movwf	?__tdiv_to_l_+2,c
  3165  001F52  0E00               	movlw	0
  3166  001F54  6E04               	movwf	?__tdiv_to_l_+3,c
  3167  001F56  0012               	return	
  3168  001F58                     l2080:
  3169  001F58  90D8               	bcf	status,0,c
  3170  001F5A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3171  001F5C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3172  001F5E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3173  001F60  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3174  001F62  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3175  001F64  D7F9               	goto	l2080
  3176  001F66  D015               	goto	l526
  3177  001F68                     l2084:
  3178  001F68  0E17               	movlw	23
  3179  001F6A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3180  001F6C  D00F               	goto	l2092
  3181  001F6E  0E00               	movlw	0
  3182  001F70  6E01               	movwf	?__tdiv_to_l_,c
  3183  001F72  0E00               	movlw	0
  3184  001F74  6E02               	movwf	?__tdiv_to_l_+1,c
  3185  001F76  0E00               	movlw	0
  3186  001F78  6E03               	movwf	?__tdiv_to_l_+2,c
  3187  001F7A  0E00               	movlw	0
  3188  001F7C  6E04               	movwf	?__tdiv_to_l_+3,c
  3189  001F7E  0012               	return	
  3190  001F80                     l2090:
  3191  001F80  90D8               	bcf	status,0,c
  3192  001F82  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3193  001F84  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3194  001F86  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3195  001F88  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3196  001F8A  060F               	decf	__tdiv_to_l_@exp1,f,c
  3197  001F8C                     l2092:
  3198  001F8C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3199  001F8E  A4D8               	btfss	status,2,c
  3200  001F90  D7F7               	goto	l2090
  3201  001F92                     l526:
  3202  001F92  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3203  001F96  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3204  001F9A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3205  001F9E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3206  001FA2  0012               	return		;funcret
  3207  001FA4                     __end_of__tdiv_to_l_:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           wreg	equ	0xFE8
  3216                           indf2	equ	0xFDF
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function __div_to_l_ *****************
  3224 ;; Defined at:
  3225 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  f1              3    0[COMRAM] unsigned long 
  3228 ;;  f2              3    3[COMRAM] unsigned long 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  quot            4    6[COMRAM] unsigned long 
  3231 ;;  exp1            1   11[COMRAM] unsigned char 
  3232 ;;  cntr            1   10[COMRAM] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  4    0[COMRAM] unsigned long 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3242 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;Total ram usage:       12 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_sprintf
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text10
  3256  001FA4                     __ptext10:
  3257                           	opt stack 0
  3258  001FA4                     __div_to_l_:
  3259                           	opt stack 29
  3260                           
  3261                           ;incstack = 0
  3262  001FA4  3403               	rlcf	__div_to_l_@f1+2,w,c
  3263  001FA6  3404               	rlcf	__div_to_l_@f1+3,w,c
  3264  001FA8  6E0C               	movwf	__div_to_l_@exp1,c
  3265  001FAA  500C               	movf	__div_to_l_@exp1,w,c
  3266  001FAC  A4D8               	btfss	status,2,c
  3267  001FAE  D009               	goto	l2100
  3268  001FB0  0E00               	movlw	0
  3269  001FB2  6E01               	movwf	?__div_to_l_,c
  3270  001FB4  0E00               	movlw	0
  3271  001FB6  6E02               	movwf	?__div_to_l_+1,c
  3272  001FB8  0E00               	movlw	0
  3273  001FBA  6E03               	movwf	?__div_to_l_+2,c
  3274  001FBC  0E00               	movlw	0
  3275  001FBE  6E04               	movwf	?__div_to_l_+3,c
  3276  001FC0  0012               	return	
  3277  001FC2                     l2100:
  3278  001FC2  3406               	rlcf	__div_to_l_@f2+2,w,c
  3279  001FC4  3407               	rlcf	__div_to_l_@f2+3,w,c
  3280  001FC6  6E0B               	movwf	__div_to_l_@cntr,c
  3281  001FC8  500B               	movf	__div_to_l_@cntr,w,c
  3282  001FCA  A4D8               	btfss	status,2,c
  3283  001FCC  D009               	goto	l2106
  3284  001FCE  0E00               	movlw	0
  3285  001FD0  6E01               	movwf	?__div_to_l_,c
  3286  001FD2  0E00               	movlw	0
  3287  001FD4  6E02               	movwf	?__div_to_l_+1,c
  3288  001FD6  0E00               	movlw	0
  3289  001FD8  6E03               	movwf	?__div_to_l_+2,c
  3290  001FDA  0E00               	movlw	0
  3291  001FDC  6E04               	movwf	?__div_to_l_+3,c
  3292  001FDE  0012               	return	
  3293  001FE0                     l2106:
  3294  001FE0  8E03               	bsf	__div_to_l_@f1+2,7,c
  3295  001FE2  0EFF               	movlw	255
  3296  001FE4  1601               	andwf	__div_to_l_@f1,f,c
  3297  001FE6  0EFF               	movlw	255
  3298  001FE8  1602               	andwf	__div_to_l_@f1+1,f,c
  3299  001FEA  0EFF               	movlw	255
  3300  001FEC  1603               	andwf	__div_to_l_@f1+2,f,c
  3301  001FEE  0E00               	movlw	0
  3302  001FF0  1604               	andwf	__div_to_l_@f1+3,f,c
  3303  001FF2  8E06               	bsf	__div_to_l_@f2+2,7,c
  3304  001FF4  0EFF               	movlw	255
  3305  001FF6  1604               	andwf	__div_to_l_@f2,f,c
  3306  001FF8  0EFF               	movlw	255
  3307  001FFA  1605               	andwf	__div_to_l_@f2+1,f,c
  3308  001FFC  0EFF               	movlw	255
  3309  001FFE  1606               	andwf	__div_to_l_@f2+2,f,c
  3310  002000  0E00               	movlw	0
  3311  002002  1607               	andwf	__div_to_l_@f2+3,f,c
  3312  002004  0E00               	movlw	0
  3313  002006  6E07               	movwf	__div_to_l_@quot,c
  3314  002008  0E00               	movlw	0
  3315  00200A  6E08               	movwf	__div_to_l_@quot+1,c
  3316  00200C  0E00               	movlw	0
  3317  00200E  6E09               	movwf	__div_to_l_@quot+2,c
  3318  002010  0E00               	movlw	0
  3319  002012  6E0A               	movwf	__div_to_l_@quot+3,c
  3320  002014  0E7F               	movlw	127
  3321  002016  5E0C               	subwf	__div_to_l_@exp1,f,c
  3322  002018  500B               	movf	__div_to_l_@cntr,w,c
  3323  00201A  0FA0               	addlw	160
  3324  00201C  5E0C               	subwf	__div_to_l_@exp1,f,c
  3325  00201E  0E20               	movlw	32
  3326  002020  6E0B               	movwf	__div_to_l_@cntr,c
  3327  002022                     l2120:
  3328  002022  90D8               	bcf	status,0,c
  3329  002024  3607               	rlcf	__div_to_l_@quot,f,c
  3330  002026  3608               	rlcf	__div_to_l_@quot+1,f,c
  3331  002028  3609               	rlcf	__div_to_l_@quot+2,f,c
  3332  00202A  360A               	rlcf	__div_to_l_@quot+3,f,c
  3333  00202C  5004               	movf	__div_to_l_@f2,w,c
  3334  00202E  5C01               	subwf	__div_to_l_@f1,w,c
  3335  002030  5005               	movf	__div_to_l_@f2+1,w,c
  3336  002032  5802               	subwfb	__div_to_l_@f1+1,w,c
  3337  002034  5006               	movf	__div_to_l_@f2+2,w,c
  3338  002036  5803               	subwfb	__div_to_l_@f1+2,w,c
  3339  002038  5007               	movf	__div_to_l_@f2+3,w,c
  3340  00203A  5804               	subwfb	__div_to_l_@f1+3,w,c
  3341  00203C  A0D8               	btfss	status,0,c
  3342  00203E  D009               	goto	l2128
  3343  002040  5004               	movf	__div_to_l_@f2,w,c
  3344  002042  5E01               	subwf	__div_to_l_@f1,f,c
  3345  002044  5005               	movf	__div_to_l_@f2+1,w,c
  3346  002046  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3347  002048  5006               	movf	__div_to_l_@f2+2,w,c
  3348  00204A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3349  00204C  5007               	movf	__div_to_l_@f2+3,w,c
  3350  00204E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3351  002050  8007               	bsf	__div_to_l_@quot,0,c
  3352  002052                     l2128:
  3353  002052  90D8               	bcf	status,0,c
  3354  002054  3601               	rlcf	__div_to_l_@f1,f,c
  3355  002056  3602               	rlcf	__div_to_l_@f1+1,f,c
  3356  002058  3603               	rlcf	__div_to_l_@f1+2,f,c
  3357  00205A  3604               	rlcf	__div_to_l_@f1+3,f,c
  3358  00205C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3359  00205E  D7E1               	goto	l2120
  3360  002060  AE0C               	btfss	__div_to_l_@exp1,7,c
  3361  002062  D016               	goto	l2144
  3362  002064  500C               	movf	__div_to_l_@exp1,w,c
  3363  002066  0A80               	xorlw	128
  3364  002068  0F9F               	addlw	159
  3365  00206A  B0D8               	btfsc	status,0,c
  3366  00206C  D009               	goto	l2140
  3367  00206E  0E00               	movlw	0
  3368  002070  6E01               	movwf	?__div_to_l_,c
  3369  002072  0E00               	movlw	0
  3370  002074  6E02               	movwf	?__div_to_l_+1,c
  3371  002076  0E00               	movlw	0
  3372  002078  6E03               	movwf	?__div_to_l_+2,c
  3373  00207A  0E00               	movlw	0
  3374  00207C  6E04               	movwf	?__div_to_l_+3,c
  3375  00207E  0012               	return	
  3376  002080                     l2140:
  3377  002080  90D8               	bcf	status,0,c
  3378  002082  320A               	rrcf	__div_to_l_@quot+3,f,c
  3379  002084  3209               	rrcf	__div_to_l_@quot+2,f,c
  3380  002086  3208               	rrcf	__div_to_l_@quot+1,f,c
  3381  002088  3207               	rrcf	__div_to_l_@quot,f,c
  3382  00208A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3383  00208C  D7F9               	goto	l2140
  3384  00208E  D015               	goto	l422
  3385  002090                     l2144:
  3386  002090  0E1F               	movlw	31
  3387  002092  640C               	cpfsgt	__div_to_l_@exp1,c
  3388  002094  D00F               	goto	l2152
  3389  002096  0E00               	movlw	0
  3390  002098  6E01               	movwf	?__div_to_l_,c
  3391  00209A  0E00               	movlw	0
  3392  00209C  6E02               	movwf	?__div_to_l_+1,c
  3393  00209E  0E00               	movlw	0
  3394  0020A0  6E03               	movwf	?__div_to_l_+2,c
  3395  0020A2  0E00               	movlw	0
  3396  0020A4  6E04               	movwf	?__div_to_l_+3,c
  3397  0020A6  0012               	return	
  3398  0020A8                     l2150:
  3399  0020A8  90D8               	bcf	status,0,c
  3400  0020AA  3607               	rlcf	__div_to_l_@quot,f,c
  3401  0020AC  3608               	rlcf	__div_to_l_@quot+1,f,c
  3402  0020AE  3609               	rlcf	__div_to_l_@quot+2,f,c
  3403  0020B0  360A               	rlcf	__div_to_l_@quot+3,f,c
  3404  0020B2  060C               	decf	__div_to_l_@exp1,f,c
  3405  0020B4                     l2152:
  3406  0020B4  500C               	movf	__div_to_l_@exp1,w,c
  3407  0020B6  A4D8               	btfss	status,2,c
  3408  0020B8  D7F7               	goto	l2150
  3409  0020BA                     l422:
  3410  0020BA  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3411  0020BE  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3412  0020C2  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3413  0020C6  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3414  0020CA  0012               	return		;funcret
  3415  0020CC                     __end_of__div_to_l_:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           wreg	equ	0xFE8
  3424                           indf2	equ	0xFDF
  3425                           postinc2	equ	0xFDE
  3426                           postdec2	equ	0xFDD
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function ___lltoft *****************
  3432 ;; Defined at:
  3433 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  c               4    8[COMRAM] unsigned long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  exp             1   16[COMRAM] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  3    8[COMRAM] float 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;Total ram usage:        9 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    1
  3454 ;; This function calls:
  3455 ;;		___ftpack
  3456 ;; This function is called by:
  3457 ;;		_sprintf
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text11
  3462  002722                     __ptext11:
  3463                           	opt stack 0
  3464  002722                     ___lltoft:
  3465                           	opt stack 28
  3466                           
  3467                           ;incstack = 0
  3468  002722  0E8E               	movlw	142
  3469  002724  6E11               	movwf	___lltoft@exp,c
  3470  002726  D006               	goto	l2272
  3471  002728                     l2270:
  3472  002728  90D8               	bcf	status,0,c
  3473  00272A  320C               	rrcf	___lltoft@c+3,f,c
  3474  00272C  320B               	rrcf	___lltoft@c+2,f,c
  3475  00272E  320A               	rrcf	___lltoft@c+1,f,c
  3476  002730  3209               	rrcf	___lltoft@c,f,c
  3477  002732  2A11               	incf	___lltoft@exp,f,c
  3478  002734                     l2272:
  3479  002734  0E00               	movlw	0
  3480  002736  1409               	andwf	___lltoft@c,w,c
  3481  002738  6E0D               	movwf	??___lltoft& (0+255),c
  3482  00273A  0E00               	movlw	0
  3483  00273C  140A               	andwf	___lltoft@c+1,w,c
  3484  00273E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3485  002740  0E00               	movlw	0
  3486  002742  140B               	andwf	___lltoft@c+2,w,c
  3487  002744  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3488  002746  0EFF               	movlw	255
  3489  002748  140C               	andwf	___lltoft@c+3,w,c
  3490  00274A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3491  00274C  500D               	movf	??___lltoft,w,c
  3492  00274E  100E               	iorwf	??___lltoft+1,w,c
  3493  002750  100F               	iorwf	??___lltoft+2,w,c
  3494  002752  1010               	iorwf	??___lltoft+3,w,c
  3495  002754  A4D8               	btfss	status,2,c
  3496  002756  D7E8               	goto	l2270
  3497  002758  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3498  00275C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3499  002760  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3500  002764  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3501  002768  0E00               	movlw	0
  3502  00276A  6E05               	movwf	___ftpack@sign,c
  3503  00276C  EC5A  F011         	call	___ftpack	;wreg free
  3504  002770  C001  F009         	movff	?___ftpack,?___lltoft
  3505  002774  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3506  002778  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3507  00277C  0012               	return	
  3508  00277E                     __end_of___lltoft:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           wreg	equ	0xFE8
  3517                           indf2	equ	0xFDF
  3518                           postinc2	equ	0xFDE
  3519                           postdec2	equ	0xFDD
  3520                           fsr2h	equ	0xFDA
  3521                           fsr2l	equ	0xFD9
  3522                           status	equ	0xFD8
  3523                           
  3524 ;; *************** function ___llmod *****************
  3525 ;; Defined at:
  3526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  dividend        4    0[COMRAM] unsigned long 
  3529 ;;  divisor         4    4[COMRAM] unsigned long 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  counter         1    8[COMRAM] unsigned char 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  4    0[COMRAM] unsigned long 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        9 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_sprintf
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text12
  3555  0025FE                     __ptext12:
  3556                           	opt stack 0
  3557  0025FE                     ___llmod:
  3558                           	opt stack 29
  3559                           
  3560                           ;incstack = 0
  3561  0025FE  5005               	movf	___llmod@divisor,w,c
  3562  002600  1006               	iorwf	___llmod@divisor+1,w,c
  3563  002602  1007               	iorwf	___llmod@divisor+2,w,c
  3564  002604  1008               	iorwf	___llmod@divisor+3,w,c
  3565  002606  B4D8               	btfsc	status,2,c
  3566  002608  D024               	goto	l606
  3567  00260A  0E01               	movlw	1
  3568  00260C  6E09               	movwf	___llmod@counter,c
  3569  00260E  D006               	goto	l2258
  3570  002610                     l2256:
  3571  002610  90D8               	bcf	status,0,c
  3572  002612  3605               	rlcf	___llmod@divisor,f,c
  3573  002614  3606               	rlcf	___llmod@divisor+1,f,c
  3574  002616  3607               	rlcf	___llmod@divisor+2,f,c
  3575  002618  3608               	rlcf	___llmod@divisor+3,f,c
  3576  00261A  2A09               	incf	___llmod@counter,f,c
  3577  00261C                     l2258:
  3578  00261C  AE08               	btfss	___llmod@divisor+3,7,c
  3579  00261E  D7F8               	goto	l2256
  3580  002620                     l2260:
  3581  002620  5005               	movf	___llmod@divisor,w,c
  3582  002622  5C01               	subwf	___llmod@dividend,w,c
  3583  002624  5006               	movf	___llmod@divisor+1,w,c
  3584  002626  5802               	subwfb	___llmod@dividend+1,w,c
  3585  002628  5007               	movf	___llmod@divisor+2,w,c
  3586  00262A  5803               	subwfb	___llmod@dividend+2,w,c
  3587  00262C  5008               	movf	___llmod@divisor+3,w,c
  3588  00262E  5804               	subwfb	___llmod@dividend+3,w,c
  3589  002630  A0D8               	btfss	status,0,c
  3590  002632  D008               	goto	l2264
  3591  002634  5005               	movf	___llmod@divisor,w,c
  3592  002636  5E01               	subwf	___llmod@dividend,f,c
  3593  002638  5006               	movf	___llmod@divisor+1,w,c
  3594  00263A  5A02               	subwfb	___llmod@dividend+1,f,c
  3595  00263C  5007               	movf	___llmod@divisor+2,w,c
  3596  00263E  5A03               	subwfb	___llmod@dividend+2,f,c
  3597  002640  5008               	movf	___llmod@divisor+3,w,c
  3598  002642  5A04               	subwfb	___llmod@dividend+3,f,c
  3599  002644                     l2264:
  3600  002644  90D8               	bcf	status,0,c
  3601  002646  3208               	rrcf	___llmod@divisor+3,f,c
  3602  002648  3207               	rrcf	___llmod@divisor+2,f,c
  3603  00264A  3206               	rrcf	___llmod@divisor+1,f,c
  3604  00264C  3205               	rrcf	___llmod@divisor,f,c
  3605  00264E  2E09               	decfsz	___llmod@counter,f,c
  3606  002650  D7E7               	goto	l2260
  3607  002652                     l606:
  3608  002652  C001  F001         	movff	___llmod@dividend,?___llmod
  3609  002656  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3610  00265A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3611  00265E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3612  002662  0012               	return		;funcret
  3613  002664                     __end_of___llmod:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           wreg	equ	0xFE8
  3622                           indf2	equ	0xFDF
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function ___lldiv *****************
  3630 ;; Defined at:
  3631 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  dividend        4    0[COMRAM] unsigned long 
  3634 ;;  divisor         4    4[COMRAM] unsigned long 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  quotient        4    8[COMRAM] unsigned long 
  3637 ;;  counter         1   12[COMRAM] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  4    0[COMRAM] unsigned long 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3647 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;Total ram usage:       13 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_sprintf
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text13
  3661  00250C                     __ptext13:
  3662                           	opt stack 0
  3663  00250C                     ___lldiv:
  3664                           	opt stack 29
  3665                           
  3666                           ;incstack = 0
  3667  00250C  0E00               	movlw	0
  3668  00250E  6E09               	movwf	___lldiv@quotient,c
  3669  002510  0E00               	movlw	0
  3670  002512  6E0A               	movwf	___lldiv@quotient+1,c
  3671  002514  0E00               	movlw	0
  3672  002516  6E0B               	movwf	___lldiv@quotient+2,c
  3673  002518  0E00               	movlw	0
  3674  00251A  6E0C               	movwf	___lldiv@quotient+3,c
  3675  00251C  5005               	movf	___lldiv@divisor,w,c
  3676  00251E  1006               	iorwf	___lldiv@divisor+1,w,c
  3677  002520  1007               	iorwf	___lldiv@divisor+2,w,c
  3678  002522  1008               	iorwf	___lldiv@divisor+3,w,c
  3679  002524  B4D8               	btfsc	status,2,c
  3680  002526  D02A               	goto	l596
  3681  002528  0E01               	movlw	1
  3682  00252A  6E0D               	movwf	___lldiv@counter,c
  3683  00252C  D006               	goto	l2238
  3684  00252E                     l2236:
  3685  00252E  90D8               	bcf	status,0,c
  3686  002530  3605               	rlcf	___lldiv@divisor,f,c
  3687  002532  3606               	rlcf	___lldiv@divisor+1,f,c
  3688  002534  3607               	rlcf	___lldiv@divisor+2,f,c
  3689  002536  3608               	rlcf	___lldiv@divisor+3,f,c
  3690  002538  2A0D               	incf	___lldiv@counter,f,c
  3691  00253A                     l2238:
  3692  00253A  AE08               	btfss	___lldiv@divisor+3,7,c
  3693  00253C  D7F8               	goto	l2236
  3694  00253E                     l2240:
  3695  00253E  90D8               	bcf	status,0,c
  3696  002540  3609               	rlcf	___lldiv@quotient,f,c
  3697  002542  360A               	rlcf	___lldiv@quotient+1,f,c
  3698  002544  360B               	rlcf	___lldiv@quotient+2,f,c
  3699  002546  360C               	rlcf	___lldiv@quotient+3,f,c
  3700  002548  5005               	movf	___lldiv@divisor,w,c
  3701  00254A  5C01               	subwf	___lldiv@dividend,w,c
  3702  00254C  5006               	movf	___lldiv@divisor+1,w,c
  3703  00254E  5802               	subwfb	___lldiv@dividend+1,w,c
  3704  002550  5007               	movf	___lldiv@divisor+2,w,c
  3705  002552  5803               	subwfb	___lldiv@dividend+2,w,c
  3706  002554  5008               	movf	___lldiv@divisor+3,w,c
  3707  002556  5804               	subwfb	___lldiv@dividend+3,w,c
  3708  002558  A0D8               	btfss	status,0,c
  3709  00255A  D009               	goto	l2248
  3710  00255C  5005               	movf	___lldiv@divisor,w,c
  3711  00255E  5E01               	subwf	___lldiv@dividend,f,c
  3712  002560  5006               	movf	___lldiv@divisor+1,w,c
  3713  002562  5A02               	subwfb	___lldiv@dividend+1,f,c
  3714  002564  5007               	movf	___lldiv@divisor+2,w,c
  3715  002566  5A03               	subwfb	___lldiv@dividend+2,f,c
  3716  002568  5008               	movf	___lldiv@divisor+3,w,c
  3717  00256A  5A04               	subwfb	___lldiv@dividend+3,f,c
  3718  00256C  8009               	bsf	___lldiv@quotient,0,c
  3719  00256E                     l2248:
  3720  00256E  90D8               	bcf	status,0,c
  3721  002570  3208               	rrcf	___lldiv@divisor+3,f,c
  3722  002572  3207               	rrcf	___lldiv@divisor+2,f,c
  3723  002574  3206               	rrcf	___lldiv@divisor+1,f,c
  3724  002576  3205               	rrcf	___lldiv@divisor,f,c
  3725  002578  2E0D               	decfsz	___lldiv@counter,f,c
  3726  00257A  D7E1               	goto	l2240
  3727  00257C                     l596:
  3728  00257C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3729  002580  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3730  002584  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3731  002588  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3732  00258C  0012               	return		;funcret
  3733  00258E                     __end_of___lldiv:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           wreg	equ	0xFE8
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function ___fttol *****************
  3750 ;; Defined at:
  3751 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  f1              3   42[COMRAM] float 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  lval            4   52[COMRAM] unsigned long 
  3756 ;;  exp1            1   56[COMRAM] unsigned char 
  3757 ;;  sign1           1   51[COMRAM] unsigned char 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  4   42[COMRAM] long 
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:       15 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_sprintf
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text14
  3781  0021C0                     __ptext14:
  3782                           	opt stack 0
  3783  0021C0                     ___fttol:
  3784                           	opt stack 29
  3785                           
  3786                           ;incstack = 0
  3787  0021C0  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  3788  0021C4  6A30               	clrf	(??___fttol+1)& (0+255),c
  3789  0021C6  6A31               	clrf	(??___fttol+2)& (0+255),c
  3790  0021C8  342C               	rlcf	___fttol@f1+1,w,c
  3791  0021CA  362F               	rlcf	??___fttol& (0+255),f,c
  3792  0021CC  E301               	bnc	u2111
  3793  0021CE  8030               	bsf	(??___fttol+1)& (0+255),0,c
  3794  0021D0                     u2111:
  3795  0021D0  502F               	movf	??___fttol,w,c
  3796  0021D2  6E39               	movwf	___fttol@exp1,c
  3797  0021D4  5039               	movf	___fttol@exp1,w,c
  3798  0021D6  A4D8               	btfss	status,2,c
  3799  0021D8  D009               	goto	l2190
  3800  0021DA  0E00               	movlw	0
  3801  0021DC  6E2B               	movwf	?___fttol,c
  3802  0021DE  0E00               	movlw	0
  3803  0021E0  6E2C               	movwf	?___fttol+1,c
  3804  0021E2  0E00               	movlw	0
  3805  0021E4  6E2D               	movwf	?___fttol+2,c
  3806  0021E6  0E00               	movlw	0
  3807  0021E8  6E2E               	movwf	?___fttol+3,c
  3808  0021EA  0012               	return	
  3809  0021EC                     l2190:
  3810  0021EC  0E17               	movlw	23
  3811  0021EE  6E2F               	movwf	??___fttol& (0+255),c
  3812  0021F0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  3813  0021F4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  3814  0021F8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  3815  0021FC  282F               	incf	??___fttol,w,c
  3816  0021FE  6E33               	movwf	(??___fttol+4)& (0+255),c
  3817  002200  D004               	goto	u2130
  3818  002202                     u2135:
  3819  002202  90D8               	bcf	status,0,c
  3820  002204  3232               	rrcf	??___fttol+3,f,c
  3821  002206  3231               	rrcf	??___fttol+2,f,c
  3822  002208  3230               	rrcf	??___fttol+1,f,c
  3823  00220A                     u2130:
  3824  00220A  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  3825  00220C  D7FA               	goto	u2135
  3826  00220E  5030               	movf	??___fttol+1,w,c
  3827  002210  6E34               	movwf	___fttol@sign1,c
  3828  002212  8E2C               	bsf	___fttol@f1+1,7,c
  3829  002214  0EFF               	movlw	255
  3830  002216  162B               	andwf	___fttol@f1,f,c
  3831  002218  0EFF               	movlw	255
  3832  00221A  162C               	andwf	___fttol@f1+1,f,c
  3833  00221C  0E00               	movlw	0
  3834  00221E  162D               	andwf	___fttol@f1+2,f,c
  3835  002220  502B               	movf	___fttol@f1,w,c
  3836  002222  6E35               	movwf	___fttol@lval,c
  3837  002224  502C               	movf	___fttol@f1+1,w,c
  3838  002226  6E36               	movwf	___fttol@lval+1,c
  3839  002228  502D               	movf	___fttol@f1+2,w,c
  3840  00222A  6E37               	movwf	___fttol@lval+2,c
  3841  00222C  6A38               	clrf	___fttol@lval+3,c
  3842  00222E  0E8E               	movlw	142
  3843  002230  5E39               	subwf	___fttol@exp1,f,c
  3844  002232  AE39               	btfss	___fttol@exp1,7,c
  3845  002234  D016               	goto	l2212
  3846  002236  5039               	movf	___fttol@exp1,w,c
  3847  002238  0A80               	xorlw	128
  3848  00223A  0F8F               	addlw	143
  3849  00223C  B0D8               	btfsc	status,0,c
  3850  00223E  D009               	goto	l2208
  3851  002240  0E00               	movlw	0
  3852  002242  6E2B               	movwf	?___fttol,c
  3853  002244  0E00               	movlw	0
  3854  002246  6E2C               	movwf	?___fttol+1,c
  3855  002248  0E00               	movlw	0
  3856  00224A  6E2D               	movwf	?___fttol+2,c
  3857  00224C  0E00               	movlw	0
  3858  00224E  6E2E               	movwf	?___fttol+3,c
  3859  002250  0012               	return	
  3860  002252                     l2208:
  3861  002252  90D8               	bcf	status,0,c
  3862  002254  3238               	rrcf	___fttol@lval+3,f,c
  3863  002256  3237               	rrcf	___fttol@lval+2,f,c
  3864  002258  3236               	rrcf	___fttol@lval+1,f,c
  3865  00225A  3235               	rrcf	___fttol@lval,f,c
  3866  00225C  3E39               	incfsz	___fttol@exp1,f,c
  3867  00225E  D7F9               	goto	l2208
  3868  002260  D015               	goto	l2222
  3869  002262                     l2212:
  3870  002262  0E17               	movlw	23
  3871  002264  6439               	cpfsgt	___fttol@exp1,c
  3872  002266  D00F               	goto	l2220
  3873  002268  0E00               	movlw	0
  3874  00226A  6E2B               	movwf	?___fttol,c
  3875  00226C  0E00               	movlw	0
  3876  00226E  6E2C               	movwf	?___fttol+1,c
  3877  002270  0E00               	movlw	0
  3878  002272  6E2D               	movwf	?___fttol+2,c
  3879  002274  0E00               	movlw	0
  3880  002276  6E2E               	movwf	?___fttol+3,c
  3881  002278  0012               	return	
  3882  00227A                     l2218:
  3883  00227A  90D8               	bcf	status,0,c
  3884  00227C  3635               	rlcf	___fttol@lval,f,c
  3885  00227E  3636               	rlcf	___fttol@lval+1,f,c
  3886  002280  3637               	rlcf	___fttol@lval+2,f,c
  3887  002282  3638               	rlcf	___fttol@lval+3,f,c
  3888  002284  0639               	decf	___fttol@exp1,f,c
  3889  002286                     l2220:
  3890  002286  5039               	movf	___fttol@exp1,w,c
  3891  002288  A4D8               	btfss	status,2,c
  3892  00228A  D7F7               	goto	l2218
  3893  00228C                     l2222:
  3894  00228C  5034               	movf	___fttol@sign1,w,c
  3895  00228E  B4D8               	btfsc	status,2,c
  3896  002290  D008               	goto	l2226
  3897  002292  1E38               	comf	___fttol@lval+3,f,c
  3898  002294  1E37               	comf	___fttol@lval+2,f,c
  3899  002296  1E36               	comf	___fttol@lval+1,f,c
  3900  002298  6C35               	negf	___fttol@lval,c
  3901  00229A  0E00               	movlw	0
  3902  00229C  2236               	addwfc	___fttol@lval+1,f,c
  3903  00229E  2237               	addwfc	___fttol@lval+2,f,c
  3904  0022A0  2238               	addwfc	___fttol@lval+3,f,c
  3905  0022A2                     l2226:
  3906  0022A2  C035  F02B         	movff	___fttol@lval,?___fttol
  3907  0022A6  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  3908  0022AA  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  3909  0022AE  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  3910  0022B2  0012               	return	
  3911  0022B4                     __end_of___fttol:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           wreg	equ	0xFE8
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           fsr2h	equ	0xFDA
  3924                           fsr2l	equ	0xFD9
  3925                           status	equ	0xFD8
  3926                           
  3927 ;; *************** function ___ftsub *****************
  3928 ;; Defined at:
  3929 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;  f1              3   57[COMRAM] float 
  3932 ;;  f2              3   60[COMRAM] float 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;		None
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  3   57[COMRAM] float 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3944 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;Total ram usage:        6 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    2
  3951 ;; This function calls:
  3952 ;;		___ftadd
  3953 ;; This function is called by:
  3954 ;;		_sprintf
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text15
  3959  00277E                     __ptext15:
  3960                           	opt stack 0
  3961  00277E                     ___ftsub:
  3962                           	opt stack 27
  3963                           
  3964                           ;incstack = 0
  3965  00277E  503D               	movf	___ftsub@f2,w,c
  3966  002780  103E               	iorwf	___ftsub@f2+1,w,c
  3967  002782  103F               	iorwf	___ftsub@f2+2,w,c
  3968  002784  B4D8               	btfsc	status,2,c
  3969  002786  D006               	goto	l2158
  3970  002788  0E00               	movlw	0
  3971  00278A  1A3D               	xorwf	___ftsub@f2,f,c
  3972  00278C  0E00               	movlw	0
  3973  00278E  1A3E               	xorwf	___ftsub@f2+1,f,c
  3974  002790  0E80               	movlw	128
  3975  002792  1A3F               	xorwf	___ftsub@f2+2,f,c
  3976  002794                     l2158:
  3977  002794  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  3978  002798  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  3979  00279C  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  3980  0027A0  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  3981  0027A4  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  3982  0027A8  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  3983  0027AC  EC63  F00E         	call	___ftadd	;wreg free
  3984  0027B0  C02E  F03A         	movff	?___ftadd,?___ftsub
  3985  0027B4  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  3986  0027B8  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  3987  0027BC  0012               	return	
  3988  0027BE                     __end_of___ftsub:
  3989                           	opt stack 0
  3990                           tblptru	equ	0xFF8
  3991                           tblptrh	equ	0xFF7
  3992                           tblptrl	equ	0xFF6
  3993                           tablat	equ	0xFF5
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           wreg	equ	0xFE8
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function ___ftadd *****************
  4005 ;; Defined at:
  4006 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  f1              3   45[COMRAM] float 
  4009 ;;  f2              3   48[COMRAM] float 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  exp1            1   56[COMRAM] unsigned char 
  4012 ;;  exp2            1   55[COMRAM] unsigned char 
  4013 ;;  sign            1   54[COMRAM] unsigned char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  3   45[COMRAM] float 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4023 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;Total ram usage:       12 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    1
  4030 ;; This function calls:
  4031 ;;		___ftpack
  4032 ;; This function is called by:
  4033 ;;		_sprintf
  4034 ;;		___ftsub
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text16
  4039  001CC6                     __ptext16:
  4040                           	opt stack 0
  4041  001CC6                     ___ftadd:
  4042                           	opt stack 27
  4043                           
  4044                           ;incstack = 0
  4045  001CC6  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4046  001CCA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4047  001CCC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4048  001CCE  342F               	rlcf	___ftadd@f1+1,w,c
  4049  001CD0  3634               	rlcf	??___ftadd& (0+255),f,c
  4050  001CD2  E301               	bnc	u1441
  4051  001CD4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4052  001CD6                     u1441:
  4053  001CD6  5034               	movf	??___ftadd,w,c
  4054  001CD8  6E39               	movwf	___ftadd@exp1,c
  4055  001CDA  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4056  001CDE  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4057  001CE0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4058  001CE2  3432               	rlcf	___ftadd@f2+1,w,c
  4059  001CE4  3634               	rlcf	??___ftadd& (0+255),f,c
  4060  001CE6  E301               	bnc	u1451
  4061  001CE8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4062  001CEA                     u1451:
  4063  001CEA  5034               	movf	??___ftadd,w,c
  4064  001CEC  6E38               	movwf	___ftadd@exp2,c
  4065  001CEE  5039               	movf	___ftadd@exp1,w,c
  4066  001CF0  B4D8               	btfsc	status,2,c
  4067  001CF2  D00B               	goto	l477
  4068  001CF4  5038               	movf	___ftadd@exp2,w,c
  4069  001CF6  5C39               	subwf	___ftadd@exp1,w,c
  4070  001CF8  B0D8               	btfsc	status,0,c
  4071  001CFA  D00E               	goto	l1788
  4072  001CFC  5039               	movf	___ftadd@exp1,w,c
  4073  001CFE  0800               	sublw	0
  4074  001D00  2438               	addwf	___ftadd@exp2,w,c
  4075  001D02  6E34               	movwf	??___ftadd& (0+255),c
  4076  001D04  0E18               	movlw	24
  4077  001D06  6434               	cpfsgt	??___ftadd,c
  4078  001D08  D007               	goto	l1788
  4079  001D0A                     l477:
  4080  001D0A  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4081  001D0E  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4082  001D12  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4083  001D16  0012               	return	
  4084  001D18                     l1788:
  4085  001D18  5038               	movf	___ftadd@exp2,w,c
  4086  001D1A  B4D8               	btfsc	status,2,c
  4087  001D1C  D00B               	goto	l481
  4088  001D1E  5039               	movf	___ftadd@exp1,w,c
  4089  001D20  5C38               	subwf	___ftadd@exp2,w,c
  4090  001D22  B0D8               	btfsc	status,0,c
  4091  001D24  D00E               	goto	l1794
  4092  001D26  5038               	movf	___ftadd@exp2,w,c
  4093  001D28  0800               	sublw	0
  4094  001D2A  2439               	addwf	___ftadd@exp1,w,c
  4095  001D2C  6E34               	movwf	??___ftadd& (0+255),c
  4096  001D2E  0E18               	movlw	24
  4097  001D30  6434               	cpfsgt	??___ftadd,c
  4098  001D32  D007               	goto	l1794
  4099  001D34                     l481:
  4100  001D34  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4101  001D38  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4102  001D3C  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4103  001D40  0012               	return	
  4104  001D42                     l1794:
  4105  001D42  0E06               	movlw	6
  4106  001D44  6E37               	movwf	___ftadd@sign,c
  4107  001D46  BE30               	btfsc	___ftadd@f1+2,7,c
  4108  001D48  8E37               	bsf	___ftadd@sign,7,c
  4109  001D4A  BE33               	btfsc	___ftadd@f2+2,7,c
  4110  001D4C  8C37               	bsf	___ftadd@sign,6,c
  4111  001D4E  8E2F               	bsf	___ftadd@f1+1,7,c
  4112  001D50  0EFF               	movlw	255
  4113  001D52  162E               	andwf	___ftadd@f1,f,c
  4114  001D54  0EFF               	movlw	255
  4115  001D56  162F               	andwf	___ftadd@f1+1,f,c
  4116  001D58  0E00               	movlw	0
  4117  001D5A  1630               	andwf	___ftadd@f1+2,f,c
  4118  001D5C  8E32               	bsf	___ftadd@f2+1,7,c
  4119  001D5E  0EFF               	movlw	255
  4120  001D60  1631               	andwf	___ftadd@f2,f,c
  4121  001D62  0EFF               	movlw	255
  4122  001D64  1632               	andwf	___ftadd@f2+1,f,c
  4123  001D66  0E00               	movlw	0
  4124  001D68  1633               	andwf	___ftadd@f2+2,f,c
  4125  001D6A  5038               	movf	___ftadd@exp2,w,c
  4126  001D6C  5C39               	subwf	___ftadd@exp1,w,c
  4127  001D6E  B0D8               	btfsc	status,0,c
  4128  001D70  D01B               	goto	l1820
  4129  001D72                     l1810:
  4130  001D72  90D8               	bcf	status,0,c
  4131  001D74  3631               	rlcf	___ftadd@f2,f,c
  4132  001D76  3632               	rlcf	___ftadd@f2+1,f,c
  4133  001D78  3633               	rlcf	___ftadd@f2+2,f,c
  4134  001D7A  0638               	decf	___ftadd@exp2,f,c
  4135  001D7C  5039               	movf	___ftadd@exp1,w,c
  4136  001D7E  1838               	xorwf	___ftadd@exp2,w,c
  4137  001D80  B4D8               	btfsc	status,2,c
  4138  001D82  D00D               	goto	l1818
  4139  001D84  0637               	decf	___ftadd@sign,f,c
  4140  001D86  C037  F034         	movff	___ftadd@sign,??___ftadd
  4141  001D8A  0E07               	movlw	7
  4142  001D8C  1634               	andwf	??___ftadd,f,c
  4143  001D8E  B4D8               	btfsc	status,2,c
  4144  001D90  D006               	goto	l1818
  4145  001D92  D7EF               	goto	l1810
  4146  001D94                     l1816:
  4147  001D94  90D8               	bcf	status,0,c
  4148  001D96  3230               	rrcf	___ftadd@f1+2,f,c
  4149  001D98  322F               	rrcf	___ftadd@f1+1,f,c
  4150  001D9A  322E               	rrcf	___ftadd@f1,f,c
  4151  001D9C  2A39               	incf	___ftadd@exp1,f,c
  4152  001D9E                     l1818:
  4153  001D9E  5038               	movf	___ftadd@exp2,w,c
  4154  001DA0  1839               	xorwf	___ftadd@exp1,w,c
  4155  001DA2  B4D8               	btfsc	status,2,c
  4156  001DA4  D01F               	goto	l492
  4157  001DA6  D7F6               	goto	l1816
  4158  001DA8                     l1820:
  4159  001DA8  5039               	movf	___ftadd@exp1,w,c
  4160  001DAA  5C38               	subwf	___ftadd@exp2,w,c
  4161  001DAC  B0D8               	btfsc	status,0,c
  4162  001DAE  D01A               	goto	l492
  4163  001DB0                     l1822:
  4164  001DB0  90D8               	bcf	status,0,c
  4165  001DB2  362E               	rlcf	___ftadd@f1,f,c
  4166  001DB4  362F               	rlcf	___ftadd@f1+1,f,c
  4167  001DB6  3630               	rlcf	___ftadd@f1+2,f,c
  4168  001DB8  0639               	decf	___ftadd@exp1,f,c
  4169  001DBA  5039               	movf	___ftadd@exp1,w,c
  4170  001DBC  1838               	xorwf	___ftadd@exp2,w,c
  4171  001DBE  B4D8               	btfsc	status,2,c
  4172  001DC0  D00D               	goto	l1830
  4173  001DC2  0637               	decf	___ftadd@sign,f,c
  4174  001DC4  C037  F034         	movff	___ftadd@sign,??___ftadd
  4175  001DC8  0E07               	movlw	7
  4176  001DCA  1634               	andwf	??___ftadd,f,c
  4177  001DCC  B4D8               	btfsc	status,2,c
  4178  001DCE  D006               	goto	l1830
  4179  001DD0  D7EF               	goto	l1822
  4180  001DD2                     l1828:
  4181  001DD2  90D8               	bcf	status,0,c
  4182  001DD4  3233               	rrcf	___ftadd@f2+2,f,c
  4183  001DD6  3232               	rrcf	___ftadd@f2+1,f,c
  4184  001DD8  3231               	rrcf	___ftadd@f2,f,c
  4185  001DDA  2A38               	incf	___ftadd@exp2,f,c
  4186  001DDC                     l1830:
  4187  001DDC  5038               	movf	___ftadd@exp2,w,c
  4188  001DDE  1839               	xorwf	___ftadd@exp1,w,c
  4189  001DE0  A4D8               	btfss	status,2,c
  4190  001DE2  D7F7               	goto	l1828
  4191  001DE4                     l492:
  4192  001DE4  AE37               	btfss	___ftadd@sign,7,c
  4193  001DE6  D00C               	goto	l501
  4194  001DE8  0EFF               	movlw	255
  4195  001DEA  1A2E               	xorwf	___ftadd@f1,f,c
  4196  001DEC  0EFF               	movlw	255
  4197  001DEE  1A2F               	xorwf	___ftadd@f1+1,f,c
  4198  001DF0  0EFF               	movlw	255
  4199  001DF2  1A30               	xorwf	___ftadd@f1+2,f,c
  4200  001DF4  0E01               	movlw	1
  4201  001DF6  262E               	addwf	___ftadd@f1,f,c
  4202  001DF8  0E00               	movlw	0
  4203  001DFA  222F               	addwfc	___ftadd@f1+1,f,c
  4204  001DFC  0E00               	movlw	0
  4205  001DFE  2230               	addwfc	___ftadd@f1+2,f,c
  4206  001E00                     l501:
  4207  001E00  AC37               	btfss	___ftadd@sign,6,c
  4208  001E02  D00C               	goto	l1836
  4209  001E04  0EFF               	movlw	255
  4210  001E06  1A31               	xorwf	___ftadd@f2,f,c
  4211  001E08  0EFF               	movlw	255
  4212  001E0A  1A32               	xorwf	___ftadd@f2+1,f,c
  4213  001E0C  0EFF               	movlw	255
  4214  001E0E  1A33               	xorwf	___ftadd@f2+2,f,c
  4215  001E10  0E01               	movlw	1
  4216  001E12  2631               	addwf	___ftadd@f2,f,c
  4217  001E14  0E00               	movlw	0
  4218  001E16  2232               	addwfc	___ftadd@f2+1,f,c
  4219  001E18  0E00               	movlw	0
  4220  001E1A  2233               	addwfc	___ftadd@f2+2,f,c
  4221  001E1C                     l1836:
  4222  001E1C  0E00               	movlw	0
  4223  001E1E  6E37               	movwf	___ftadd@sign,c
  4224  001E20  502E               	movf	___ftadd@f1,w,c
  4225  001E22  2631               	addwf	___ftadd@f2,f,c
  4226  001E24  502F               	movf	___ftadd@f1+1,w,c
  4227  001E26  2232               	addwfc	___ftadd@f2+1,f,c
  4228  001E28  5030               	movf	___ftadd@f1+2,w,c
  4229  001E2A  2233               	addwfc	___ftadd@f2+2,f,c
  4230  001E2C  AE33               	btfss	___ftadd@f2+2,7,c
  4231  001E2E  D00E               	goto	l1846
  4232  001E30  0EFF               	movlw	255
  4233  001E32  1A31               	xorwf	___ftadd@f2,f,c
  4234  001E34  0EFF               	movlw	255
  4235  001E36  1A32               	xorwf	___ftadd@f2+1,f,c
  4236  001E38  0EFF               	movlw	255
  4237  001E3A  1A33               	xorwf	___ftadd@f2+2,f,c
  4238  001E3C  0E01               	movlw	1
  4239  001E3E  2631               	addwf	___ftadd@f2,f,c
  4240  001E40  0E00               	movlw	0
  4241  001E42  2232               	addwfc	___ftadd@f2+1,f,c
  4242  001E44  0E00               	movlw	0
  4243  001E46  2233               	addwfc	___ftadd@f2+2,f,c
  4244  001E48  0E01               	movlw	1
  4245  001E4A  6E37               	movwf	___ftadd@sign,c
  4246  001E4C                     l1846:
  4247  001E4C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4248  001E50  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4249  001E54  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4250  001E58  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4251  001E5C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4252  001E60  EC5A  F011         	call	___ftpack	;wreg free
  4253  001E64  C001  F02E         	movff	?___ftpack,?___ftadd
  4254  001E68  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4255  001E6C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4256  001E70  0012               	return	
  4257  001E72                     __end_of___ftadd:
  4258                           	opt stack 0
  4259                           tblptru	equ	0xFF8
  4260                           tblptrh	equ	0xFF7
  4261                           tblptrl	equ	0xFF6
  4262                           tablat	equ	0xFF5
  4263                           prodh	equ	0xFF4
  4264                           prodl	equ	0xFF3
  4265                           wreg	equ	0xFE8
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function ___ftneg *****************
  4274 ;; Defined at:
  4275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  f1              3    0[COMRAM] float 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  3    0[COMRAM] float 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:        3 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_sprintf
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text17
  4303  002896                     __ptext17:
  4304                           	opt stack 0
  4305  002896                     ___ftneg:
  4306                           	opt stack 29
  4307                           
  4308                           ;incstack = 0
  4309  002896  5001               	movf	___ftneg@f1,w,c
  4310  002898  1002               	iorwf	___ftneg@f1+1,w,c
  4311  00289A  1003               	iorwf	___ftneg@f1+2,w,c
  4312  00289C  B4D8               	btfsc	status,2,c
  4313  00289E  D006               	goto	l551
  4314  0028A0  0E00               	movlw	0
  4315  0028A2  1A01               	xorwf	___ftneg@f1,f,c
  4316  0028A4  0E00               	movlw	0
  4317  0028A6  1A02               	xorwf	___ftneg@f1+1,f,c
  4318  0028A8  0E80               	movlw	128
  4319  0028AA  1A03               	xorwf	___ftneg@f1+2,f,c
  4320  0028AC                     l551:
  4321  0028AC  C001  F001         	movff	___ftneg@f1,?___ftneg
  4322  0028B0  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4323  0028B4  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4324  0028B8  0012               	return		;funcret
  4325  0028BA                     __end_of___ftneg:
  4326                           	opt stack 0
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           wreg	equ	0xFE8
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function ___ftge *****************
  4342 ;; Defined at:
  4343 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  ff1             3    0[COMRAM] float 
  4346 ;;  ff2             3    3[COMRAM] float 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;		None               void
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4358 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;Total ram usage:        9 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_sprintf
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text18
  4372  0023F8                     __ptext18:
  4373                           	opt stack 0
  4374  0023F8                     ___ftge:
  4375                           	opt stack 29
  4376                           
  4377                           ;incstack = 0
  4378  0023F8  AE03               	btfss	___ftge@ff1+2,7,c
  4379  0023FA  D016               	goto	l2166
  4380  0023FC  C001  F007         	movff	___ftge@ff1,??___ftge
  4381  002400  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4382  002404  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4383  002408  1E07               	comf	??___ftge,f,c
  4384  00240A  1E08               	comf	??___ftge+1,f,c
  4385  00240C  1E09               	comf	??___ftge+2,f,c
  4386  00240E  2A07               	incf	??___ftge,f,c
  4387  002410  0E00               	movlw	0
  4388  002412  2208               	addwfc	??___ftge+1,f,c
  4389  002414  2209               	addwfc	??___ftge+2,f,c
  4390  002416  0E00               	movlw	0
  4391  002418  2407               	addwf	??___ftge,w,c
  4392  00241A  6E01               	movwf	___ftge@ff1,c
  4393  00241C  0E00               	movlw	0
  4394  00241E  2008               	addwfc	??___ftge+1,w,c
  4395  002420  6E02               	movwf	___ftge@ff1+1,c
  4396  002422  0E80               	movlw	128
  4397  002424  2009               	addwfc	??___ftge+2,w,c
  4398  002426  6E03               	movwf	___ftge@ff1+2,c
  4399  002428                     l2166:
  4400  002428  AE06               	btfss	___ftge@ff2+2,7,c
  4401  00242A  D016               	goto	l2170
  4402  00242C  C004  F007         	movff	___ftge@ff2,??___ftge
  4403  002430  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4404  002434  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4405  002438  1E07               	comf	??___ftge,f,c
  4406  00243A  1E08               	comf	??___ftge+1,f,c
  4407  00243C  1E09               	comf	??___ftge+2,f,c
  4408  00243E  2A07               	incf	??___ftge,f,c
  4409  002440  0E00               	movlw	0
  4410  002442  2208               	addwfc	??___ftge+1,f,c
  4411  002444  2209               	addwfc	??___ftge+2,f,c
  4412  002446  0E00               	movlw	0
  4413  002448  2407               	addwf	??___ftge,w,c
  4414  00244A  6E04               	movwf	___ftge@ff2,c
  4415  00244C  0E00               	movlw	0
  4416  00244E  2008               	addwfc	??___ftge+1,w,c
  4417  002450  6E05               	movwf	___ftge@ff2+1,c
  4418  002452  0E80               	movlw	128
  4419  002454  2009               	addwfc	??___ftge+2,w,c
  4420  002456  6E06               	movwf	___ftge@ff2+2,c
  4421  002458                     l2170:
  4422  002458  0E00               	movlw	0
  4423  00245A  1A01               	xorwf	___ftge@ff1,f,c
  4424  00245C  0E00               	movlw	0
  4425  00245E  1A02               	xorwf	___ftge@ff1+1,f,c
  4426  002460  0E80               	movlw	128
  4427  002462  1A03               	xorwf	___ftge@ff1+2,f,c
  4428  002464  0E00               	movlw	0
  4429  002466  1A04               	xorwf	___ftge@ff2,f,c
  4430  002468  0E00               	movlw	0
  4431  00246A  1A05               	xorwf	___ftge@ff2+1,f,c
  4432  00246C  0E80               	movlw	128
  4433  00246E  1A06               	xorwf	___ftge@ff2+2,f,c
  4434  002470  5004               	movf	___ftge@ff2,w,c
  4435  002472  5C01               	subwf	___ftge@ff1,w,c
  4436  002474  5005               	movf	___ftge@ff2+1,w,c
  4437  002476  5802               	subwfb	___ftge@ff1+1,w,c
  4438  002478  5006               	movf	___ftge@ff2+2,w,c
  4439  00247A  5803               	subwfb	___ftge@ff1+2,w,c
  4440  00247C  B0D8               	btfsc	status,0,c
  4441  00247E  D002               	goto	l2176
  4442  002480  90D8               	bcf	status,0,c
  4443  002482  0012               	return	
  4444  002484                     l2176:
  4445  002484  80D8               	bsf	status,0,c
  4446  002486  0012               	return	
  4447  002488                     __end_of___ftge:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           wreg	equ	0xFE8
  4456                           indf2	equ	0xFDF
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function ___awtoft *****************
  4464 ;; Defined at:
  4465 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  c               2    8[COMRAM] int 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  sign            1   11[COMRAM] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  3    8[COMRAM] float 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4479 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;Total ram usage:        4 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    1
  4486 ;; This function calls:
  4487 ;;		___ftpack
  4488 ;; This function is called by:
  4489 ;;		_main
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text19
  4494  002838                     __ptext19:
  4495                           	opt stack 0
  4496  002838                     ___awtoft:
  4497                           	opt stack 29
  4498                           
  4499                           ;incstack = 0
  4500  002838  0E00               	movlw	0
  4501  00283A  6E0C               	movwf	___awtoft@sign,c
  4502  00283C  AE0A               	btfss	___awtoft@c+1,7,c
  4503  00283E  D006               	goto	l2544
  4504  002840  6C09               	negf	___awtoft@c,c
  4505  002842  1E0A               	comf	___awtoft@c+1,f,c
  4506  002844  B0D8               	btfsc	status,0,c
  4507  002846  2A0A               	incf	___awtoft@c+1,f,c
  4508  002848  0E01               	movlw	1
  4509  00284A  6E0C               	movwf	___awtoft@sign,c
  4510  00284C                     l2544:
  4511  00284C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4512  002850  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4513  002854  6A03               	clrf	___ftpack@arg+2,c
  4514  002856  0E8E               	movlw	142
  4515  002858  6E04               	movwf	___ftpack@exp,c
  4516  00285A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4517  00285E  EC5A  F011         	call	___ftpack	;wreg free
  4518  002862  C001  F009         	movff	?___ftpack,?___awtoft
  4519  002866  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4520  00286A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4521  00286E  0012               	return	
  4522  002870                     __end_of___awtoft:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           wreg	equ	0xFE8
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function ___ftpack *****************
  4539 ;; Defined at:
  4540 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  arg             3    0[COMRAM] unsigned um
  4543 ;;  exp             1    3[COMRAM] unsigned char 
  4544 ;;  sign            1    4[COMRAM] unsigned char 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  3    0[COMRAM] float 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4556 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;Total ram usage:        8 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		___awtoft
  4566 ;;		___ftadd
  4567 ;;		___ftmul
  4568 ;;		___lltoft
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text20
  4573  0022B4                     __ptext20:
  4574                           	opt stack 0
  4575  0022B4                     ___ftpack:
  4576                           	opt stack 27
  4577                           
  4578                           ;incstack = 0
  4579  0022B4  5004               	movf	___ftpack@exp,w,c
  4580  0022B6  B4D8               	btfsc	status,2,c
  4581  0022B8  D005               	goto	l1742
  4582  0022BA  5001               	movf	___ftpack@arg,w,c
  4583  0022BC  1002               	iorwf	___ftpack@arg+1,w,c
  4584  0022BE  1003               	iorwf	___ftpack@arg+2,w,c
  4585  0022C0  A4D8               	btfss	status,2,c
  4586  0022C2  D00C               	goto	l1748
  4587  0022C4                     l1742:
  4588  0022C4  0E00               	movlw	0
  4589  0022C6  6E01               	movwf	?___ftpack,c
  4590  0022C8  0E00               	movlw	0
  4591  0022CA  6E02               	movwf	?___ftpack+1,c
  4592  0022CC  0E00               	movlw	0
  4593  0022CE  6E03               	movwf	?___ftpack+2,c
  4594  0022D0  0012               	return	
  4595  0022D2                     l1746:
  4596  0022D2  2A04               	incf	___ftpack@exp,f,c
  4597  0022D4  90D8               	bcf	status,0,c
  4598  0022D6  3203               	rrcf	___ftpack@arg+2,f,c
  4599  0022D8  3202               	rrcf	___ftpack@arg+1,f,c
  4600  0022DA  3201               	rrcf	___ftpack@arg,f,c
  4601  0022DC                     l1748:
  4602  0022DC  0E00               	movlw	0
  4603  0022DE  1401               	andwf	___ftpack@arg,w,c
  4604  0022E0  6E06               	movwf	??___ftpack& (0+255),c
  4605  0022E2  0E00               	movlw	0
  4606  0022E4  1402               	andwf	___ftpack@arg+1,w,c
  4607  0022E6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4608  0022E8  0EFE               	movlw	254
  4609  0022EA  1403               	andwf	___ftpack@arg+2,w,c
  4610  0022EC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4611  0022EE  5006               	movf	??___ftpack,w,c
  4612  0022F0  1007               	iorwf	??___ftpack+1,w,c
  4613  0022F2  1008               	iorwf	??___ftpack+2,w,c
  4614  0022F4  B4D8               	btfsc	status,2,c
  4615  0022F6  D00C               	goto	l1754
  4616  0022F8  D7EC               	goto	l1746
  4617  0022FA                     l1750:
  4618  0022FA  2A04               	incf	___ftpack@exp,f,c
  4619  0022FC  0E01               	movlw	1
  4620  0022FE  2601               	addwf	___ftpack@arg,f,c
  4621  002300  0E00               	movlw	0
  4622  002302  2202               	addwfc	___ftpack@arg+1,f,c
  4623  002304  0E00               	movlw	0
  4624  002306  2203               	addwfc	___ftpack@arg+2,f,c
  4625  002308  90D8               	bcf	status,0,c
  4626  00230A  3203               	rrcf	___ftpack@arg+2,f,c
  4627  00230C  3202               	rrcf	___ftpack@arg+1,f,c
  4628  00230E  3201               	rrcf	___ftpack@arg,f,c
  4629  002310                     l1754:
  4630  002310  0E00               	movlw	0
  4631  002312  1401               	andwf	___ftpack@arg,w,c
  4632  002314  6E06               	movwf	??___ftpack& (0+255),c
  4633  002316  0E00               	movlw	0
  4634  002318  1402               	andwf	___ftpack@arg+1,w,c
  4635  00231A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4636  00231C  0EFF               	movlw	255
  4637  00231E  1403               	andwf	___ftpack@arg+2,w,c
  4638  002320  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4639  002322  5006               	movf	??___ftpack,w,c
  4640  002324  1007               	iorwf	??___ftpack+1,w,c
  4641  002326  1008               	iorwf	??___ftpack+2,w,c
  4642  002328  B4D8               	btfsc	status,2,c
  4643  00232A  D006               	goto	l1758
  4644  00232C  D7E6               	goto	l1750
  4645  00232E                     l1756:
  4646  00232E  0604               	decf	___ftpack@exp,f,c
  4647  002330  90D8               	bcf	status,0,c
  4648  002332  3601               	rlcf	___ftpack@arg,f,c
  4649  002334  3602               	rlcf	___ftpack@arg+1,f,c
  4650  002336  3603               	rlcf	___ftpack@arg+2,f,c
  4651  002338                     l1758:
  4652  002338  BE02               	btfsc	___ftpack@arg+1,7,c
  4653  00233A  D003               	goto	l454
  4654  00233C  0E02               	movlw	2
  4655  00233E  6004               	cpfslt	___ftpack@exp,c
  4656  002340  D7F6               	goto	l1756
  4657  002342                     l454:
  4658  002342  A004               	btfss	___ftpack@exp,0,c
  4659  002344  9E02               	bcf	___ftpack@arg+1,7,c
  4660  002346  90D8               	bcf	status,0,c
  4661  002348  3204               	rrcf	___ftpack@exp,f,c
  4662  00234A  5004               	movf	___ftpack@exp,w,c
  4663  00234C  1203               	iorwf	___ftpack@arg+2,f,c
  4664  00234E  5005               	movf	___ftpack@sign,w,c
  4665  002350  A4D8               	btfss	status,2,c
  4666  002352  8E03               	bsf	___ftpack@arg+2,7,c
  4667  002354  C001  F001         	movff	___ftpack@arg,?___ftpack
  4668  002358  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4669  00235C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4670  002360  0012               	return	
  4671  002362                     __end_of___ftpack:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           wreg	equ	0xFE8
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _USARTOut *****************
  4688 ;; Defined at:
  4689 ;;		line 61 in file "motion.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  data            2    6[COMRAM] PTR unsigned char 
  4692 ;;		 -> main@str(0), 
  4693 ;;  bytes           1    8[COMRAM] unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  i               2   12[COMRAM] int 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;		None               void
  4698 ;; Registers used:
  4699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4705 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;Total ram usage:        8 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    1
  4712 ;; This function calls:
  4713 ;;		_WriteUSART
  4714 ;; This function is called by:
  4715 ;;		_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text21
  4720  0027BE                     __ptext21:
  4721                           	opt stack 0
  4722  0027BE                     _USARTOut:
  4723                           	opt stack 29
  4724                           
  4725                           ;motion.c: 63: int i;
  4726                           ;motion.c: 64: for(i=0;i<bytes;i++)
  4727                           
  4728                           ;incstack = 0
  4729  0027BE  0E00               	movlw	0
  4730  0027C0  6E0E               	movwf	USARTOut@i+1,c
  4731  0027C2  0E00               	movlw	0
  4732  0027C4  6E0D               	movwf	USARTOut@i,c
  4733  0027C6  D00D               	goto	l2284
  4734  0027C8                     l27:
  4735  0027C8  A2AC               	btfss	4012,1,c	;volatile
  4736  0027CA  D7FE               	goto	l27
  4737                           
  4738                           ;motion.c: 67: WriteUSART(data[i]);
  4739  0027CC  500D               	movf	USARTOut@i,w,c
  4740  0027CE  2407               	addwf	USARTOut@data,w,c
  4741  0027D0  6ED9               	movwf	fsr2l,c
  4742  0027D2  500E               	movf	USARTOut@i+1,w,c
  4743  0027D4  2008               	addwfc	USARTOut@data+1,w,c
  4744  0027D6  6EDA               	movwf	fsr2h,c
  4745  0027D8  50DF               	movf	indf2,w,c
  4746  0027DA  EC73  F014         	call	_WriteUSART
  4747  0027DE  4A0D               	infsnz	USARTOut@i,f,c
  4748  0027E0  2A0E               	incf	USARTOut@i+1,f,c
  4749  0027E2                     l2284:
  4750  0027E2  5009               	movf	USARTOut@bytes,w,c
  4751  0027E4  6E0A               	movwf	??_USARTOut& (0+255),c
  4752  0027E6  6A0B               	clrf	(??_USARTOut+1)& (0+255),c
  4753  0027E8  500A               	movf	??_USARTOut,w,c
  4754  0027EA  5C0D               	subwf	USARTOut@i,w,c
  4755  0027EC  500E               	movf	USARTOut@i+1,w,c
  4756  0027EE  0A80               	xorlw	128
  4757  0027F0  6E0C               	movwf	(??_USARTOut+2)& (0+255),c
  4758  0027F2  500B               	movf	??_USARTOut+1,w,c
  4759  0027F4  0A80               	xorlw	128
  4760  0027F6  580C               	subwfb	(??_USARTOut+2)& (0+255),w,c
  4761  0027F8  B0D8               	btfsc	status,0,c
  4762  0027FA  0012               	return	
  4763  0027FC  D7E5               	goto	l27
  4764  0027FE                     __end_of_USARTOut:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           wreg	equ	0xFE8
  4773                           indf2	equ	0xFDF
  4774                           postinc2	equ	0xFDE
  4775                           postdec2	equ	0xFDD
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _WriteUSART *****************
  4781 ;; Defined at:
  4782 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uwrite.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  data            1    wreg     unsigned char 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  data            1    0[COMRAM] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;		None               void
  4789 ;; Registers used:
  4790 ;;		wreg
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;Total ram usage:        1 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_USARTOut
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text22
  4810  0028E6                     __ptext22:
  4811                           	opt stack 0
  4812  0028E6                     _WriteUSART:
  4813                           	opt stack 29
  4814                           
  4815                           ;incstack = 0
  4816                           ;WriteUSART@data stored from wreg
  4817  0028E6  6E01               	movwf	WriteUSART@data,c
  4818  0028E8  ACAC               	btfss	4012,6,c	;volatile
  4819  0028EA  D003               	goto	l1130
  4820  0028EC  90AC               	bcf	4012,0,c	;volatile
  4821  0028EE  B267               	btfsc	_USART_Status,1,c
  4822  0028F0  80AC               	bsf	4012,0,c	;volatile
  4823  0028F2                     l1130:
  4824  0028F2  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  4825  0028F6  0012               	return		;funcret
  4826  0028F8                     __end_of_WriteUSART:
  4827                           	opt stack 0
  4828                           tblptru	equ	0xFF8
  4829                           tblptrh	equ	0xFF7
  4830                           tblptrl	equ	0xFF6
  4831                           tablat	equ	0xFF5
  4832                           prodh	equ	0xFF4
  4833                           prodl	equ	0xFF3
  4834                           wreg	equ	0xFE8
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _SetChanADC *****************
  4843 ;; Defined at:
  4844 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcsetch.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  channel         1    wreg     unsigned char 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  channel         1    1[COMRAM] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;		None               void
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        2 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_main
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text23
  4872  0028BA                     __ptext23:
  4873                           	opt stack 0
  4874  0028BA                     _SetChanADC:
  4875                           	opt stack 30
  4876                           
  4877                           ;incstack = 0
  4878                           ;SetChanADC@channel stored from wreg
  4879  0028BA  6E02               	movwf	SetChanADC@channel,c
  4880  0028BC  CFC2 F001          	movff	4034,??_SetChanADC	;volatile
  4881  0028C0  0EC3               	movlw	195
  4882  0028C2  1601               	andwf	??_SetChanADC,f,c
  4883  0028C4  90D8               	bcf	status,0,c
  4884  0028C6  3002               	rrcf	SetChanADC@channel,w,c
  4885  0028C8  0B3C               	andlw	60
  4886  0028CA  1001               	iorwf	??_SetChanADC,w,c
  4887  0028CC  6EC2               	movwf	4034,c	;volatile
  4888  0028CE  0012               	return		;funcret
  4889  0028D0                     __end_of_SetChanADC:
  4890                           	opt stack 0
  4891                           tblptru	equ	0xFF8
  4892                           tblptrh	equ	0xFF7
  4893                           tblptrl	equ	0xFF6
  4894                           tablat	equ	0xFF5
  4895                           prodh	equ	0xFF4
  4896                           prodl	equ	0xFF3
  4897                           wreg	equ	0xFE8
  4898                           indf2	equ	0xFDF
  4899                           postinc2	equ	0xFDE
  4900                           postdec2	equ	0xFDD
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905 ;; *************** function _ReadADC *****************
  4906 ;; Defined at:
  4907 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcread.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;		None
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;		None
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  2    0[COMRAM] int 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;Total ram usage:        4 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_main
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text24
  4935  0028F8                     __ptext24:
  4936                           	opt stack 0
  4937  0028F8                     _ReadADC:
  4938                           	opt stack 30
  4939                           
  4940                           ;incstack = 0
  4941  0028F8  50C4               	movf	4036,w,c	;volatile
  4942  0028FA  6E03               	movwf	??_ReadADC& (0+255),c
  4943  0028FC  50C3               	movf	4035,w,c	;volatile
  4944  0028FE  6E01               	movwf	?_ReadADC,c
  4945  002900  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  4946  002904  0012               	return	
  4947  002906                     __end_of_ReadADC:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           wreg	equ	0xFE8
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           postdec2	equ	0xFDD
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _OpenUSART *****************
  4964 ;; Defined at:
  4965 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uopen.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  config          1    wreg     unsigned char 
  4968 ;;  spbrg           2    0[COMRAM] unsigned int 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  config          1    2[COMRAM] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;		None               void
  4973 ;; Registers used:
  4974 ;;		wreg, status,2
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        3 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_main
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text25
  4994  002664                     __ptext25:
  4995                           	opt stack 0
  4996  002664                     _OpenUSART:
  4997                           	opt stack 30
  4998                           
  4999                           ;incstack = 0
  5000                           ;OpenUSART@config stored from wreg
  5001  002664  6E03               	movwf	OpenUSART@config,c
  5002  002666  0E00               	movlw	0
  5003  002668  6EAC               	movwf	4012,c	;volatile
  5004  00266A  0E00               	movlw	0
  5005  00266C  6EAB               	movwf	4011,c	;volatile
  5006  00266E  B003               	btfsc	OpenUSART@config,0,c
  5007  002670  88AC               	bsf	4012,4,c	;volatile
  5008  002672  A203               	btfss	OpenUSART@config,1,c
  5009  002674  D002               	goto	l2308
  5010  002676  8CAC               	bsf	4012,6,c	;volatile
  5011  002678  8CAB               	bsf	4011,6,c	;volatile
  5012  00267A                     l2308:
  5013  00267A  B403               	btfsc	OpenUSART@config,2,c
  5014  00267C  8EAC               	bsf	4012,7,c	;volatile
  5015  00267E  A603               	btfss	OpenUSART@config,3,c
  5016  002680  D002               	goto	l185
  5017  002682  88AB               	bsf	4011,4,c	;volatile
  5018  002684  D001               	goto	l2316
  5019  002686                     l185:
  5020  002686  8AAB               	bsf	4011,5,c	;volatile
  5021  002688                     l2316:
  5022  002688  B803               	btfsc	OpenUSART@config,4,c
  5023  00268A  84AC               	bsf	4012,2,c	;volatile
  5024  00268C  989E               	bcf	3998,4,c	;volatile
  5025  00268E  BA03               	btfsc	OpenUSART@config,5,c
  5026  002690  86AB               	bsf	4011,3,c	;volatile
  5027  002692  AC03               	btfss	OpenUSART@config,6,c
  5028  002694  D002               	goto	l189
  5029  002696  8A9D               	bsf	3997,5,c	;volatile
  5030  002698  D001               	goto	l190
  5031  00269A                     l189:
  5032  00269A  9A9D               	bcf	3997,5,c	;volatile
  5033  00269C                     l190:
  5034  00269C  9A9E               	bcf	3998,5,c	;volatile
  5035  00269E  AE03               	btfss	OpenUSART@config,7,c
  5036  0026A0  D002               	goto	l191
  5037  0026A2  889D               	bsf	3997,4,c	;volatile
  5038  0026A4  D001               	goto	l192
  5039  0026A6                     l191:
  5040  0026A6  989D               	bcf	3997,4,c	;volatile
  5041  0026A8                     l192:
  5042  0026A8  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5043  0026AC  5002               	movf	OpenUSART@spbrg+1,w,c
  5044  0026AE  6EB0               	movwf	4016,c	;volatile
  5045  0026B0  8AAC               	bsf	4012,5,c	;volatile
  5046  0026B2  8EAB               	bsf	4011,7,c	;volatile
  5047  0026B4  9C94               	bcf	3988,6,c	;volatile
  5048  0026B6  8E94               	bsf	3988,7,c	;volatile
  5049  0026B8  A8AC               	btfss	4012,4,c	;volatile
  5050  0026BA  0012               	return	
  5051  0026BC  BEAC               	btfsc	4012,7,c	;volatile
  5052  0026BE  0012               	return	
  5053  0026C0  8C94               	bsf	3988,6,c	;volatile
  5054  0026C2  0012               	return	
  5055  0026C4                     __end_of_OpenUSART:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           wreg	equ	0xFE8
  5064                           indf2	equ	0xFDF
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _OpenADC *****************
  5072 ;; Defined at:
  5073 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcopen.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  config          1    wreg     unsigned char 
  5076 ;;  config2         1    0[COMRAM] unsigned char 
  5077 ;;  portconfig      1    1[COMRAM] unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  config          1    4[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;		None               void
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        5 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_main
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text26
  5103  0026C4                     __ptext26:
  5104                           	opt stack 0
  5105  0026C4                     _OpenADC:
  5106                           	opt stack 30
  5107                           
  5108                           ;incstack = 0
  5109                           ;OpenADC@config stored from wreg
  5110  0026C4  6E05               	movwf	OpenADC@config,c
  5111  0026C6  0E00               	movlw	0
  5112  0026C8  6EC2               	movwf	4034,c	;volatile
  5113  0026CA  0E00               	movlw	0
  5114  0026CC  6EC0               	movwf	4032,c	;volatile
  5115  0026CE  90D8               	bcf	status,0,c
  5116  0026D0  3001               	rrcf	OpenADC@config2,w,c
  5117  0026D2  0B3C               	andlw	60
  5118  0026D4  6EC2               	movwf	4034,c	;volatile
  5119  0026D6  C001  F003         	movff	OpenADC@config2,??_OpenADC
  5120  0026DA  3A03               	swapf	??_OpenADC,f,c
  5121  0026DC  0EF0               	movlw	240
  5122  0026DE  1603               	andwf	??_OpenADC,f,c
  5123  0026E0  0E30               	movlw	48
  5124  0026E2  1603               	andwf	??_OpenADC,f,c
  5125  0026E4  5002               	movf	OpenADC@portconfig,w,c
  5126  0026E6  0B0F               	andlw	15
  5127  0026E8  1003               	iorwf	??_OpenADC,w,c
  5128  0026EA  6EC1               	movwf	4033,c	;volatile
  5129  0026EC  C005  F003         	movff	OpenADC@config,??_OpenADC
  5130  0026F0  90D8               	bcf	status,0,c
  5131  0026F2  3603               	rlcf	??_OpenADC,f,c
  5132  0026F4  90D8               	bcf	status,0,c
  5133  0026F6  3603               	rlcf	??_OpenADC,f,c
  5134  0026F8  0E38               	movlw	56
  5135  0026FA  1603               	andwf	??_OpenADC,f,c
  5136  0026FC  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  5137  002700  3A04               	swapf	??_OpenADC+1,f,c
  5138  002702  0E0F               	movlw	15
  5139  002704  1604               	andwf	??_OpenADC+1,f,c
  5140  002706  0E07               	movlw	7
  5141  002708  1604               	andwf	??_OpenADC+1,f,c
  5142  00270A  5005               	movf	OpenADC@config,w,c
  5143  00270C  0B80               	andlw	128
  5144  00270E  1004               	iorwf	??_OpenADC+1,w,c
  5145  002710  1003               	iorwf	??_OpenADC,w,c
  5146  002712  6EC0               	movwf	4032,c	;volatile
  5147  002714  AE01               	btfss	OpenADC@config2,7,c
  5148  002716  D003               	goto	l148
  5149  002718  9C9E               	bcf	3998,6,c	;volatile
  5150  00271A  8C9D               	bsf	3997,6,c	;volatile
  5151  00271C  8CF2               	bsf	intcon,6,c	;volatile
  5152  00271E                     l148:
  5153  00271E  80C2               	bsf	4034,0,c	;volatile
  5154  002720  0012               	return		;funcret
  5155  002722                     __end_of_OpenADC:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           intcon	equ	0xFF2
  5164                           wreg	equ	0xFE8
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _Delay10KTCYx *****************
  5173 ;; Defined at:
  5174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\d10ktcyx.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  unit            1    wreg     unsigned char 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  unit            1    1[COMRAM] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;		None               void
  5181 ;; Registers used:
  5182 ;;		wreg
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        2 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text27
  5202  0028D0                     __ptext27:
  5203                           	opt stack 0
  5204  0028D0                     _Delay10KTCYx:
  5205                           	opt stack 30
  5206                           
  5207                           ;incstack = 0
  5208                           ;Delay10KTCYx@unit stored from wreg
  5209  0028D0  6E02               	movwf	Delay10KTCYx@unit,c
  5210  0028D2  0E0D               	movlw	13
  5211  0028D4  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  5212  0028D6  0EFC               	movlw	252
  5213  0028D8                     u2687:
  5214  0028D8  2EE8               	decfsz	wreg,f,c
  5215  0028DA  D7FE               	goto	u2687
  5216  0028DC  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  5217  0028DE  D7FC               	goto	u2687
  5218  0028E0  2E02               	decfsz	Delay10KTCYx@unit,f,c
  5219  0028E2  D7F7               	goto	l1504
  5220  0028E4  0012               	return	
  5221  0028E6                     __end_of_Delay10KTCYx:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           wreg	equ	0xFE8
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function _ConvertADC *****************
  5239 ;; Defined at:
  5240 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcconv.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		None
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_main
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text28
  5268  00291E                     __ptext28:
  5269                           	opt stack 0
  5270  00291E                     _ConvertADC:
  5271                           	opt stack 30
  5272                           
  5273                           ;incstack = 0
  5274  00291E  82C2               	bsf	4034,1,c	;volatile
  5275  002920  0012               	return		;funcret
  5276  002922                     __end_of_ConvertADC:
  5277                           	opt stack 0
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           wreg	equ	0xFE8
  5286                           indf2	equ	0xFDF
  5287                           postinc2	equ	0xFDE
  5288                           postdec2	equ	0xFDD
  5289                           fsr2h	equ	0xFDA
  5290                           fsr2l	equ	0xFD9
  5291                           status	equ	0xFD8
  5292                           
  5293 ;; *************** function _BusyADC *****************
  5294 ;; Defined at:
  5295 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\ADC\adcbusy.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      unsigned char 
  5302 ;; Registers used:
  5303 ;;		wreg
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;Total ram usage:        0 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_main
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text29
  5323  002912                     __ptext29:
  5324                           	opt stack 0
  5325  002912                     _BusyADC:
  5326                           	opt stack 30
  5327                           
  5328                           ;incstack = 0
  5329  002912  A2C2               	btfss	4034,1,c	;volatile
  5330  002914  D002               	goto	u1060
  5331  002916  0E01               	movlw	1
  5332  002918  0012               	return	
  5333  00291A                     u1060:
  5334  00291A  0E00               	movlw	0
  5335  00291C  0012               	return	
  5336  00291E                     __end_of_BusyADC:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon	equ	0xFF2
  5345                           wreg	equ	0xFE8
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           wreg	equ	0xFE8
  5360                           indf2	equ	0xFDF
  5361                           postinc2	equ	0xFDE
  5362                           postdec2	equ	0xFDD
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367                           	psect	rparam
  5368  0000                     tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           wreg	equ	0xFE8
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8


Data Sizes:
    Strings     4
    Constant    118
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    102     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 0
		 -> main@str(COMRAM[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 0
		 -> main@str(COMRAM[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> main@str(COMRAM[0]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    USARTOut@data	PTR unsigned char  size(2) Largest target is 0
		 -> main@str(COMRAM[0]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _USARTOut->_strlen

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   45020
                                             99 COMRAM     3     3      0
                            _BusyADC
                         _ConvertADC
                       _Delay10KTCYx
                            _OpenADC
                          _OpenUSART
                            _ReadADC
                         _SetChanADC
                           _USARTOut
                           ___awtoft
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   41703
                                             63 COMRAM    36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10014
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    9816
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2207
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4290
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2203
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3565
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3268
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2225
                                              8 COMRAM     4     1      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _USARTOut                                             8     5      3     233
                                              6 COMRAM     8     5      3
                         _WriteUSART
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetChanADC                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              5     3      2     282
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Delay10KTCYx                                         2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _Delay10KTCYx
   _OpenADC
   _OpenUSART
   _ReadADC
   _SetChanADC
   _USARTOut
     _WriteUSART
     _strlen (ARG)
   ___awtoft
     _ReadADC (ARG)
     ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     66      67       1       81.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      34        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Nov 15 14:17:30 2022

                     l27 27C8             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
           ___ftadd@exp1 0039             ___ftadd@exp2 0038             ___ftadd@sign 0037  
                    l110 14C8                      l148 271E                      l501 1E00  
                    l190 269C                      l422 20BA                      l191 26A6  
                    l192 26A8                      l520 1F2C                      l185 2686  
                    l189 269A                      l454 2342                      l606 2652  
                    l526 1F92                      l551 28AC                      l519 1F04  
                    l481 1D34                      l492 1DE4                      l477 1D0A  
                    l596 257C             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
           ___awmod@sign 0006                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1130 28F2                     l2010 17C4  
                   l2100 1FC2                     l2020 188C                     l2120 2022  
                   l2016 1868                     l2106 1FE0                     l2050 1ECA  
                   l2034 1A5C                     l2220 2286                     l2212 2262  
                   l2140 2080                     l2044 1E9E                     l2028 19B8  
                   l2222 228C                     l2150 20A8                     l1504 28D2  
                   l2208 2252                     l2240 253E                     l2152 20B4  
                   l2144 2090                     l2128 2052                     l2080 1F58  
                   l2170 2458                     l2226 22A2                     l2218 227A  
                   l2090 1F80                     l2410 1234                     l2316 2688  
                   l2308 267A                     l2236 252E                     l2260 2620  
                   l2092 1F8C                     l2084 1F68                     l2412 1244  
                   l2166 2428                     l2158 2794                     l2190 21EC  
                   l2238 253A                     l2270 2728                     l2422 12B6  
                   l2414 1272                     l2406 1210                     l2176 2484  
                   l2248 256E                     l2264 2644                     l2256 2610  
                   l2272 2734                     l2512 163C                     l2504 161C  
                   l2440 1392                     l2416 1282                     l2360 109C  
                   l2520 166A                     l1810 1D72                     l2258 261C  
                   l2506 1626                     l2442 1396                     l2426 12DA  
                   l2514 1646                     l2362 10A6                     l2522 1682  
                   l2354 1086                     l2530 280C                     l2284 27E2  
                   l1820 1DA8                     l2460 13F4                     l2436 132E  
                   l1750 22FA                     l1742 22C4                     l1830 1DDC  
                   l1822 1DB0                     l2518 1666                     l2470 148E  
                   l2454 13CE                     l2382 111C                     l2366 10AA  
                   l2544 284C                     l1816 1D94                     l1920 24CA  
                   l1912 24AC                     l2368 10CC                     l2528 2808  
                   l2552 237E                     l1754 2310                     l1746 22D2  
                   l1818 1D9E                     l1930 24EA                     l1922 24CE  
                   l1906 249C                     l2490 14EE                     l2482 14CC  
                   l2458 13EE                     l1756 232E                     l1748 22DC  
                   l1836 1E1C                     l1828 1DD2                     l2476 14A4  
                   l2468 1484                     l1758 2338                     l1846 1E4C  
                   l1918 24C2                     l1934 24F4                     l1950 25A2  
                   l1862 211C                     l2494 153E                     l2478 14B2  
                   l2398 11AC                     l2558 238E                     l1960 25C4  
                   l1880 215E                     l1856 20F4                     l1794 1D42  
                   l1938 2502                     l1962 25C8                     l1970 25E6  
                   l1954 25AE                     l1890 2186                     l1788 1D18  
                   l1876 214E                     l1974 25F4                     l1966 25DC  
                   l1958 25BC                     l1886 2176                     l1996 1C86  
                   l1988 1BC6                     STR_1 1077                     u1060 291A  
                   u2111 21D0                     u2130 220A                     u2135 2202  
                   u1441 1CD6                     u1451 1CEA                     u2430 1154  
                   u1651 20DC                     u2435 114A                     u1901 1E82  
                   u1671 2104                     u1921 1EAE                     u2590 14C2  
                   u2687 28D8                     _main 2362             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000             _sprintf$1441 004D  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022             ___param_bank 000010  
           ___ftmul@sign 0023          __end_of_BusyADC 291E          __end_of_ReadADC 2906  
        __end_of_OpenADC 2722             ___fttol@exp1 0039             ___fttol@lval 0035  
                  ?_main 0001          __end_of___awdiv 250C          __end_of___ftadd 1E72  
        __end_of___awmod 25FE          __end_of___ftneg 28BA          __end_of___lldiv 258E  
        __end_of___ftmul 21C0          ___awdiv@divisor 0009          __end_of___llmod 2664  
        __end_of___ftsub 27BE          __end_of___fttol 22B4          ___awdiv@counter 000B  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
  __size_of_Delay10KTCYx 0016                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000             ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 000C  
        __end_of_dpowers 1029                    _scale 1690            ___ftpack@sign 0005  
       __end_of_USARTOut 27FE               _ConvertADC 291E             USARTOut@data 0007  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 1690  
         __CFG_PBADEN$ON 000000           WriteUSART@data 0001          __initialization 2906  
           __end_of_main 23F8             _Delay10KTCYx 28D0                   ??_main 0064  
          ___fttol@sign1 0034            __activetblptr 000002               _SetChanADC 28BA  
   __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 0001                   ?_scale 0024  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0007  
       __end_of___awtoft 2870         __end_of___ftpack 2362         __end_of___lltoft 277E  
                 _SPBRGH 000FB0                ??_BusyADC 0001                ??_ReadADC 0003  
              ??_OpenADC 0003           __CFG_XINST$OFF 000000         __end_of__powers_ 1077  
     __size_of_OpenUSART 0060                   ___ftge 23F8                   ___wmul 2870  
              ??___awdiv 000B                ??___ftadd 0034           __CFG_STVREN$ON 000000  
              ??___awmod 0005                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 001B                ??___llmod 0009                ??___ftsub 0040  
              ??___fttol 002F                   _fround 1A80         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005                   _strlen 27FE  
  ___ftmul@f3_as_product 001F            USARTOut@bytes 0009             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0047              ?_ConvertADC 0001               __accesstop 0080  
__end_of__initialization 2908               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B               _WriteUSART 28E6           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale 1A80                ?_USARTOut 0007  
             __div_to_l_ 1FA4              ?_SetChanADC 0001        __end_of_OpenUSART 26C4  
        __div_to_l_@exp1 000C          __div_to_l_@cntr 000B                  ??_scale 0027  
        __div_to_l_@quot 0007            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 000F                  ?_fround 0024  
    __size_of_ConvertADC 0004                ?___awtoft 0009               ??_USARTOut 000A  
              ?___ftpack 0001                ?___lltoft 0009                  ?_strlen 0001  
                _BusyADC 2912                USARTOut@i 000D                  _ReadADC 28F8  
                _OpenADC 26C4        __end_of__npowers_ 1050                  __Hparam 0000  
    __size_of_SetChanADC 0016               _scale$1440 0027                  __Lparam 0000  
            ?_WriteUSART 0001          __size_of___ftge 0090                  ___awdiv 2488  
                ___ftadd 1CC6                  ___awmod 258E                  ___ftneg 2896  
                ___lldiv 250C          __size_of___wmul 0026                  ___ftmul 20CC  
                ___llmod 25FE                  ___ftsub 277E                  ___fttol 21C0  
           __psmallconst 1000                  __pcinit 2906               ??___awtoft 000C  
             ??___ftpack 0006          __size_of_fround 0246                  __ramtop 1000  
             ??___lltoft 000D                  __ptext0 2362                  __ptext1 27FE  
                __ptext2 107C                  __ptext3 1690                  __ptext4 1A80  
                __ptext5 2870                  __ptext6 20CC                  __ptext7 258E  
                __ptext8 2488                  __ptext9 1E72          __size_of_strlen 003A  
            ?__div_to_l_ 0001                  _dpowers 1001         ___awmod@dividend 0001  
         OpenADC@config2 0001                  _sprintf 107C                  main@str 0064  
   end_of_initialization 2908            __Lmediumconst 0000          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                _RCSTAbits 000FAB                  postdec2 000FDD  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
                strlen@s 0001            ??__tdiv_to_l_ 0007                _TRISCbits 000F94  
    __size_of_WriteUSART 0012             ??_ConvertADC 0001                _TXSTAbits 000FAC  
    __size_of__div_to_l_ 0128              ___ftmul@exp 001E           __end_of___ftge 2488  
         __end_of___wmul 2896       __end_of_ConvertADC 2922           __end_of_fround 1CC6  
           ??_SetChanADC 0001        __size_of_USARTOut 0040           __end_of_strlen 2838  
    start_initialization 2906      __end_of__tdiv_to_l_ 1FA4                _OpenUSART 2664  
        ___llmod@divisor 0005          ___llmod@counter 0009       __end_of_SetChanADC 28D0  
               ??___ftge 0007                 ??___wmul 0013         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0027            sprintf@tmpval 005C                 ??_strlen 0003  
             fround@prec 002D        __size_of___awtoft 0038        __size_of___ftpack 00AE  
      __size_of___lltoft 005C              __pbssCOMRAM 0067               ?_OpenUSART 0001  
            sprintf@flag 0052              sprintf@fval 0060              sprintf@prec 0054  
               ?_BusyADC 0001                 ?_ReadADC 0001        OpenADC@portconfig 0002  
               ?_OpenADC 0001        __CFG_CCP2MX$PORTC 000000             ??_WriteUSART 0001  
               ?___awdiv 0007                 ?___ftadd 002E                 ?___awmod 0001  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0015  
               ?___llmod 0001                 ?___ftsub 003A                __npowers_ 1029  
               ?___fttol 002B            ?_Delay10KTCYx 0001              __tdiv_to_l_ 1E72  
           ??__div_to_l_ 0007              __smallconst 1000                 ?_sprintf 0040  
         __size_of_scale 03F0       __end_of_WriteUSART 28F8           ___wmul@product 0013  
          OpenADC@config 0005                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 20CC         __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0001  
               _USARTOut 27BE               _ADCON0bits 000FC2        ___wmul@multiplier 000F  
       Delay10KTCYx@unit 0002              ??_OpenUSART 0003           main@ADCresult1 0064  
        OpenUSART@config 0003         __size_of_BusyADC 000C         __size_of_ReadADC 000E  
               __Hrparam 0000         __size_of_OpenADC 005E                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 0084         __size_of___ftadd 01AC  
       __size_of___awmod 0070         __size_of___ftneg 0024         __size_of___lldiv 0082  
       __size_of___ftmul 00F4         __size_of___llmod 0066         __size_of___ftsub 0040  
       __size_of___fttol 00F4                 ___awtoft 2838                 ___ftpack 22B4  
            _fround$1438 002A              _fround$1439 0027                 ___lltoft 2722  
             sprintf@exp 005A               sprintf@val 0056                 __ptext10 1FA4  
               __ptext11 2722                 __ptext20 22B4                 __ptext12 25FE  
               __ptext21 27BE                 __ptext13 250C                 __ptext22 28E6  
               __ptext14 21C0                 __ptext23 28BA                 __ptext15 277E  
               __ptext24 28F8                 __ptext16 1CC6                 __ptext25 2664  
               __ptext17 2896                 __ptext26 26C4                 __ptext18 23F8  
               __ptext27 28D0                 __ptext19 2838                 __ptext28 291E  
               __ptext29 2912                 __powers_ 1050         __size_of_sprintf 0614  
          __size_of_main 0096               _INTCONbits 000FF2           OpenUSART@spbrg 0001  
               scale@scl 002A     __end_of_Delay10KTCYx 28E6                sprintf@ap 0050  
       __tdiv_to_l_@exp1 000F                sprintf@sp 0040         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001        SetChanADC@channel 0002  
           ?__tdiv_to_l_ 0001                 sprintf@c 0063                 sprintf@f 0042  
       ___lldiv@quotient 0009                 strlen@cp 0005             _USART_Status 0067  
